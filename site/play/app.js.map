{"version":3,"sources":["app.js","../src/js/Constants.js","../src/js/Viewport.js","../src/js/Util.js","../src/js/SpriteSheet-gen.js","../src/js/Sprite.js","../src/js/Input.js","../src/js/Text.js","../src/js/lib/zzfx.js","../src/js/lib/zzfxm.js","../src/js/songs/ObliqueMystique.js","../src/js/Audio.js","../src/js/ScreenShake.js","../src/js/Screen.js","../src/js/MainMenu.js","../src/js/InstructionsMenu.js","../src/js/Behavior.js","../src/js/Entity.js","../src/js/Player.js","../src/js/Rock.js","../src/js/Level.js","../src/js/Field.js","../src/js/Session.js","../src/js/Game.js","../src/js/index.js"],"names":["PLAY_SPEEDS","Viewport","[object Object]","canvas","document","getElementById","ctx","getContext","resize","force","dpi","window","devicePixelRatio","width","clientWidth","height","clientHeight","dpiWidth","dpiHeight","scale","Math","min","ceil","center","u","v","imageSmoothingEnabled","fillRect","rgba","r","g","b","a","createCanvas","createElement","SpriteSheet","Sprite","cb","image","Image","onload","src","sheet","data","anchor","font","source","w","h","img","x","y","initDynamicSprite","sliceCanvas","drawImage","loadCacheSlice","sprite","pos","rotation","this","viewportSprite2uv","save","translate","rotate","restore","game","camera","Action","UP","DOWN","LEFT","RIGHT","JUMP","STOP","PAUSE","Input","KeyMapping","KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space","buffer","history","addEventListener","event","entry","at","Date","getTime","key","code","action","push","console","log","now","filter","length","undefined","UNICODE_CHAR_MAP","join","split","reduce","map","char","idx","Text","white","black","recolor","black_shadow","blue","blue_shadow","shadow","red","terminal","terminal_shadow","text","Array","isArray","block","drawText","k","charCodeAt","floor","measureWidth","sum","c","cu","cv","next","wip","list","cWidth","saved","space","pop","line","col","row","splitParagraph","color","fillStyle","globalCompositeOperation","zzfx","t","zzfxP","zzfxG","e","zzfxX","createBufferSource","f","createBuffer","zzfxR","d","i","getChannelData","set","connect","destination_","start","q","F","z","A","l","B","G","m","C","p","PI","H","I","D","random","Z","E","n","J","K","sin","max","tan","abs","round","zzfxV","top","AudioContext","webkitAudioContext","destination","ObliqueMystique","Audio","readyToPlay","gain_","createGain","shotgun","page","shellReload","damage","alarm","victory","song","instruments","patterns","sequence","BPM","instrumentParameters","j","note","sample","patternChannel","notFirstBeat","stop","instrument","pitch","attenuation","outSampleOffset","sampleOffset","nextSampleOffset","panning","sampleBuffer","leftChannelBuffer","rightChannelBuffer","channelIndex","hasMore","sampleCache","beatLength","patternIndex","sequenceIndex","zzfxM","musicPlaying","sound","gain","linearRampToValueAtTime","currentTime","ScreenShake","frames","hAmplitude","vAmplitude","hSamples","vSamples","sampleCount","frame","s","s0","s1","decay","Screen","screen","clear","MainMenu","lastKeyPressed","toUpperCase","consume","startSession","playSpeed","showInstructions","highScores","write","InstructionsMenu","showMainMenu","State","STOPPED","FALLING","START_JUMP","JUMP_LEFT","JUMP_RIGHT","JUMP_UP","DYING","DEAD","JUMP_FRAMES","Entity","field","repeat","nextState","state","includes","onSolid","jumpStep","isLadder","emptySpace","canClimbUp","canClimbDown","step","terrain","layout","applyMovement","DEATH_FRAMES","Player","super","deathStep","moveFrame","lastActionPressed","Rock","dispenser","LEVEL_COLS","isEater","LevelData","name","time","maxRocks","rocks","Level","LEVELS","LEVEL_COUNT","levelNumber","level","Error","player","dispensers","slice","maRrocks","Field","load","oldX","oldY","update","isDisappearingFloor","checkIfPlayerShouldDie","session","rock","isStatue","updateScore","isTreasure","startNextLevel","isTrampoline","restartLevel","draw","forEach","isFire","splice","Session","score","levelCycle","lives","nextLife","moveFps","lastFrame","recentKeystrokes","match","parseInt","RegExp","$1","stat","String","padStart","Levels","scoreType","loadSpritesheet","async","init","pause","unpause","menu","requestAnimationFrame","onFrame","paused","screenshakes","screenshake","shadowOffset","setTransform","drawToViewport"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * Constants\n     */\n\n    // The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n    // may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\n    const GAME_WIDTH = 640;\n    const GAME_HEIGHT = 400;\n\n    // The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n    // pixels, we care about the ASCII display area (80x25).\n    const SCREEN_WIDTH = 80;\n    const SCREEN_HEIGHT = 25;\n\n    // The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\n    const CHAR_WIDTH = 8;\n    const CHAR_HEIGHT = 16;\n    const CHARSHEET_WIDTH = 16 * CHAR_WIDTH;\n\n    // Fixed level size\n    const LEVEL_ROWS = 20;\n    const LEVEL_COLS = 79;\n\n    // Play speeds, expressed as frames per second.\n    //\n    // According to the original, the play speeds had millisecond delays of:\n    //   [100ms, 50ms, 25ms, 13ms, 7ms].\n    //\n    // This would mean the effective FPS was:\n    //   [10, 20, 40, 76, 142].\n    //\n    // I think this is way too high, and might not be accurate (it doesn't count\n    // time spent drawing the screen and running the game's logic, which might\n    // be a significant number of milliseconds). From memory, each speed was about\n    // 50% faster than the previous one, so that's what I've set here.\n    const PLAY_SPEEDS = [10, 15, 23, 35, 50];\n\n    // Score events (note, these are just identifiers for the types of score increases, not\n    // actual score values).\n    const SCORE_ROCK = 0;\n    const SCORE_STATUE = 1;\n    const SCORE_TREASURE = 2;\n\n    /**\n     * Viewport\n     *\n     * Represents the game display (for us, a canvas).\n     */\n    const Viewport = {\n        init() {\n            Viewport.canvas = document.getElementById('canvas');\n            Viewport.ctx = Viewport.canvas.getContext('2d');\n            Viewport.resize(true);\n        },\n\n        // Resize the canvas to give us approximately our desired game display size.\n        //\n        // Rather than attempt to explain it, here's a concrete example:\n        //\n        //     we start with a desired game dimension:   480x270px\n        //          get the actual browser dimensions:  1309x468px\n        //          factor in the display's DPI ratio:  2618x936px\n        //         now calculate the horizontal scale:       5.45x\n        //                     and the vertical scale:       3.46x\n        //            our new offical game scaling is:        5.4x\n        //       and our official viewport dimensions:   484x173px\n        //\n        // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n        // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n        // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n        // UI elements the player cannot see!).\n        resize(force) {\n            let dpi = window.devicePixelRatio,\n                width = Viewport.canvas.clientWidth,\n                height = Viewport.canvas.clientHeight,\n                dpiWidth = width * dpi,\n                dpiHeight = height * dpi;\n\n            if (\n                force ||\n                Viewport.canvas.width !== dpiWidth ||\n                Viewport.canvas.height !== dpiHeight\n            ) {\n                Viewport.canvas.width = dpiWidth;\n                Viewport.canvas.height = dpiHeight;\n\n                Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n                Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n                Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n                Viewport.center = {\n                    u: (Viewport.width / 2) | 0,\n                    v: (Viewport.height / 2) | 0\n                };\n                Viewport.clientWidth = width;\n                Viewport.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                Viewport.ctx.imageSmoothingEnabled = false;\n            }\n\n            // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n            //Viewport.canvas.style.cursor = 'none';\n        },\n\n        fillViewportRect() {\n            Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n        }\n    };\n\n    function rgba(r, g, b, a) {\n        return `rgba(${r},${g},${b},${a})`;\n    }\n\n    function createCanvas(width, height) {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        return { canvas, ctx };\n    }\n\n    /**\n     * This module is generated by `gulp buildAssets`.\n     */\n    const SpriteSheet =\n        /* <generated> */\n    { font: [ [ 128, 0, 128, 448 ] ],\n      font2: [ [ 0, 0, 128, 512 ] ],\n      harold: [ [ 128, 448, 19, 12 ] ],\n      uri: 'sprites.png' };\n    /* </generated> */\n\n    /**\n     * Sprite\n     *\n     * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n     * modifying them or constructing using primitives. To save space, we use some techniques\n     * like storing only a small slice of an image in the spritesheet, then using code\n     * to duplicate it, add some randomness, etc.\n     */\n    const Sprite = {\n        // This is an exception to the rule, loading the spritesheet is a special action that\n        // happens BEFORE everything is initialized.\n        loadSpritesheet(cb) {\n            let image = new Image();\n            image.onload = cb;\n            image.src = SpriteSheet.uri;\n            Sprite.sheet = image;\n        },\n\n        init() {\n            // Base pixel font and icons (see `Text.init` for additional variations)\n            Sprite.font = initBasicSprite(SpriteSheet.font2[0]);\n\n            return;\n        },\n\n        /**\n         * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n         * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n         * that's appropriate!\n         */\n        drawSprite(ctx, sprite, u, v) {\n            ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n        },\n\n        drawViewportSprite(sprite, pos, rotation) {\n            let { u, v } = this.viewportSprite2uv(\n                sprite,\n                pos\n            );\n            if (rotation) {\n                Viewport.ctx.save();\n                Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n                Viewport.ctx.rotate(rotation);\n                Viewport.ctx.drawImage(\n                    sprite.img,\n                    -sprite.anchor.x,\n                    -sprite.anchor.y\n                );\n                Viewport.ctx.restore();\n            } else {\n                Viewport.ctx.drawImage(sprite.img, u, v);\n            }\n        },\n\n        viewportSprite2uv(sprite, pos) {\n            return {\n                u: pos.x - sprite.anchor.x - game.camera.pos.x + Viewport.center.u,\n                v: pos.y - sprite.anchor.y - game.camera.pos.y + Viewport.center.v\n            };\n        }\n    };\n\n    // Sprite utility functions\n\n    function initBasicSprite(data, anchor) {\n        return initDynamicSprite(loadCacheSlice(...data), anchor);\n    }\n\n    function initDynamicSprite(source, anchor) {\n        let w = source.width,\n            h = source.height;\n\n        return {\n            img: source,\n            // Hack! Using a flat `.map(initBasicSprite)` is actually going to pass the\n            // element INDEX as second argument, resulting in \"anchor=1\". The right solution\n            // here is \"typeof anchor === 'object' ?\", but to save bytes I avoid using\n            // the typeof and instanceof keywords anywhere in the codebase. Hence,\n            // \"anchor && anchor.x\".\n            anchor: (anchor && anchor.x) ? anchor : { x: (w / 2) | 0, y: (h / 2) | 0 }\n        };\n    }\n\n    function loadCacheSlice(x, y, w, h) {\n        const source = Sprite.sheet;\n        const sliceCanvas = createCanvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n    }\n\n    // A list of in-game actions that can be performed by the player\n    const Action = {\n        UP:    11,\n        DOWN:  12,\n        LEFT:  13,\n        RIGHT: 14,\n        JUMP:  15,\n        STOP:  16,\n        PAUSE: 17\n    };\n\n    // A list of key code mappings and what action they perform. Here we hard-code it, but\n    // you could easily also have the key mappings controlled by settings and let the user\n    // configure it.\n    const KeyMapping = {\n        KeyW:       Action.UP,\n        KeyS:       Action.DOWN,\n        KeyA:       Action.LEFT,\n        KeyD:       Action.RIGHT,\n        ArrowUp:    Action.UP,\n        ArrowDown:  Action.DOWN,\n        ArrowLeft:  Action.LEFT,\n        ArrowRight: Action.RIGHT,\n        Space:      Action.JUMP\n    };\n\n    const Input = {\n        Action,\n        KeyMapping,\n\n        init() {\n            // Input buffer - new keypress events go into this buffer to be handled\n            // during the game's update loop. It's up to the `update()` methods to consume\n            // key presses and remove them from the buffer.\n            this.buffer = [];\n\n            // Input history - history contains recent key press events in order,\n            // removed automatically after a few seconds. This is useful for detecting\n            // inputs like cheat codes, for example.\n            this.history = [];\n\n            window.addEventListener('keydown', event => {\n                let entry = {\n                    at: new Date().getTime(),\n                    key: event.key,\n                    code: event.code,\n                    action: Input.KeyMapping[event.code] || Input.Action.STOP\n                };\n                Input.buffer.push(entry);\n                Input.history.push(entry);\n                console.log(entry);\n            });\n        },\n\n        update() {\n            let now = new Date().getTime();\n            this.history = this.history.filter(entry => entry.at > now - 3000);\n        },\n\n        lastKeyPressed() {\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n        },\n\n        lastCodePressed() {\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].code : '';\n        },\n\n        lastActionPressed() {\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n        },\n\n        consume() {\n            this.buffer = [];\n        },\n    };\n\n    // In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n    // characters are convenient for us. Here we can choose to map unicode characters to positions\n    // 0x80+ in the charsheet, making it easy for us to render things like special characters,\n    // box drawing characters, etc.\n    const SUPPORTED_UNICODE_CHARS = [\n        '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n        '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n        '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n    ].join('');\n\n    const UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n        map[char] = 0x80 + idx;\n        return map;\n    }, {});\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        init() {\n            Text.white = Sprite.font.img;\n\n            Text.black = recolor(Text.white, rgba(0, 0, 0, 1));\n            Text.black_shadow = recolor(Text.white, rgba(90, 20, 90, 0.15));\n            Text.blue = recolor(Text.white, rgba(200, 40, 220, 1));\n            Text.blue_shadow = recolor(Text.white, rgba(240, 50, 200, 0.2));\n            Text.shadow = recolor(Text.white, rgba(240, 240, 255, 0.25));\n            Text.red = recolor(Text.white, rgba(240, 50, 50, 1));\n\n            Text.terminal = recolor(Text.white, rgba(51, 255, 0, 1));\n            Text.terminal_shadow = recolor(Text.white, rgba(255, 255, 255, 0.3));\n\n            Text.terminal = recolor(Text.white, rgba(51, 255, 0, 0.9));\n            Text.terminal_shadow = undefined;\n\n            Text['#ead4aa'] = recolor(Text.white, '#ead4aa');\n            Text['#fee761'] = recolor(Text.white, '#fee761');\n            Text['#ff0044'] = recolor(Text.white, '#ff0044');\n        },\n\n        drawText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n            if (Array.isArray(text)) {\n                for (let block of text) {\n                    Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, scale, font, shadow);\n                }\n                return;\n            }\n\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n                let k = (c - 0) * (CHAR_WIDTH);\n                if (shadow) {\n                    ctx.drawImage(\n                        shadow,\n                        k % CHARSHEET_WIDTH,\n                        Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                        CHAR_WIDTH,\n                        CHAR_HEIGHT,\n                        u + 1,\n                        v,\n                        CHAR_WIDTH * scale,\n                        CHAR_HEIGHT * scale\n                    );\n                }\n                ctx.drawImage(\n                    font,\n                    k % CHARSHEET_WIDTH,\n                    Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    u,\n                    v,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                u += CHAR_WIDTH * scale;\n            }\n        },\n\n        /*\n        drawRightText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n            u -= Text.measureWidth(text, scale);\n            Text.drawText(ctx, text, u, v, scale, font, shadow);\n        },\n        */\n\n        measureWidth(text, scale = 1) {\n            return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n        },\n\n        splitParagraph(text, w, h) {\n            let cu = 0, cv = 0;\n            let next = () => ({ text: '', u: cu, v: cv });\n            let wip = next();\n            let list = [];\n\n            for (let c of text.split('')) {\n                let cWidth = Text.measureWidth(c, 1);\n                if (c === '\\n' || cu + cWidth > w) {\n                    let saved = '';\n                    if (c !== '\\n' && c !== ' ') {\n                        let space = wip.text.split(' ');\n                        if (space.length > 1) {\n                            saved = space.pop();\n                            wip.text = space.join(' ');\n                        }\n                    }\n                    if (wip.text.length > 0) list.push(wip);\n                    cu = 0;\n                    cv += (CHAR_HEIGHT);\n                    wip = next();\n                    if (saved.length > 0) {\n                        wip.text = saved;\n                        cu += Text.measureWidth(wip.text, 1);\n                    }\n                } else {\n                    cu += cWidth;\n                }\n                if (c !== '\\n') {\n                    wip.text = wip.text + c;\n                }\n            }\n\n            if (wip.text.length > 0) list.push(wip);\n\n            return list.map(line => ({\n                ...line,\n                w: Text.measureWidth(line.text, 1),\n                h: CHAR_HEIGHT\n            }));\n        },\n\n        drawTextColRow(text, col, row) {\n            Text.drawText(Viewport.ctx, Text.splitParagraph(text, Viewport.width), col * CHAR_WIDTH, row * CHAR_HEIGHT, 1, Text.terminal, Text.terminal_shadow);\n        }\n    };\n\n    // Text utility functions\n\n    function recolor(font, color) {\n        let canvas = createCanvas(font.width, font.height);\n        canvas.ctx.fillStyle = color;\n        canvas.ctx.fillRect(0, 0, font.width, font.height);\n        canvas.ctx.globalCompositeOperation = 'destination-in';\n        canvas.ctx.drawImage(font, 0, 0);\n        return canvas.canvas;\n    }\n\n    // zzfx() - the universal entry point -- returns a AudioBufferSourceNode\n    const zzfx=(...t)=>zzfxP(zzfxG(...t));\n\n    // zzfxP() - the sound player -- returns a AudioBufferSourceNode\n    const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e};\n\n    // zzfxG() - the sound generator -- returns an array of sample data\n    const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z};\n\n    // zzfxV - global volume\n    const zzfxV=.3;\n\n    // zzfxR - global sample rate\n    const zzfxR=44100;\n\n    // zzfxX - the common audio context\n    const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n    // destination for zzfx and zzfxm sounds\n    zzfx.destination_ = zzfxX.destination;\n\n    /**\n     * ZzFX Music Renderer v2.0.2 by Keith Clark\n     */\n\n    /**\n     * @typedef Channel\n     * @type {Array.<Number>}\n     * @property {Number} 0 - Channel instrument\n     * @property {Number} 1 - Channel panning (-1 to +1)\n     * @property {Number} 2 - Note\n     */\n\n    /**\n     * @typedef Pattern\n     * @type {Array.<Channel>}\n     */\n\n    /**\n     * @typedef Instrument\n     * @type {Array.<Number>} ZzFX sound parameters\n     */\n\n    /**\n     * Generate a song\n     *\n     * @param {Array.<Instrument>} instruments - Array of ZzFX sound paramaters.\n     * @param {Array.<Pattern>} patterns - Array of pattern data.\n     * @param {Array.<Number>} sequence - Array of pattern indexes.\n     * @param {Number} [speed=125] - Playback speed of the song (in BPM).\n     * @returns {Array.<Array.<Number>>} Left and right channel sample data.\n     */\n\n    const zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n        let instrumentParameters,\n            i,\n            j,\n            k,\n            note,\n            sample,\n            patternChannel,\n            notFirstBeat,\n            stop,\n            instrument,\n            pitch,\n            attenuation,\n            outSampleOffset,\n            sampleOffset,\n            nextSampleOffset,\n            sampleBuffer = [],\n            leftChannelBuffer = [],\n            rightChannelBuffer = [],\n            channelIndex = 0,\n            panning,\n            hasMore = 1,\n            sampleCache = {},\n            beatLength = ((zzfxR / BPM) * 60) >> 2;\n\n        // for each channel in order until there are no more\n        for (; hasMore; channelIndex++) {\n            // reset current values\n            sampleBuffer = [(hasMore = notFirstBeat = pitch = outSampleOffset = 0)];\n\n            // for each pattern in sequence\n            sequence.map((patternIndex, sequenceIndex) => {\n                // get pattern for current channel, use empty 1 note pattern if none found\n                patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n                // check if there are more channels\n                hasMore |= !!patterns[patternIndex][channelIndex];\n\n                // get next offset, use the length of first channel\n                nextSampleOffset =\n                    outSampleOffset +\n                    (patterns[patternIndex][0].length - 2 - !notFirstBeat) *\n                        beatLength;\n\n                // for each beat in pattern, plus one extra if end of sequence\n                for (\n                    i = 2, k = outSampleOffset;\n                    i <\n                    patternChannel.length + (sequenceIndex == sequence.length - 1);\n                    notFirstBeat = ++i\n                ) {\n                    // <channel-note>\n                    note = patternChannel[i];\n\n                    // stop if different instrument or new note\n                    stop = (instrument != (patternChannel[0] || 0)) | note | 0;\n\n                    // fill buffer with samples for previous beat, most cpu intensive part\n                    for (\n                        j = 0;\n                        j < beatLength && notFirstBeat;\n                        // fade off attenuation at end of beat if stopping note, prevents clicking\n                        j++ > beatLength - 99 && stop\n                            ? (attenuation += (attenuation < 1) / 99)\n                            : 0\n                    ) {\n                        // copy sample to stereo buffers with panning\n                        sample =\n                            ((1 - attenuation) * sampleBuffer[sampleOffset++]) /\n                                2 || 0;\n                        leftChannelBuffer[k] =\n                            (leftChannelBuffer[k] || 0) + sample * panning - sample;\n                        rightChannelBuffer[k] =\n                            (rightChannelBuffer[k++] || 0) +\n                            sample * panning +\n                            sample;\n                    }\n\n                    // set up for next note\n                    if (note) {\n                        // set attenuation\n                        attenuation = note % 1;\n                        panning = patternChannel[1] || 0;\n                        if ((note |= 0)) {\n                            // get cached sample\n                            sampleBuffer = sampleCache[\n                                [\n                                    (instrument =\n                                        patternChannel[(sampleOffset = 0)] || 0),\n                                    note\n                                ]\n                            ] =\n                                sampleCache[[instrument, note]] ||\n                                // add sample to cache\n                                ((instrumentParameters = [\n                                    ...instruments[instrument]\n                                ]),\n                                (instrumentParameters[2] *=\n                                    2 ** ((note - 12) / 12)),\n                                zzfxG(...instrumentParameters));\n                        }\n                    }\n                }\n\n                // update the sample offset\n                outSampleOffset = nextSampleOffset;\n            });\n        }\n\n        return [leftChannelBuffer, rightChannelBuffer];\n    };\n\n    const ObliqueMystique = [[[1.3,0,23,,,.2,3,5],[1.5,0,4e3,,,.03,2,1.25,,,,,.02,6.8,-.3,,.5],[.7,0,2100,,,.2,3,3,,,-400,,,2],[,0,655,,,.11,2,1.65,,,,,,3.8,-.1,.1]],[[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,],[,.6,,,,,13,,18,,19,,,,,,,,19,,18,,,,16,,,,13,,,,,,,,,,13,,18,,19,,,,,,,,18,19,18,,,,13,14,13,,16,,18,,19,,],[3,-1,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,13,13,13,13]],[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,]]],[1,1,0,0,0,0,1,0],,];\n\n    const Audio = {\n        init() {\n            Audio.readyToPlay = false;\n\n            Audio.ctx = zzfxX;\n            Audio.gain_ = Audio.ctx.createGain();\n            Audio.gain_.connect(Audio.ctx.destination);\n            zzfx.destination_ = Audio.gain_;\n\n            Audio.shotgun = [,0.01,140,0.01,0.02,0.45,4,2.42,0.1,-0.1,,,,1.2,,0.3,0.04,0.8,0.02];\n            Audio.page = [,,1233,,.01,.2,1,1.43,,,539,.1,,,,,,.51,.03,.01];\n            Audio.shellReload = [,,68,0.01,,0.14,1,1.53,7.5,0.1,50,0.02,-0.01,-0.2,0.1,0.2,,0.47,0.01];\n            Audio.damage = [,,391,,.19,.01,2,.54,-4,20,,,,,,,.02,.9];\n            Audio.alarm = [,,970,.12,.25,.35,,.39,8.1,,10,.1,.2,,.1,,,.6,.09,.13];\n            // [,,961,.05,.06,1.17,1,4.67,.8,,,,,.8,-0.8,.1,.49,.62,.09];\n            Audio.victory = [,,454,.06,.86,.71,2,.63,-0.7,1.7,-83,.09,.27,.3,.2,,.18,.95,.02,.02];\n            Audio.song = zzfxM(...ObliqueMystique);\n\n            // Save our background music in os13k, for fun!\n            //localStorage[`OS13kMusic,${TITLE} - Oblique Mystique`] = JSON.stringify(ObliqueMystique);\n        },\n\n        update() {\n            if (!Audio.readyToPlay) return;\n\n            if (!Audio.musicPlaying) {\n                //Audio.bgmusicnode = zzfxP(...Audio.song);\n                //Audio.bgmusicnode.loop = true;\n                Audio.musicPlaying = true;\n            }\n        },\n\n        play(sound) {\n            if (!Audio.readyToPlay) return;\n            zzfx(...sound);\n        },\n\n        // It's important we do pausing and unpausing as specific events and not in general update(),\n        // because update() is triggered by the animation frame trigger which does not run if the\n        // page is not visible. (So, if you want the music to fade in the background, for example,\n        // that's not helpful if it won't work because you aren't looking at the page!)\n\n        pause() {\n            Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n        },\n\n        unpause() {\n            Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n        }\n    };\n\n    // https://jonny.morrill.me/en/blog/gamedev-how-to-implement-a-camera-shake-effect/\n\n    /**\n     * Shake it baby.\n     */\n    class ScreenShake {\n        constructor(frames, hAmplitude, vAmplitude) {\n            this.frames = frames;\n            this.hAmplitude = hAmplitude;\n            this.vAmplitude = vAmplitude;\n            this.hSamples = [];\n            this.vSamples = [];\n\n            var sampleCount = frames / 2;\n            for (let i = 0; i < sampleCount; i++) {\n                this.hSamples.push(Math.random() * 2 - 1);\n                this.vSamples.push(Math.random() * 2 - 1);\n            }\n            this.frame = -1;\n        }\n\n        update() {\n            this.frame++;\n            if (this.frame >= this.frames) {\n                return false;\n            }\n\n            //let s = (this.frames / 10) * (this.frame / this.frames);\n            let s = this.frame / 2;\n            let s0 = s | 0;\n            let s1 = s0 + 1;\n            let decay = 1 - this.frame / this.frames;\n\n            this.x =\n                this.hAmplitude *\n                decay *\n                (this.hSamples[s0] +\n                    (s - s0) * (this.hSamples[s1] - this.hSamples[s0]));\n            this.y =\n                this.vAmplitude *\n                decay *\n                (this.vSamples[s0] +\n                    (s - s0) * (this.vSamples[s1] - this.vSamples[s0]));\n\n            return true;\n        }\n    }\n\n    const Screen = {\n        init() {\n            this.screen = [];\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                this.screen.push([]);\n            }\n            this.clear();\n        },\n\n        clear() {\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                for (let x = 0; x < SCREEN_WIDTH; x++) {\n                    this.screen[y][x] = ' ';\n                }\n            }\n        },\n\n        write(x, y, text) {\n            if (!Array.isArray(text)) text = [text];\n\n            for (let j = 0; j < text.length; j++) {\n                for (let i = 0; i < text[j].length; i++) {\n                    this.screen[y + j][x + i] = text[j][i];\n                }\n            }\n        },\n\n        drawToViewport() {\n            let text = this.screen.map(row => row.join('')).join('\\n');\n\n            Text.drawText(\n                Viewport.ctx,\n                Text.splitParagraph(text, Viewport.width),\n                0, 0,\n                1,\n                Text.terminal, Text.terminal_shadow\n            );\n        }\n    };\n\n    class MainMenu {\n        constructor() {\n        }\n\n        update() {\n            switch (Input.lastKeyPressed().toUpperCase()) {\n                case 'P':\n                    Input.consume();\n                    game.startSession();\n                    break;\n                case 'L':\n                    Input.consume();\n                    game.playSpeed = (game.playSpeed + 1) % PLAY_SPEEDS.length;\n                    break;\n                case 'I':\n                    Input.consume();\n                    game.showInstructions();\n                    break;\n                case 'E':\n                    Input.consume();\n                    game.showInstructions();\n                    break;\n            }\n        }\n\n        draw() {\n            let version = '?';\n            let terminal = '?';\n\n            let highScores = [\n                `1) 6000  Bob`,\n                `2) 6000  Tom`,\n                `3) 4000  Wayne`,\n                ``,\n                ``\n            ];\n\n            Screen.clear();\n            Screen.write(0, 0, [\n                `               LL                     dd       dd`,\n                `               LL                     dd       dd                      tm`,\n                `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n                `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n                ``,\n                `                                       Version:    ${version}`,\n                `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n                `10970 Ashton Ave.  Suite 312           Play speed: ${game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n                `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n                `                                       Stop = Other`,\n                ``,\n                `P = Play game                          High Scores`,\n                `L = Change level of difficulty         ${highScores[0]}`,\n                `C = Configure Ladder                   ${highScores[1]}`,\n                `I = Instructions                       ${highScores[2]}`,\n                `E = Exit Ladder                        ${highScores[3]}`,\n                `                                       ${highScores[4]}`,\n                ``,\n                `Enter one of the above:`\n            ]);\n        }\n    }\n\n    class InstructionsMenu {\n        constructor() {\n        }\n\n        update() {\n            if (Input.lastKeyPressed().toUpperCase() !== '') {\n                Input.consume();\n                game.showMainMenu();\n            }\n        }\n\n        draw() {\n            Screen.clear();\n            Screen.write(0, 0, [\n                `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n                `dark corridors never before seen by human eyes and find hidden`,\n                `treasures and riches.`,\n                ``,\n                `You control Lad by typing the direction buttons and jumping by`,\n                `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n                `You must find and grasp the treasures (shown as $) BEFORE the`,\n                `bonus time runs out.`,\n                ``,\n                `A new Lad will be awarded for every 10,000 points.`,\n                `Extra points are awarded for touching the gold`,\n                `statues (shown as &).  You will receive the bonus time points`,\n                `that are left when you have finished the level.`,\n                ``,\n                `Type an ESCape to pause the game.`,\n                ``,\n                `Remember, there is more than one way to skin a cat. (Chum)`,\n                ``,\n                `Good luck Lad.`,\n                ``,\n                ``,\n                ``,\n                `Type RETURN to return to main menu:`\n            ]);\n        }\n    }\n\n    // This is our list of STATES. Each entity starts out in one of these states and can move between\n    // them based on events that happen in the game. (Note that some of these are directions, but\n    // since an entity keeps moving in the direction it is going unless stopped, directions are\n    // states in this game.)\n    const State = {\n        STOPPED:    1,         // Standing still\n        UP:         2,         // Moving up (player only)\n        LEFT:       3,         // Moving left\n        DOWN:       4,         // Moving down\n        RIGHT:      5,         // Moving right\n        FALLING:    6,         // Falling\n        START_JUMP: 7,         // About to start a jump (player only)\n        JUMP_LEFT:  8,         // Jumping left (player only)\n        JUMP_RIGHT: 9,         // Jumping right (player only)\n        JUMP_UP:    10,        // Jumping straight up (player only)\n        DYING:      11,        // Dying (used as a death animation)\n        DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n    };\n\n    const JUMP_FRAMES = {\n        [State.JUMP_RIGHT]: [\n            { x: 1, y: -1 },\n            { x: 1, y: -1 },\n            { x: 1, y: 0 },\n            { x: 1, y: 0 },\n            { x: 1, y: 1 },\n            { x: 1, y: 1 }\n        ],\n        [State.JUMP_LEFT]: [\n            { x: -1, y: -1 },\n            { x: -1, y: -1 },\n            { x: -1, y: 0 },\n            { x: -1, y: 0 },\n            { x: -1, y: 1 },\n            { x: -1, y: 1 }\n        ],\n        [State.JUMP_UP]: [\n            { x: 0, y: -1 },\n            { x: 0, y: -1 },\n            { x: 0, y: 0 },\n            { x: 0, y: 1 },\n            { x: 0, y: 1 },\n            { x: 0, y: 0 }\n        ],\n    };\n\n    class Entity {\n        applyMovement(field) {\n            let repeat = false;\n\n            // This method contains generic \"movement\" application for all entities, including\n            // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n            // work the same for both.\n            //\n            // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n            // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n            if (this.nextState) {\n                switch (this.state) {\n                    case State.STOPPED:\n                    case State.LEFT:\n                    case State.RIGHT:\n                        if ([State.LEFT, State.RIGHT, State.STOPPED].includes(this.nextState)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                        break;\n\n                    case State.UP:\n                    case State.DOWN:\n                        // Normal\n                        if ([State.LEFT, State.RIGHT].includes(this.nextState)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                        break;\n                }\n            }\n\n            if (this.nextState === State.START_JUMP) {\n                // Special case: the user wants to jump!\n                //\n                // If the player is standing on something solid, we initiate a jump based on the current\n                // movement of the player. If not, we (sort of) ignore the request to jump... although\n                // it does subtly change the behavior upon landing.\n                if (field.onSolid(this.x, this.y)) {\n                    if (this.state === State.STOPPED || this.state === State.FALLING) {\n                        this.state = State.JUMP_UP;\n                        this.jumpStep = 0;\n                        this.nextState = State.STOPPED;\n                    } else if (this.state === State.LEFT || this.state === State.JUMP_LEFT) {\n                        this.state = State.JUMP_LEFT;\n                        this.jumpStep = 0;\n                        this.nextState = State.LEFT;\n                    } else if (this.state === State.RIGHT || this.state === State.JUMP_RIGHT) {\n                        this.state = State.JUMP_RIGHT;\n                        this.jumpStep = 0;\n                        this.nextState = State.RIGHT;\n                    }\n                } else {\n                    if (this.state === State.JUMP_UP || this.state === State.FALLING) {\n                        this.nextState = State.STOPPED;\n                    } else if (this.state === State.JUMP_RIGHT) {\n                        this.nextState = State.RIGHT;\n                    } else if (this.state === State.JUMP_LEFT) {\n                        this.nextState = State.LEFT;\n                    }\n                }\n            } else if (this.nextState === State.UP && field.isLadder(this.x, this.y)) {\n                // Special case: the user wants to go up!\n                //\n                // If the user is on a ladder, we can start ascending. Note that if the user is not\n                // on a ladder we ignore their input, which is intentional -- this allows queued\n                // (pacman) input, where we can tap UP a little before reaching the ladder.\n                this.state = State.UP;\n                this.nextState = undefined;\n            } else if (this.nextState === State.DOWN && (field.isLadder(this.x, this.y) || field.isLadder(this.x, this.y + 1))) {\n                // Special case: the player wants to go down!\n                //\n                // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n                // on a ladder we ignore their input, which is intentional -- this allows queued\n                // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n                this.state = State.DOWN;\n                this.nextState = undefined;\n            }\n\n            switch (this.state) {\n                case State.LEFT:\n                    if (!field.onSolid(this.x, this.y)) {\n                        this.nextState = State.LEFT;\n                        this.state = State.FALLING;\n                        repeat = true;\n                        break;\n                    }\n                    if (field.emptySpace(this.x - 1, this.y)) {\n                        this.x--;\n                    } else {\n                        this.nextState = State.STOPPED;\n                    }\n                    break;\n\n                case State.RIGHT:\n                    if (!field.onSolid(this.x, this.y)) {\n                        this.nextState = State.RIGHT;\n                        this.state = State.FALLING;\n                        repeat = true;\n                        break;\n                    }\n                    if (field.emptySpace(this.x + 1, this.y)) {\n                        this.x++;\n                    } else {\n                        this.nextState = State.STOPPED;\n                    }\n                    break;\n\n                case State.UP:\n                    if (field.canClimbUp(this.x, this.y - 1)) {\n                        this.y--;\n                    } else {\n                        this.state = State.STOPPED;\n                    }\n                    break;\n\n                case State.DOWN:\n                    if (field.canClimbDown(this.x, this.y + 1)) {\n                        this.y++;\n                    } else {\n                        this.state = State.STOPPED;\n                    }\n                    break;\n\n                case State.JUMP_RIGHT:\n                case State.JUMP_LEFT:\n                case State.JUMP_UP:\n                    let step = JUMP_FRAMES[this.state][this.jumpStep];\n                    console.log(['jump', this.state, this.jumpStep, step]);\n                    if ((this.x + step.x >= 0) && (this.x + step.x < LEVEL_COLS)) {\n                        let terrain = field.layout[this.y + step.y][this.x + step.x];\n                        if (['=', '|', '-'].includes(terrain)) {\n                            if (field.onSolid(this.x, this.y)) {\n                                this.state = this.nextState;\n                                this.nextState = undefined;\n                            } else {\n                                switch (this.state) {\n                                    case State.JUMP_RIGHT:\n                                        this.nextState = State.RIGHT;\n                                        break;\n                                    case State.JUMP_LEFT:\n                                        this.nextState = State.LEFT;\n                                        break;\n                                    case State.JUMP_UP:\n                                        this.nextState = State.UP;\n                                        break;\n                                }\n                                this.state = State.FALLING;\n                            }\n                        } else if (terrain === 'H') {\n                            this.x += step.x;\n                            this.y += step.y;\n                            this.state = State.STOPPED;\n                            this.nextState = undefined;\n                        } else {\n                            this.x += step.x;\n                            this.y += step.y;\n                            this.jumpStep++;\n\n                            if (this.jumpStep >= JUMP_FRAMES[this.state].length) {\n                                this.state = this.nextState;\n                                this.nextState = undefined;\n                            }\n                        }\n                    } else {\n                        if (field.onSolid(this.x, this.y)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        } else {\n                            this.state = State.FALLING;\n                            this.nextState = State.STOPPED;\n                        }\n                    }\n                    break;\n\n                case State.FALLING:\n                    if (field.onSolid(this.x, this.y)) {\n                        this.state = this.nextState || State.STOPPED;\n                    } else {\n                        this.y++;\n                    }\n                    break;\n            }\n\n            // If we were attempting to move somewhere and realized we should be falling instead,\n            // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n            // frame\" from the user's point of view.\n            if (repeat) return this.applyMovement(field);\n        }\n    }\n\n    const DEATH_FRAMES = ['p', 'p', 'b', 'd', 'd', 'q', 'p', 'p', 'b', 'd', 'd', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n    /**\n     * Player\n     */\n    class Player extends Entity {\n        constructor(x, y) {\n            super();\n            this.x = x;\n            this.y = y;\n            this.state = State.STOPPED;\n            this.nextState = State.STOPPED;\n            this.jumpStep = 0;\n            this.deathStep = 0;\n            console.log('player constructed', x, y);\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            let action = Input.lastActionPressed();\n\n            if (action === Input.Action.LEFT) {\n                this.nextState = State.LEFT;\n                Input.consume();\n            } else if (action === Input.Action.RIGHT) {\n                this.nextState = State.RIGHT;\n                Input.consume();\n            } else if (action === Input.Action.UP) {\n                this.nextState = State.UP;\n                Input.consume();\n            } else if (action === Input.Action.DOWN) {\n                this.nextState = State.DOWN;\n                Input.consume();\n            } else if (action === Input.Action.JUMP) {\n                this.nextState = State.START_JUMP;\n                Input.consume();\n            }\n\n            return this.applyMovement(field);\n        }\n\n        draw() {\n            let char = 'g';\n\n            switch (this.state) {\n                case State.RIGHT:\n                case State.JUMP_RIGHT:\n                case State.UP:\n                case State.DOWN:\n                    char = 'p';\n                    break;\n\n                case State.LEFT:\n                case State.JUMP_LEFT:\n                    char = 'q';\n                    break;\n\n                case State.FALLING:\n                    char = 'b';\n                    break;\n\n                case State.DYING:\n                    char = DEATH_FRAMES[this.deathStep];\n                    break;\n\n                case State.DEAD:\n                    char = '_';\n                    break;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n    }\n\n    const DEATH_FRAMES$1 = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\n    class Rock extends Entity {\n        constructor(dispenser) {\n            super();\n            this.x = dispenser.x;\n            this.y = dispenser.y;\n            this.state = State.FALLING;\n            this.nextState = undefined;\n            this.deathStep = 0;\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES$1.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            if (this.state === State.STOPPED) {\n                if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                    this.nextState = State.RIGHT;\n                } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                    this.nextState = State.LEFT;\n                } else {\n                    this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n                }\n            }\n\n            if (this.x === 0 && this.state === State.LEFT) {\n                this.state = State.RIGHT;\n            }\n\n            if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n                this.state = State.LEFT;\n            }\n\n            if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n                this.nextState = State.FALLING;\n            }\n\n            if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n                let r = Math.floor(Math.random() * 4);\n                this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n            }\n\n            if (field.isEater(this.x, this.y)) {\n                this.state = State.DYING;\n                return;\n            }\n\n            this.applyMovement(field);\n        }\n\n        draw() {\n            let char = 'o';\n\n            switch (this.state) {\n                case State.DYING:\n                    char = DEATH_FRAMES$1[this.deathStep];\n                    break;\n                case State.DEAD:\n                    return;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n    }\n\n    var LevelData = [\n    \t{\n    \t\tname: \"Easy Street\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                                       V                 $                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==================================================            \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H          H                             H                     \",\n    \t\t\t\"================H==========H==================   ========H=====================\",\n    \t\t\t\"                &          H                             H          |       |  \",\n    \t\t\t\"                                                         H         Easy Street \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==========H=========  =======================                 \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"======================== ====================== =========H==============       \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"*    p                                                   H                    *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Long Island\",\n    \t\ttime: 45,\n    \t\tmaxRocks: 8,\n    \t\tlayout: [\n    \t\t\t\"                                                                          $    \",\n    \t\t\t\"                                                                   &      H    \",\n    \t\t\t\"    H       |V                                                     V|     H    \",\n    \t\t\t\"====H======================= ========================= ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                    & |                         . .                  H    \",\n    \t\t\t\"========================== ======  =================== ===================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"                                  |                                       H    \",\n    \t\t\t\"    H                             |                 .  .                  H    \",\n    \t\t\t\"====H=====================   ======  ================  ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                      |                                                   \",\n    \t\t\t\"    H                      |                        .   .                 H    \",\n    \t\t\t\"=========================  ========    ==============   ==================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"==============                      |                                     H    \",\n    \t\t\t\" Long Island |   p         *        |                 *                   H    \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Ghost Town\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                            V               V           V               $      \",\n    \t\t\t\"                                                                       $$$     \",\n    \t\t\t\"     p    H                                                    H      $$$$$   H\",\n    \t\t\t\"==========H===                                                =H==============H\",\n    \t\t\t\"          H                                                    H              H\",\n    \t\t\t\"          H                              &                     H              H\",\n    \t\t\t\"     ==============   ====     =    ======    =   ====    =====H=====         H\",\n    \t\t\t\"    G              ^^^    ^^^^^ ^^^^      ^^^^ ^^^    ^^^                     $\",\n    \t\t\t\"    h                                                                 |        \",\n    \t\t\t\"    o     |                     H                             &       |        \",\n    \t\t\t\"    s     ======================H============================== ===========    \",\n    \t\t\t\"    t        &                  H                                              \",\n    \t\t\t\"                                H                                              \",\n    \t\t\t\"              |                 H                 H                   H        \",\n    \t\t\t\"    T         ==================H=================H===================H======= \",\n    \t\t\t\"    o                                             H                   H        \",\n    \t\t\t\"    w                                                                 H        \",\n    \t\t\t\"    n                           ^                                     H        \",\n    \t\t\t\"*                              ^^^                                    H       *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Tunnel Vision\",\n    \t\ttime: 36,\n    \t\trocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                                            V                       V          \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"     H             H                         |                H                \",\n    \t\t\t\"=====H=====--======H==========================     ===----====H===========     \",\n    \t\t\t\"     H             H                |&&                       H                \",\n    \t\t\t\"     H             H                ==================        H                \",\n    \t\t\t\"     H             H                       tunnel  H          H                \",\n    \t\t\t\"     H           =======---===----=================H=         H           H    \",\n    \t\t\t\"     H         |                           vision  H          H           H    \",\n    \t\t\t\"     H         =========---&      -----============H          H           H    \",\n    \t\t\t\"     H           H                                 H |        H           H    \",\n    \t\t\t\"     H           H=========----===----================        H  ==============\",\n    \t\t\t\"                 H                                        &   H                \",\n    \t\t\t\"                 H                                        |   H                \",\n    \t\t\t\"====---====      H                                        |   H                \",\n    \t\t\t\"|         |    ================---===---===================   H                \",\n    \t\t\t\"|   ===   |                                                   H        H    p  \",\n    \t\t\t\"|    $    |                                                   H     ===H=======\",\n    \t\t\t\"|*  $$$  *|   *                *       *                     *H       *H       \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Point of No Return\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 7,\n    \t\tlayout: [\n    \t\t\t\"         $                                                                     \",\n    \t\t\t\"         H                                                   V                 \",\n    \t\t\t\"         H                                                                     \",\n    \t\t\t\"         HHHHHHHHHHHHH     .HHHHHHHHHHHHHH                          H    p     \",\n    \t\t\t\"         &                   V           H                        ==H==========\",\n    \t\t\t\"                                         H                          H          \",\n    \t\t\t\"   H                                     H        .                 H          \",\n    \t\t\t\"===H==============-----------============H====                      H          \",\n    \t\t\t\"   H                                                      H         H          \",\n    \t\t\t\"   H                                                 =====H==============      \",\n    \t\t\t\"   H                                     H                H                    \",\n    \t\t\t\"   H              &..^^^.....^..^ . ^^   H==---------     H                    \",\n    \t\t\t\"   H         ============================H    &           H             H      \",\n    \t\t\t\"   H         ===      ===      ===       H    ---------=================H======\",\n    \t\t\t\"   H                                     H                              H      \",\n    \t\t\t\"   H                          &          H          &                   H      \",\n    \t\t\t\"   ==========-------------------------=======----------===================     \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"^^^*         ^^^^^^^^^^^^^^^^^^^^^^^^^*     *^^^^^^^^^^*Point of No Return*^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Bug City\",\n    \t\ttime: 37,\n    \t\tmaxRocks: 6,\n    \t\tlayout: [\n    \t\t\t\"        Bug City             HHHHHHHH                          V               \",\n    \t\t\t\"                           HHH      HHH                                        \",\n    \t\t\t\"   H                                          >mmmmmmmm                        \",\n    \t\t\t\"   H===============                   ====================          H          \",\n    \t\t\t\"   H              |=====       \\\\  /         V                  =====H==========\",\n    \t\t\t\"   H                            \\\\/                                  H          \",\n    \t\t\t\"   H                                        | $                     H          \",\n    \t\t\t\"   H           H                            | H                     H          \",\n    \t\t\t\"   H       ====H=======          p          |&H    H                H          \",\n    \t\t\t\"   H           H             ======================H           ======          \",\n    \t\t\t\"   H           H      &|                           H                    H      \",\n    \t\t\t\"   H           H      &|                    H      H     }{        =====H====  \",\n    \t\t\t\"===H===&       H       =====================H      H                    H      \",\n    \t\t\t\"               H                            H      H                    H      \",\n    \t\t\t\"               H                            H      &                    H      \",\n    \t\t\t\"         ======H===   =======    H    <>    &                           H      \",\n    \t\t\t\"                                 H==========       =====     =     ============\",\n    \t\t\t\"     }i{                         H                                             \",\n    \t\t\t\"*                                H                                            *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"GangLand\",\n    \t\ttime: 32,\n    \t\tmaxRocks: 6,\n    \t\tlayout: [\n    \t\t\t\"                    =Gang Land=                             V                  \",\n    \t\t\t\"                   ==      _  ==                                      .        \",\n    \t\t\t\"      p    H        |  [] |_| |                  &                    .  H     \",\n    \t\t\t\"===========H        |     |_| |       H         ===   ===================H     \",\n    \t\t\t\"      V    H        =============     H======                            H     \",\n    \t\t\t\"           H                          H                     &            H     \",\n    \t\t\t\"           H                          H                |    |            H     \",\n    \t\t\t\"    H      H        ^^^&&^^^ & ^  ^^^ H           H    |    =============H     \",\n    \t\t\t\"    H======H   =======================H===========H=====          &      H     \",\n    \t\t\t\"    H                                 H           H    |         &&&     H     \",\n    \t\t\t\"    H                                 H           H    |        &&&&&    H     \",\n    \t\t\t\"    H                                 H           H    |    =============H     \",\n    \t\t\t\"              =====------=================        H    |       $     $         \",\n    \t\t\t\"                                         |        H    |      $$$   $$$        \",\n    \t\t\t\"====------===                            |        H    |     $$$$$ $$$$$       \",\n    \t\t\t\"            |       =                    | =============    ============       \",\n    \t\t\t\"            |       $                     ^          &                         \",\n    \t\t\t\"            |^^^^^^^^^^^^^^      $ ^              ======                       \",\n    \t\t\t\"*                   .      &   ^ H*^                    ^  ^       ^^^^^^^^^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t}\n    ];\n\n    const Level = {\n        LEVELS: LevelData,\n        LEVEL_COUNT: LevelData.length,\n\n        load(levelNumber) {\n            console.log(Level.LEVELS);\n            // As the player keeps playing, level numbers will loop around to beginning\n            let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n            if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n            // Perform some sanity checks on the level layout and extract useful info\n            // like player start position and dispenser positions etc.\n\n            let layout = level.layout.map(row => row.split(''));\n            let dispensers = [];\n            let player;\n\n            // Sanity check\n            layout = layout.slice(0, LEVEL_ROWS);\n\n            for (let y = 0; y < LEVEL_ROWS; y++) {\n                // Sanity checks\n                if (!layout[y]) layout[y] = [];\n                layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n                for (let x = 0; x < LEVEL_COLS; x++) {\n                    // Sanity check\n                    if (!layout[y][x]) layout[y][x] = ' ';\n\n                    // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                    // to construct a list of them, but they are permanent parts of the layout, so we can\n                    // leave them as part of the level and draw them normally.\n\n                    if (layout[y][x] === 'V') {\n                        dispensers.push({ x, y });\n                    }\n\n                    // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                    // can pick up the treasures and statues. That's why for these elements, we add them to\n                    // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                    // top of the layout.\n\n                    if (layout[y][x] === 'p') {\n                        layout[y][x] = ' ';\n                        player = { x, y };\n                    }\n\n                    // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                    // layout. The Lad interacts with them, but we can handle that during our movement checks.\n                }\n            }\n\n            return {\n                name: level.name,\n                time: level.time,\n                maxRocks: level.maRrocks,\n                layout,\n                dispensers,\n                player\n            };\n        }\n    };\n\n    /**\n     * Field\n     *\n     * The \"field\" represents the current level, or, \"playing field\". A new playing field is created\n     * every time you start a level, so we attach everything about the currently played level to\n     * the field -- positions of treasure, the player, victory conditions, etc.\n     */\n    class Field {\n        constructor(levelNumber) {\n            let level = Level.load(levelNumber);\n\n            this.layout = level.layout;\n            this.dispensers = level.dispensers;\n            this.time = level.time;\n            this.maxRocks = level.rocks;\n            this.rocks = [];\n            this.player = new Player(level.player.x, level.player.y);\n        }\n\n        update(moveFrame) {\n            let oldX = this.player.x, oldY = this.player.y;\n\n            // Move player based on user input\n            this.player.update(this, moveFrame);\n\n            if (oldX !== this.player.x && oldY === this.player.y) {\n                if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                    this.layout[oldY + 1][oldX] = ' ';\n                }\n            }\n\n            // Check if player should be dead (before moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n            // Move rocks\n            for (let rock of this.rocks) rock.update(this, moveFrame);\n\n            // Check if player should be dead (after moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n            if (moveFrame) {\n                // Collect statues\n                if (this.isStatue(this.player.x, this.player.y)) {\n                    this.layout[this.player.y][this.player.x] = ' ';\n                    game.session.updateScore(SCORE_STATUE);\n                }\n\n                // Collect treasure (ends the current level)\n                if (this.isTreasure(this.player.x, this.player.y)) {\n                    game.session.startNextLevel();\n                }\n\n                // Interact with trampolines\n                if (this.isTrampoline(this.player.x, this.player.y)) {\n                    switch (Math.floor(Math.random() * 5)) {\n                        case 0:\n                            this.player.state = State.LEFT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 1:\n                            this.player.state = State.RIGHT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 2:\n                            this.player.state = State.JUMP_UP;\n                            this.player.nextState = undefined;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 3:\n                            this.player.state = State.JUMP_LEFT;\n                            this.player.nextState = State.LEFT;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 4:\n                            this.player.state = State.JUMP_RIGHT;\n                            this.player.nextState = State.RIGHT;\n                            this.player.jumpStep = 0;\n                            break;\n                    }\n                }\n\n                // Dispense new rocks\n                if (this.rocks.length < 3 && Math.random() > 0.9) {\n                    let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                    this.rocks.push(new Rock(dispenser));\n                }\n\n                // Kill dead rocks\n                this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n                // Kill player\n                if (this.player.state === State.DEAD) {\n                    game.session.restartLevel();\n                }\n            }\n        }\n\n        draw() {\n            // Draw layout\n            Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n            // Draw player\n            this.player.draw();\n\n            // Draw rocks\n            this.rocks.forEach(rock => rock.draw());\n        }\n\n        onSolid(x, y) {\n            return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n        }\n\n        emptySpace(x, y) {\n            if (x < 0 || x >= LEVEL_COLS) {\n                return false;\n            } else {\n                return !['|', '='].includes(this.layout[y][x]);\n            }\n        }\n\n        isLadder(x, y) {\n            return this.layout[y][x] === 'H';\n        }\n\n        isStatue(x, y) {\n            return this.layout[y][x] === '&';\n        }\n\n        isTreasure(x, y) {\n            return this.layout[y][x] === '$';\n        }\n\n        isTrampoline(x, y) {\n            return this.layout[y][x] === '.';\n        }\n\n        isEater(x, y) {\n            return this.layout[y][x] === '*';\n        }\n\n        isFire(x, y) {\n            return this.layout[y][x] === '^';\n        }\n\n        isDisappearingFloor(x, y) {\n            return this.layout[y][x] === '-';\n        }\n\n        canClimbUp(x, y) {\n            if (y < 0) return false;\n            return ['H', '&', '$'].includes(this.layout[y][x]);\n        }\n\n        canClimbDown(x, y) {\n            return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n        }\n\n        checkIfPlayerShouldDie() {\n            if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n            if (this.isFire(this.player.x, this.player.y)) {\n                this.player.state = State.DYING;\n            }\n\n            for (let i = 0; i < this.rocks.length; i++) {\n                if (this.player.x === this.rocks[i].x) {\n                    if (this.player.y === this.rocks[i].y) {\n                        this.player.state = State.DYING;\n                        this.rocks.splice(i, 1);\n                        break;\n                    } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                        game.session.updateScore(SCORE_ROCK);\n                    } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                        game.session.updateScore(SCORE_ROCK);\n                    }\n                }\n            }\n        }\n    }\n\n    class Session {\n        constructor() {\n            this.score = 0;\n            this.levelNumber = 0;\n            this.levelCycle = 1;\n            this.lives = 5;\n            this.nextLife = 100;\n        }\n\n        update() {\n            // The overall game loop runs at a fixed 60 frames per second, but the Play Speed selected\n            // at the main menu controls how fast the game runs. To accomplish that, we do a second\n            // time check here, and unless this is a \"move frame\", we skip all the logic related to\n            // moving entities.\n            //\n            // This setup allows us to have things like death animations look the same regardless of\n            // the Play Speed selected.\n            let moveFps = PLAY_SPEEDS[game.playSpeed];\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n            let moveFrame = false;\n\n            if (now - lastFrame >= 1000 / moveFps) {\n                moveFrame = true;\n                this.lastFrame = now;\n            }\n\n            if (!this.field) {\n                this.field = new Field(this.levelNumber);\n            }\n\n            this.field.update(moveFrame);\n\n            let recentKeystrokes = Input.buffer.map(event => event.key).join('').toUpperCase();\n\n            if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n                Input.consume();\n                this.field = undefined;\n                this.levelNumber = parseInt(RegExp.$1, 10);\n            } else if (recentKeystrokes.includes(\"IDDQD\")) {\n                Input.consume();\n                console.log(\"god mode\");\n            }\n        }\n\n        draw() {\n            Screen.clear();\n\n            if (this.field) this.field.draw();\n\n            let stat = [\n                String(this.lives).padStart(2, ' '),\n                String(this.levelNumber + 1).padStart(2, ' '),\n                String(this.score).padStart(4, '0'),\n                this.field ? String(this.field.time).padStart(4, ' ') : ''\n            ];\n            Screen.write(0, 21, `Lads   ${stat[0]}   Level   ${stat[1]}    Score   ${stat[2]}    Bonus time   ${stat[3]}`);\n        }\n\n        restartLevel() {\n            this.field = undefined;\n        }\n\n        startNextLevel() {\n            this.field = undefined;\n            this.levelNumber++;\n            if (this.levelNumber % Levels.LEVEL_COUNT === 0) {\n                this.levelCycle++;\n            }\n        }\n\n        updateScore(scoreType) {\n            switch (scoreType) {\n                case SCORE_ROCK:\n                    this.score += 2;\n                    break;\n                case SCORE_STATUE:\n                    this.score += this.field.time;\n                    break;\n                case SCORE_TREASURE:\n                    // Called repeatedly during the end-of-level event.\n                    this.score += 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Game state.\n     */\n    class Game {\n        init() {\n            Sprite.loadSpritesheet(async () => {\n                await Viewport.init();\n                await Screen.init();\n                await Sprite.init();\n                await Text.init();\n                await Input.init();\n                await Audio.init();\n\n                window.addEventListener('blur', () => this.pause());\n                window.addEventListener('focus', () => this.unpause());\n\n                this.start();\n            });\n        }\n\n        start() {\n            this.frame = 0;\n            this.playSpeed = 0;\n            this.menu = new MainMenu();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        }\n\n        onFrame() {\n            let fps = 60;\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n\n            // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n            // 60 times per second in most cases. However, it can be higher (the browser may\n            // respect the user's refresh settings, which could be 120Hz or higher for example).\n            //\n            // It's safest to have a check like we do here, where we explicitly limit the number\n            // of update calls to 60 times per second.\n            if (now - lastFrame >= 1000 / fps) {\n                this.update();\n                this.lastFrame = now;\n            }\n\n            Viewport.resize();\n            this.draw();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        }\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            Input.update();\n\n            /*game.camera.pos.x += 0.1;\n            game.camera.pos.y -= 0.1;*/\n\n            //if (Input.pressed[Input.Action.MENU]) {\n            //    this.paused ? this.unpause() : this.pause();\n            //}\n\n            if (this.paused) return;\n\n            // perform any per-frame audio updates\n            Audio.update();\n\n            // Behavior (AI, player input, etc.)\n            //perform(this.entities); <-- cut to save space\n\n            // perform any queued damage\n            //Damage.perform(this.entities);\n\n            // Movement (perform entity velocities to position)\n\n            // Dialog scheduling\n            //DialogScheduling.perform();\n\n            // Victory conditions\n\n            if (this.menu) {\n                this.menu.update();\n            }\n\n            /*    if (!this.session) {\n                this.session = new Session();\n            }*/\n\n            if (this.session) this.session.update();\n\n            // Culling (typically when an entity dies)\n\n            // Camera logic\n            /*let diff = {\n                x: this.player.pos.x - this.camera.pos.x,\n                y: this.player.pos.y - this.camera.pos.y\n            };*/\n\n            /*\n            this.camera.pos.x += diff.x * 0.2;\n            this.camera.pos.y += diff.y * 0.2;\n            */\n\n            // Tick screenshakes and cull finished screenshakes\n            this.screenshakes = this.screenshakes.filter(screenshake =>\n                screenshake.update()\n            );\n\n            // Flickering shadows\n            if (game.frame % 6 === 0) this.shadowOffset = (Math.random() * 10) | 0;\n\n            // Intro screenshake\n            if (game.frame === 30) game.screenshakes.push(new ScreenShake(20, 20, 20));\n        }\n\n        draw() {\n            // Reset canvas transform and scale\n            Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n            Viewport.ctx.fillStyle = 'black';\n            Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n            Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n            if (this.session) this.session.draw();\n            if (this.menu) this.menu.draw();\n\n            Screen.drawToViewport();\n\n            return;\n        }\n\n        pause() {\n            if (this.paused) return;\n            this.paused = true;\n            Audio.pause();\n        }\n\n        unpause() {\n            if (!this.paused) return;\n            this.paused = false;\n            Audio.unpause();\n        }\n\n        startSession() {\n            this.menu = undefined;\n            this.session = new Session();\n        }\n\n        showMainMenu() {\n            this.menu = new MainMenu();\n            this.session = undefined;\n        }\n\n        showInstructions() {\n            this.menu = new InstructionsMenu();\n            this.session = undefined;\n        }\n    }\n\n    const game = new Game();\n\n    /**\n     * Create and launch game.\n     */\n    game.init();\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","/**\n * Constants\n */\n\n// Spritesheet URI (produced during gulp build)\nexport const SPRITESHEET_URI = 'sprites.png';\n\n// The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n// may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\nexport const GAME_WIDTH = 640;\nexport const GAME_HEIGHT = 400;\n\n// The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n// pixels, we care about the ASCII display area (80x25).\nexport const SCREEN_WIDTH = 80;\nexport const SCREEN_HEIGHT = 25;\n\n// The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\nexport const CHAR_WIDTH = 8;\nexport const CHAR_HEIGHT = 16;\nexport const CHARSHEET_WIDTH = 16 * CHAR_WIDTH;\nexport const CHARSHEET_HEIGHT = 32 * CHAR_HEIGHT;\n\n// Fixed level size\nexport const LEVEL_ROWS = 20;\nexport const LEVEL_COLS = 79;\n\n// Play speeds, expressed as frames per second.\n//\n// According to the original, the play speeds had millisecond delays of:\n//   [100ms, 50ms, 25ms, 13ms, 7ms].\n//\n// This would mean the effective FPS was:\n//   [10, 20, 40, 76, 142].\n//\n// I think this is way too high, and might not be accurate (it doesn't count\n// time spent drawing the screen and running the game's logic, which might\n// be a significant number of milliseconds). From memory, each speed was about\n// 50% faster than the previous one, so that's what I've set here.\nexport const PLAY_SPEEDS = [10, 15, 23, 35, 50];\n\n// Score events (note, these are just identifiers for the types of score increases, not\n// actual score values).\nexport const SCORE_ROCK = 0\nexport const SCORE_STATUE = 1\nexport const SCORE_TREASURE = 2\n","'use strict';\n\nimport { GAME_WIDTH, GAME_HEIGHT } from './Constants';\n\n/**\n * Viewport\n *\n * Represents the game display (for us, a canvas).\n */\nexport const Viewport = {\n    init() {\n        Viewport.canvas = document.getElementById('canvas');\n        Viewport.ctx = Viewport.canvas.getContext('2d');\n        Viewport.resize(true);\n    },\n\n    // Resize the canvas to give us approximately our desired game display size.\n    //\n    // Rather than attempt to explain it, here's a concrete example:\n    //\n    //     we start with a desired game dimension:   480x270px\n    //          get the actual browser dimensions:  1309x468px\n    //          factor in the display's DPI ratio:  2618x936px\n    //         now calculate the horizontal scale:       5.45x\n    //                     and the vertical scale:       3.46x\n    //            our new offical game scaling is:        5.4x\n    //       and our official viewport dimensions:   484x173px\n    //\n    // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n    // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n    // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n    // UI elements the player cannot see!).\n    resize(force) {\n        let dpi = window.devicePixelRatio,\n            width = Viewport.canvas.clientWidth,\n            height = Viewport.canvas.clientHeight,\n            dpiWidth = width * dpi,\n            dpiHeight = height * dpi;\n\n        if (\n            force ||\n            Viewport.canvas.width !== dpiWidth ||\n            Viewport.canvas.height !== dpiHeight\n        ) {\n            Viewport.canvas.width = dpiWidth;\n            Viewport.canvas.height = dpiHeight;\n\n            Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n            Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n            Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n            Viewport.center = {\n                u: (Viewport.width / 2) | 0,\n                v: (Viewport.height / 2) | 0\n            };\n            Viewport.clientWidth = width;\n            Viewport.clientHeight = height;\n\n            // Note: smoothing flag gets reset on every resize by some browsers, which is why\n            // we do it here.\n            Viewport.ctx.imageSmoothingEnabled = false;\n        }\n\n        // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n        //Viewport.canvas.style.cursor = 'none';\n    },\n\n    fillViewportRect() {\n        Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n    }\n};\n","'use strict';\n\nimport { game } from './Game';\nimport { Viewport } from './Viewport';\n\nexport function qr2xy(pos) {\n    return {\n        x: pos.q * 13,\n        y: pos.q * 6 + pos.r * 12\n    };\n}\n\nexport function xy2qr(pos) {\n    let qrFraction = {\n        q: (pos.x / 13),\n        r: ((pos.y - pos.x * 6 / 13) / 12)\n    };\n    return qrRounded(qrFraction);\n}\n\nexport function xy2uv(pos) {\n    return {\n        u: pos.x + Viewport.center.u - game.camera.pos.x,\n        v: pos.y + Viewport.center.v - game.camera.pos.y\n    };\n}\n\nexport function uv2xy(pos) {\n    return {\n        x: pos.u - Viewport.center.u + game.camera.pos.x,\n        y: pos.v - Viewport.center.v + game.camera.pos.y\n    };\n}\n\nexport function qr2qrs(pos) {\n    return { q: pos.q, r: pos.r, s: -pos.q-pos.r };\n}\n\nexport function qrs2qr(pos) {\n    return { q: pos.q, r: pos.r };\n}\n\n// When you \"round\" a fractional hexagonal value to an integer one (usually to convert\n// a mouse click to a hex grid), you can't just `Math.floor()` like you can with standard\n// square tiles - you'll never get the behavior right on the angled sides of the hexagons.\n//\n// To get the behavior you want, you need to convert to cubed coordinates (q,r,s), then\n// individually round each one and eliminate the one furthest away from your original value.\nexport function qrRounded(pos) {\n    let qrsA = qr2qrs(pos),\n        qrsB = {\n            q: Math.round(qrsA.q),\n            r: Math.round(qrsA.r),\n            s: Math.round(qrsA.s)\n        },\n        diffQ = Math.abs(qrsA.q - qrsB.q),\n        diffR = Math.abs(qrsA.r - qrsB.r),\n        diffS = Math.abs(qrsA.s - qrsB.s);\n\n    if (diffQ > diffR && diffQ > diffS) {\n        qrsB.q = -qrsB.r-qrsB.s;\n    } else if (diffR > diffS) {\n        qrsB.r = -qrsB.q-qrsB.s;\n    } else {\n        qrsB.s = -qrsB.q-qrsB.r;\n    }\n\n    return qrs2qr(qrsB);\n}\n\nexport function clamp(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\n\nexport function flood(maze, pos, maxDistance = Infinity) {\n    let result = array2d(maze[0].length, maze.length, () => Infinity);\n    let stack = [{ ...pos, cost: 0 }];\n    while (stack.length > 0) {\n        let { q, r, cost } = stack.shift();\n        if (result[r][q] <= cost) continue;\n        result[r][q] = cost++;\n        if (result[r][q] >= maxDistance) continue;\n        if (maze[r][q + 1] && result[r][q + 1] > cost)\n            stack.push({ q: q + 1, r, cost });\n        if (maze[r][q - 1] && result[r][q - 1] > cost)\n            stack.push({ q: q - 1, r, cost });\n        if (maze[r + 1][q] && result[r + 1][q] > cost)\n            stack.push({ q, r: r + 1, cost });\n        if (maze[r - 1][q] && result[r - 1][q] > cost)\n            stack.push({ q, r: r - 1, cost });\n    }\n    return result;\n}\n\nexport function array2d(width, height, fn) {\n    return Array.from({ length: height }, () =>\n        Array.from({ length: width }, fn)\n    );\n}\n\nexport function tileIsPassable(q, r) {\n    if (game.brawl) {\n        let room = game.brawl.room;\n        if (\n            q < room.q ||\n            r < room.r ||\n            q >= room.q + room.w ||\n            r >= room.r + room.h\n        )\n            return false;\n    }\n    if (q < 0 || r < 0 || q >= game.maze.w || r >= game.maze.h) return false;\n    return !!game.maze.maze[r][q];\n}\n\nexport function rgba(r, g, b, a) {\n    return `rgba(${r},${g},${b},${a})`;\n}\n\nexport function createCanvas(width, height) {\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    let ctx = canvas.getContext('2d');\n    return { canvas, ctx };\n}\n\nexport function roomCenter(room) {\n    return {\n        x: (room.q + room.w / 2) * TILE_SIZE,\n        y: (room.r + room.h / 2) * TILE_SIZE\n    };\n}\n\nexport function partialText(text, t, d) {\n    let length = clamp(Math.ceil(t / d * text.length), 0, text.length),\n        substr = text.slice(0, length),\n        idx = text.indexOf(' ', length - 1);\n    if (idx < 0) idx = text.length;\n    if (idx - length > 0) substr += '#'.repeat(idx - length);\n\n    return substr;\n}\n","'use strict';\n\n/**\n * This module is generated by `gulp buildAssets`.\n */\nexport const SpriteSheet =\n    /* <generated> */\n{ font: [ [ 128, 0, 128, 448 ] ],\n  font2: [ [ 0, 0, 128, 512 ] ],\n  harold: [ [ 128, 448, 19, 12 ] ],\n  uri: 'sprites.png' }\n/* </generated> */\n","'use strict';\n\nimport { game } from './Game';\nimport { rgba, createCanvas } from './Util';\nimport { SpriteSheet } from './SpriteSheet-gen';\nimport { Viewport } from './Viewport';\n\n/**\n * Sprite\n *\n * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n * modifying them or constructing using primitives. To save space, we use some techniques\n * like storing only a small slice of an image in the spritesheet, then using code\n * to duplicate it, add some randomness, etc.\n */\nexport const Sprite = {\n    // This is an exception to the rule, loading the spritesheet is a special action that\n    // happens BEFORE everything is initialized.\n    loadSpritesheet(cb) {\n        let image = new Image();\n        image.onload = cb;\n        image.src = SpriteSheet.uri;\n        Sprite.sheet = image;\n    },\n\n    init() {\n        // Base pixel font and icons (see `Text.init` for additional variations)\n        Sprite.font = initBasicSprite(SpriteSheet.font2[0]);\n\n        return;\n    },\n\n    /**\n     * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n     * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n     * that's appropriate!\n     */\n    drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n    },\n\n    drawViewportSprite(sprite, pos, rotation) {\n        let { u, v } = this.viewportSprite2uv(\n            sprite,\n            pos\n        );\n        if (rotation) {\n            Viewport.ctx.save();\n            Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n            Viewport.ctx.rotate(rotation);\n            Viewport.ctx.drawImage(\n                sprite.img,\n                -sprite.anchor.x,\n                -sprite.anchor.y\n            );\n            Viewport.ctx.restore();\n        } else {\n            Viewport.ctx.drawImage(sprite.img, u, v);\n        }\n    },\n\n    viewportSprite2uv(sprite, pos) {\n        return {\n            u: pos.x - sprite.anchor.x - game.camera.pos.x + Viewport.center.u,\n            v: pos.y - sprite.anchor.y - game.camera.pos.y + Viewport.center.v\n        };\n    }\n};\n\n// Sprite utility functions\n\nfunction initBasicSprite(data, anchor) {\n    return initDynamicSprite(loadCacheSlice(...data), anchor);\n}\n\nfunction initDynamicSprite(source, anchor) {\n    let w = source.width,\n        h = source.height;\n\n    return {\n        img: source,\n        // Hack! Using a flat `.map(initBasicSprite)` is actually going to pass the\n        // element INDEX as second argument, resulting in \"anchor=1\". The right solution\n        // here is \"typeof anchor === 'object' ?\", but to save bytes I avoid using\n        // the typeof and instanceof keywords anywhere in the codebase. Hence,\n        // \"anchor && anchor.x\".\n        anchor: (anchor && anchor.x) ? anchor : { x: (w / 2) | 0, y: (h / 2) | 0 }\n    };\n}\n\nfunction loadCacheSlice(x, y, w, h) {\n    const source = Sprite.sheet;\n    const sliceCanvas = createCanvas(w, h);\n    sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n    return sliceCanvas.canvas;\n}\n","\n// A list of in-game actions that can be performed by the player\nconst Action = {\n    UP:    11,\n    DOWN:  12,\n    LEFT:  13,\n    RIGHT: 14,\n    JUMP:  15,\n    STOP:  16,\n    PAUSE: 17\n};\n\n// A list of key code mappings and what action they perform. Here we hard-code it, but\n// you could easily also have the key mappings controlled by settings and let the user\n// configure it.\nconst KeyMapping = {\n    KeyW:       Action.UP,\n    KeyS:       Action.DOWN,\n    KeyA:       Action.LEFT,\n    KeyD:       Action.RIGHT,\n    ArrowUp:    Action.UP,\n    ArrowDown:  Action.DOWN,\n    ArrowLeft:  Action.LEFT,\n    ArrowRight: Action.RIGHT,\n    Space:      Action.JUMP\n};\n\nexport const Input = {\n    Action,\n    KeyMapping,\n\n    init() {\n        // Input buffer - new keypress events go into this buffer to be handled\n        // during the game's update loop. It's up to the `update()` methods to consume\n        // key presses and remove them from the buffer.\n        this.buffer = [];\n\n        // Input history - history contains recent key press events in order,\n        // removed automatically after a few seconds. This is useful for detecting\n        // inputs like cheat codes, for example.\n        this.history = [];\n\n        window.addEventListener('keydown', event => {\n            let entry = {\n                at: new Date().getTime(),\n                key: event.key,\n                code: event.code,\n                action: Input.KeyMapping[event.code] || Input.Action.STOP\n            };\n            Input.buffer.push(entry);\n            Input.history.push(entry);\n            console.log(entry);\n        });\n    },\n\n    update() {\n        let now = new Date().getTime();\n        this.history = this.history.filter(entry => entry.at > now - 3000);\n    },\n\n    lastKeyPressed() {\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n    },\n\n    lastCodePressed() {\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].code : '';\n    },\n\n    lastActionPressed() {\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n    },\n\n    consume() {\n        this.buffer = [];\n    },\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { rgba, createCanvas } from './Util';\nimport { CHAR_WIDTH, CHAR_HEIGHT, CHARSHEET_WIDTH } from './Constants';\nimport { Viewport } from './Viewport';\n\n\n// In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n// characters are convenient for us. Here we can choose to map unicode characters to positions\n// 0x80+ in the charsheet, making it easy for us to render things like special characters,\n// box drawing characters, etc.\nconst SUPPORTED_UNICODE_CHARS = [\n    '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n    '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n    '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n].join('');\n\nconst UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n    map[char] = 0x80 + idx;\n    return map;\n}, {});\n\n/**\n * Text\n *\n * Utilities for drawing text using in-game pixel font.\n */\nexport const Text = {\n    init() {\n        Text.white = Sprite.font.img;\n\n        Text.black = recolor(Text.white, rgba(0, 0, 0, 1));\n        Text.black_shadow = recolor(Text.white, rgba(90, 20, 90, 0.15));\n        Text.blue = recolor(Text.white, rgba(200, 40, 220, 1));\n        Text.blue_shadow = recolor(Text.white, rgba(240, 50, 200, 0.2));\n        Text.shadow = recolor(Text.white, rgba(240, 240, 255, 0.25));\n        Text.red = recolor(Text.white, rgba(240, 50, 50, 1));\n\n        Text.terminal = recolor(Text.white, rgba(51, 255, 0, 1));\n        Text.terminal_shadow = recolor(Text.white, rgba(255, 255, 255, 0.3));\n\n        Text.terminal = recolor(Text.white, rgba(51, 255, 0, 0.9));\n        Text.terminal_shadow = undefined;\n\n        Text['#ead4aa'] = recolor(Text.white, '#ead4aa');\n        Text['#fee761'] = recolor(Text.white, '#fee761');\n        Text['#ff0044'] = recolor(Text.white, '#ff0044');\n    },\n\n    drawText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n        if (Array.isArray(text)) {\n            for (let block of text) {\n                Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, scale, font, shadow);\n            }\n            return;\n        }\n\n        for (let idx = 0; idx < text.length; idx++) {\n            let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n            let k = (c - 0) * (CHAR_WIDTH);\n            if (shadow) {\n                ctx.drawImage(\n                    shadow,\n                    k % CHARSHEET_WIDTH,\n                    Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    u + 1,\n                    v,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n            }\n            ctx.drawImage(\n                font,\n                k % CHARSHEET_WIDTH,\n                Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                u,\n                v,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            u += CHAR_WIDTH * scale;\n        }\n    },\n\n    /*\n    drawRightText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n        u -= Text.measureWidth(text, scale);\n        Text.drawText(ctx, text, u, v, scale, font, shadow);\n    },\n    */\n\n    measureWidth(text, scale = 1) {\n        return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n    },\n\n    splitParagraph(text, w, h) {\n        let cu = 0, cv = 0;\n        let next = () => ({ text: '', u: cu, v: cv });\n        let wip = next();\n        let list = [];\n\n        for (let c of text.split('')) {\n            let cWidth = Text.measureWidth(c, 1);\n            if (c === '\\n' || cu + cWidth > w) {\n                let saved = '';\n                if (c !== '\\n' && c !== ' ') {\n                    let space = wip.text.split(' ');\n                    if (space.length > 1) {\n                        saved = space.pop();\n                        wip.text = space.join(' ');\n                    }\n                }\n                if (wip.text.length > 0) list.push(wip);\n                cu = 0;\n                cv += (CHAR_HEIGHT);\n                wip = next();\n                if (saved.length > 0) {\n                    wip.text = saved;\n                    cu += Text.measureWidth(wip.text, 1);\n                }\n            } else {\n                cu += cWidth;\n            }\n            if (c !== '\\n') {\n                wip.text = wip.text + c;\n            }\n        }\n\n        if (wip.text.length > 0) list.push(wip);\n\n        return list.map(line => ({\n            ...line,\n            w: Text.measureWidth(line.text, 1),\n            h: CHAR_HEIGHT\n        }));\n    },\n\n    drawTextColRow(text, col, row) {\n        Text.drawText(Viewport.ctx, Text.splitParagraph(text, Viewport.width), col * CHAR_WIDTH, row * CHAR_HEIGHT, 1, Text.terminal, Text.terminal_shadow);\n    }\n};\n\n// Text utility functions\n\nfunction recolor(font, color) {\n    let canvas = createCanvas(font.width, font.height);\n    canvas.ctx.fillStyle = color;\n    canvas.ctx.fillRect(0, 0, font.width, font.height);\n    canvas.ctx.globalCompositeOperation = 'destination-in';\n    canvas.ctx.drawImage(font, 0, 0);\n    return canvas.canvas;\n}\n","// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nexport const zzfx=(...t)=>zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nexport const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e}\n\n// zzfxG() - the sound generator -- returns an array of sample data\nexport const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z}\n\n// zzfxV - global volume\nexport const zzfxV=.3\n\n// zzfxR - global sample rate\nexport const zzfxR=44100\n\n// zzfxX - the common audio context\nexport const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n// destination for zzfx and zzfxm sounds\nzzfx.destination_ = zzfxX.destination;\n","'use strict';\n\nimport { zzfxG, zzfxR } from './zzfx';\n\n/**\n * ZzFX Music Renderer v2.0.2 by Keith Clark\n */\n\n/**\n * @typedef Channel\n * @type {Array.<Number>}\n * @property {Number} 0 - Channel instrument\n * @property {Number} 1 - Channel panning (-1 to +1)\n * @property {Number} 2 - Note\n */\n\n/**\n * @typedef Pattern\n * @type {Array.<Channel>}\n */\n\n/**\n * @typedef Instrument\n * @type {Array.<Number>} ZzFX sound parameters\n */\n\n/**\n * Generate a song\n *\n * @param {Array.<Instrument>} instruments - Array of ZzFX sound paramaters.\n * @param {Array.<Pattern>} patterns - Array of pattern data.\n * @param {Array.<Number>} sequence - Array of pattern indexes.\n * @param {Number} [speed=125] - Playback speed of the song (in BPM).\n * @returns {Array.<Array.<Number>>} Left and right channel sample data.\n */\n\nexport const zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n    let instrumentParameters,\n        i,\n        j,\n        k,\n        note,\n        sample,\n        patternChannel,\n        notFirstBeat,\n        stop,\n        instrument,\n        pitch,\n        attenuation,\n        outSampleOffset,\n        sampleOffset,\n        nextSampleOffset,\n        sampleBuffer = [],\n        leftChannelBuffer = [],\n        rightChannelBuffer = [],\n        channelIndex = 0,\n        panning,\n        hasMore = 1,\n        sampleCache = {},\n        beatLength = ((zzfxR / BPM) * 60) >> 2;\n\n    // for each channel in order until there are no more\n    for (; hasMore; channelIndex++) {\n        // reset current values\n        sampleBuffer = [(hasMore = notFirstBeat = pitch = outSampleOffset = 0)];\n\n        // for each pattern in sequence\n        sequence.map((patternIndex, sequenceIndex) => {\n            // get pattern for current channel, use empty 1 note pattern if none found\n            patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n            // check if there are more channels\n            hasMore |= !!patterns[patternIndex][channelIndex];\n\n            // get next offset, use the length of first channel\n            nextSampleOffset =\n                outSampleOffset +\n                (patterns[patternIndex][0].length - 2 - !notFirstBeat) *\n                    beatLength;\n\n            // for each beat in pattern, plus one extra if end of sequence\n            for (\n                i = 2, k = outSampleOffset;\n                i <\n                patternChannel.length + (sequenceIndex == sequence.length - 1);\n                notFirstBeat = ++i\n            ) {\n                // <channel-note>\n                note = patternChannel[i];\n\n                // stop if different instrument or new note\n                stop = (instrument != (patternChannel[0] || 0)) | note | 0;\n\n                // fill buffer with samples for previous beat, most cpu intensive part\n                for (\n                    j = 0;\n                    j < beatLength && notFirstBeat;\n                    // fade off attenuation at end of beat if stopping note, prevents clicking\n                    j++ > beatLength - 99 && stop\n                        ? (attenuation += (attenuation < 1) / 99)\n                        : 0\n                ) {\n                    // copy sample to stereo buffers with panning\n                    sample =\n                        ((1 - attenuation) * sampleBuffer[sampleOffset++]) /\n                            2 || 0;\n                    leftChannelBuffer[k] =\n                        (leftChannelBuffer[k] || 0) + sample * panning - sample;\n                    rightChannelBuffer[k] =\n                        (rightChannelBuffer[k++] || 0) +\n                        sample * panning +\n                        sample;\n                }\n\n                // set up for next note\n                if (note) {\n                    // set attenuation\n                    attenuation = note % 1;\n                    panning = patternChannel[1] || 0;\n                    if ((note |= 0)) {\n                        // get cached sample\n                        sampleBuffer = sampleCache[\n                            [\n                                (instrument =\n                                    patternChannel[(sampleOffset = 0)] || 0),\n                                note\n                            ]\n                        ] =\n                            sampleCache[[instrument, note]] ||\n                            // add sample to cache\n                            ((instrumentParameters = [\n                                ...instruments[instrument]\n                            ]),\n                            (instrumentParameters[2] *=\n                                2 ** ((note - 12) / 12)),\n                            zzfxG(...instrumentParameters));\n                    }\n                }\n            }\n\n            // update the sample offset\n            outSampleOffset = nextSampleOffset;\n        });\n    }\n\n    return [leftChannelBuffer, rightChannelBuffer];\n};\n","export const ObliqueMystique = [[[1.3,0,23,,,.2,3,5],[1.5,0,4e3,,,.03,2,1.25,,,,,.02,6.8,-.3,,.5],[.7,0,2100,,,.2,3,3,,,-400,,,2],[,0,655,,,.11,2,1.65,,,,,,3.8,-.1,.1]],[[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,],[,.6,,,,,13,,18,,19,,,,,,,,19,,18,,,,16,,,,13,,,,,,,,,,13,,18,,19,,,,,,,,18,19,18,,,,13,14,13,,16,,18,,19,,],[3,-1,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,13,13,13,13]],[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,]]],[1,1,0,0,0,0,1,0],,]\n","'use strict';\n\nimport { zzfx, zzfxP, zzfxX } from './lib/zzfx';\nimport { zzfxM } from './lib/zzfxm';\nimport { ObliqueMystique } from './songs/ObliqueMystique';\n\nexport const Audio = {\n    init() {\n        Audio.readyToPlay = false;\n\n        Audio.ctx = zzfxX;\n        Audio.gain_ = Audio.ctx.createGain();\n        Audio.gain_.connect(Audio.ctx.destination);\n        zzfx.destination_ = Audio.gain_;\n\n        Audio.shotgun = [,0.01,140,0.01,0.02,0.45,4,2.42,0.1,-0.1,,,,1.2,,0.3,0.04,0.8,0.02];\n        Audio.page = [,,1233,,.01,.2,1,1.43,,,539,.1,,,,,,.51,.03,.01];\n        Audio.shellReload = [,,68,0.01,,0.14,1,1.53,7.5,0.1,50,0.02,-0.01,-0.2,0.1,0.2,,0.47,0.01];\n        Audio.damage = [,,391,,.19,.01,2,.54,-4,20,,,,,,,.02,.9];\n        Audio.alarm = [,,970,.12,.25,.35,,.39,8.1,,10,.1,.2,,.1,,,.6,.09,.13];\n        // [,,961,.05,.06,1.17,1,4.67,.8,,,,,.8,-0.8,.1,.49,.62,.09];\n        Audio.victory = [,,454,.06,.86,.71,2,.63,-0.7,1.7,-83,.09,.27,.3,.2,,.18,.95,.02,.02];\n        Audio.song = zzfxM(...ObliqueMystique);\n\n        // Save our background music in os13k, for fun!\n        //localStorage[`OS13kMusic,${TITLE} - Oblique Mystique`] = JSON.stringify(ObliqueMystique);\n    },\n\n    update() {\n        if (!Audio.readyToPlay) return;\n\n        if (!Audio.musicPlaying) {\n            //Audio.bgmusicnode = zzfxP(...Audio.song);\n            //Audio.bgmusicnode.loop = true;\n            Audio.musicPlaying = true;\n        }\n    },\n\n    play(sound) {\n        if (!Audio.readyToPlay) return;\n        zzfx(...sound);\n    },\n\n    // It's important we do pausing and unpausing as specific events and not in general update(),\n    // because update() is triggered by the animation frame trigger which does not run if the\n    // page is not visible. (So, if you want the music to fade in the background, for example,\n    // that's not helpful if it won't work because you aren't looking at the page!)\n\n    pause() {\n        Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n    },\n\n    unpause() {\n        Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n    }\n};\n","// https://jonny.morrill.me/en/blog/gamedev-how-to-implement-a-camera-shake-effect/\n\n/**\n * Shake it baby.\n */\nexport class ScreenShake {\n    constructor(frames, hAmplitude, vAmplitude) {\n        this.frames = frames;\n        this.hAmplitude = hAmplitude;\n        this.vAmplitude = vAmplitude;\n        this.hSamples = [];\n        this.vSamples = [];\n\n        var sampleCount = frames / 2;\n        for (let i = 0; i < sampleCount; i++) {\n            this.hSamples.push(Math.random() * 2 - 1);\n            this.vSamples.push(Math.random() * 2 - 1);\n        }\n        this.frame = -1;\n    }\n\n    update() {\n        this.frame++;\n        if (this.frame >= this.frames) {\n            return false;\n        }\n\n        //let s = (this.frames / 10) * (this.frame / this.frames);\n        let s = this.frame / 2;\n        let s0 = s | 0;\n        let s1 = s0 + 1;\n        let decay = 1 - this.frame / this.frames;\n\n        this.x =\n            this.hAmplitude *\n            decay *\n            (this.hSamples[s0] +\n                (s - s0) * (this.hSamples[s1] - this.hSamples[s0]));\n        this.y =\n            this.vAmplitude *\n            decay *\n            (this.vSamples[s0] +\n                (s - s0) * (this.vSamples[s1] - this.vSamples[s0]));\n\n        return true;\n    }\n}\n","import { SCREEN_WIDTH, SCREEN_HEIGHT } from './Constants';\nimport { Viewport } from './Viewport';\nimport { Text } from './Text';\n\nexport const Screen = {\n    init() {\n        this.screen = [];\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            this.screen.push([]);\n        }\n        this.clear();\n    },\n\n    clear() {\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            for (let x = 0; x < SCREEN_WIDTH; x++) {\n                this.screen[y][x] = ' ';\n            }\n        }\n    },\n\n    write(x, y, text) {\n        if (!Array.isArray(text)) text = [text];\n\n        for (let j = 0; j < text.length; j++) {\n            for (let i = 0; i < text[j].length; i++) {\n                this.screen[y + j][x + i] = text[j][i];\n            }\n        }\n    },\n\n    drawToViewport() {\n        let text = this.screen.map(row => row.join('')).join('\\n');\n\n        Text.drawText(\n            Viewport.ctx,\n            Text.splitParagraph(text, Viewport.width),\n            0, 0,\n            1,\n            Text.terminal, Text.terminal_shadow\n        );\n    }\n};\n","import { Screen } from './Screen';\nimport { game } from './Game';\nimport { PLAY_SPEEDS } from './Constants';\nimport { Input } from './Input';\n\nexport class MainMenu {\n    constructor() {\n    }\n\n    update() {\n        switch (Input.lastKeyPressed().toUpperCase()) {\n            case 'P':\n                Input.consume();\n                game.startSession();\n                break;\n            case 'L':\n                Input.consume();\n                game.playSpeed = (game.playSpeed + 1) % PLAY_SPEEDS.length;\n                break;\n            case 'I':\n                Input.consume();\n                game.showInstructions();\n                break;\n            case 'E':\n                Input.consume();\n                game.showInstructions();\n                break;\n        }\n    }\n\n    draw() {\n        let version = '?';\n        let terminal = '?';\n\n        let highScores = [\n            `1) 6000  Bob`,\n            `2) 6000  Tom`,\n            `3) 4000  Wayne`,\n            ``,\n            ``\n        ];\n\n        Screen.clear();\n        Screen.write(0, 0, [\n            `               LL                     dd       dd`,\n            `               LL                     dd       dd                      tm`,\n            `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n            `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n            ``,\n            `                                       Version:    ${version}`,\n            `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n            `10970 Ashton Ave.  Suite 312           Play speed: ${game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n            `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n            `                                       Stop = Other`,\n            ``,\n            `P = Play game                          High Scores`,\n            `L = Change level of difficulty         ${highScores[0]}`,\n            `C = Configure Ladder                   ${highScores[1]}`,\n            `I = Instructions                       ${highScores[2]}`,\n            `E = Exit Ladder                        ${highScores[3]}`,\n            `                                       ${highScores[4]}`,\n            ``,\n            `Enter one of the above:`\n        ]);\n    }\n}\n","import { Screen } from './Screen';\nimport { game } from './Game';\nimport { Input } from './Input';\n\nexport class InstructionsMenu {\n    constructor() {\n    }\n\n    update() {\n        if (Input.lastKeyPressed().toUpperCase() !== '') {\n            Input.consume();\n            game.showMainMenu();\n        }\n    }\n\n    draw() {\n        Screen.clear();\n        Screen.write(0, 0, [\n            `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n            `dark corridors never before seen by human eyes and find hidden`,\n            `treasures and riches.`,\n            ``,\n            `You control Lad by typing the direction buttons and jumping by`,\n            `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n            `You must find and grasp the treasures (shown as $) BEFORE the`,\n            `bonus time runs out.`,\n            ``,\n            `A new Lad will be awarded for every 10,000 points.`,\n            `Extra points are awarded for touching the gold`,\n            `statues (shown as &).  You will receive the bonus time points`,\n            `that are left when you have finished the level.`,\n            ``,\n            `Type an ESCape to pause the game.`,\n            ``,\n            `Remember, there is more than one way to skin a cat. (Chum)`,\n            ``,\n            `Good luck Lad.`,\n            ``,\n            ``,\n            ``,\n            `Type RETURN to return to main menu:`\n        ]);\n    }\n}\n","\n// This is our list of STATES. Each entity starts out in one of these states and can move between\n// them based on events that happen in the game. (Note that some of these are directions, but\n// since an entity keeps moving in the direction it is going unless stopped, directions are\n// states in this game.)\nexport const State = {\n    STOPPED:    1,         // Standing still\n    UP:         2,         // Moving up (player only)\n    LEFT:       3,         // Moving left\n    DOWN:       4,         // Moving down\n    RIGHT:      5,         // Moving right\n    FALLING:    6,         // Falling\n    START_JUMP: 7,         // About to start a jump (player only)\n    JUMP_LEFT:  8,         // Jumping left (player only)\n    JUMP_RIGHT: 9,         // Jumping right (player only)\n    JUMP_UP:    10,        // Jumping straight up (player only)\n    DYING:      11,        // Dying (used as a death animation)\n    DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n};\n\nexport const JUMP_FRAMES = {\n    [State.JUMP_RIGHT]: [\n        { x: 1, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 0 },\n        { x: 1, y: 0 },\n        { x: 1, y: 1 },\n        { x: 1, y: 1 }\n    ],\n    [State.JUMP_LEFT]: [\n        { x: -1, y: -1 },\n        { x: -1, y: -1 },\n        { x: -1, y: 0 },\n        { x: -1, y: 0 },\n        { x: -1, y: 1 },\n        { x: -1, y: 1 }\n    ],\n    [State.JUMP_UP]: [\n        { x: 0, y: -1 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 },\n        { x: 0, y: 1 },\n        { x: 0, y: 1 },\n        { x: 0, y: 0 }\n    ],\n};\n","import { State, JUMP_FRAMES } from './Behavior';\nimport { LEVEL_COLS } from './Constants';\n\nexport class Entity {\n    applyMovement(field) {\n        let repeat = false;\n\n        // This method contains generic \"movement\" application for all entities, including\n        // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n        // work the same for both.\n        //\n        // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n        // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n        if (this.nextState) {\n            switch (this.state) {\n                case State.STOPPED:\n                case State.LEFT:\n                case State.RIGHT:\n                    if ([State.LEFT, State.RIGHT, State.STOPPED].includes(this.nextState)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    }\n                    break;\n\n                case State.UP:\n                case State.DOWN:\n                    // Normal\n                    if ([State.LEFT, State.RIGHT].includes(this.nextState)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    }\n                    break;\n            }\n        }\n\n        if (this.nextState === State.START_JUMP) {\n            // Special case: the user wants to jump!\n            //\n            // If the player is standing on something solid, we initiate a jump based on the current\n            // movement of the player. If not, we (sort of) ignore the request to jump... although\n            // it does subtly change the behavior upon landing.\n            if (field.onSolid(this.x, this.y)) {\n                if (this.state === State.STOPPED || this.state === State.FALLING) {\n                    this.state = State.JUMP_UP;\n                    this.jumpStep = 0;\n                    this.nextState = State.STOPPED;\n                } else if (this.state === State.LEFT || this.state === State.JUMP_LEFT) {\n                    this.state = State.JUMP_LEFT;\n                    this.jumpStep = 0;\n                    this.nextState = State.LEFT;\n                } else if (this.state === State.RIGHT || this.state === State.JUMP_RIGHT) {\n                    this.state = State.JUMP_RIGHT;\n                    this.jumpStep = 0;\n                    this.nextState = State.RIGHT;\n                }\n            } else {\n                if (this.state === State.JUMP_UP || this.state === State.FALLING) {\n                    this.nextState = State.STOPPED;\n                } else if (this.state === State.JUMP_RIGHT) {\n                    this.nextState = State.RIGHT;\n                } else if (this.state === State.JUMP_LEFT) {\n                    this.nextState = State.LEFT;\n                }\n            }\n        } else if (this.nextState === State.UP && field.isLadder(this.x, this.y)) {\n            // Special case: the user wants to go up!\n            //\n            // If the user is on a ladder, we can start ascending. Note that if the user is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap UP a little before reaching the ladder.\n            this.state = State.UP;\n            this.nextState = undefined;\n        } else if (this.nextState === State.DOWN && (field.isLadder(this.x, this.y) || field.isLadder(this.x, this.y + 1))) {\n            // Special case: the player wants to go down!\n            //\n            // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n            this.state = State.DOWN;\n            this.nextState = undefined;\n        }\n\n        switch (this.state) {\n            case State.LEFT:\n                if (!field.onSolid(this.x, this.y)) {\n                    this.nextState = State.LEFT;\n                    this.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(this.x - 1, this.y)) {\n                    this.x--;\n                } else {\n                    this.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.RIGHT:\n                if (!field.onSolid(this.x, this.y)) {\n                    this.nextState = State.RIGHT;\n                    this.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(this.x + 1, this.y)) {\n                    this.x++;\n                } else {\n                    this.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.UP:\n                if (field.canClimbUp(this.x, this.y - 1)) {\n                    this.y--;\n                } else {\n                    this.state = State.STOPPED;\n                }\n                break;\n\n            case State.DOWN:\n                if (field.canClimbDown(this.x, this.y + 1)) {\n                    this.y++;\n                } else {\n                    this.state = State.STOPPED;\n                }\n                break;\n\n            case State.JUMP_RIGHT:\n            case State.JUMP_LEFT:\n            case State.JUMP_UP:\n                let step = JUMP_FRAMES[this.state][this.jumpStep];\n                console.log(['jump', this.state, this.jumpStep, step]);\n                if ((this.x + step.x >= 0) && (this.x + step.x < LEVEL_COLS)) {\n                    let terrain = field.layout[this.y + step.y][this.x + step.x];\n                    if (['=', '|', '-'].includes(terrain)) {\n                        if (field.onSolid(this.x, this.y)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        } else {\n                            switch (this.state) {\n                                case State.JUMP_RIGHT:\n                                    this.nextState = State.RIGHT;\n                                    break;\n                                case State.JUMP_LEFT:\n                                    this.nextState = State.LEFT;\n                                    break;\n                                case State.JUMP_UP:\n                                    this.nextState = State.UP;\n                                    break;\n                            }\n                            this.state = State.FALLING;\n                        }\n                    } else if (terrain === 'H') {\n                        this.x += step.x;\n                        this.y += step.y;\n                        this.state = State.STOPPED;\n                        this.nextState = undefined;\n                    } else {\n                        this.x += step.x;\n                        this.y += step.y;\n                        this.jumpStep++;\n\n                        if (this.jumpStep >= JUMP_FRAMES[this.state].length) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                    }\n                } else {\n                    if (field.onSolid(this.x, this.y)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    } else {\n                        this.state = State.FALLING;\n                        this.nextState = State.STOPPED;\n                    }\n                }\n                break;\n\n            case State.FALLING:\n                if (field.onSolid(this.x, this.y)) {\n                    this.state = this.nextState || State.STOPPED;\n                } else {\n                    this.y++;\n                }\n                break;\n        }\n\n        // If we were attempting to move somewhere and realized we should be falling instead,\n        // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n        // frame\" from the user's point of view.\n        if (repeat) return this.applyMovement(field);\n    }\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { State, JUMP_FRAMES } from './Behavior';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport { Entity } from './Entity';\nimport { Screen } from './Screen';\nimport { game } from './Game';\n\nconst DEATH_FRAMES = ['p', 'p', 'b', 'd', 'd', 'q', 'p', 'p', 'b', 'd', 'd', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n/**\n * Player\n */\nexport class Player extends Entity {\n    constructor(x, y) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.state = State.STOPPED;\n        this.nextState = State.STOPPED;\n        this.jumpStep = 0;\n        this.deathStep = 0;\n        console.log('player constructed', x, y);\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        let action = Input.lastActionPressed();\n\n        if (action === Input.Action.LEFT) {\n            this.nextState = State.LEFT;\n            Input.consume();\n        } else if (action === Input.Action.RIGHT) {\n            this.nextState = State.RIGHT;\n            Input.consume();\n        } else if (action === Input.Action.UP) {\n            this.nextState = State.UP;\n            Input.consume();\n        } else if (action === Input.Action.DOWN) {\n            this.nextState = State.DOWN;\n            Input.consume();\n        } else if (action === Input.Action.JUMP) {\n            this.nextState = State.START_JUMP;\n            Input.consume();\n        }\n\n        return this.applyMovement(field);\n    }\n\n    draw() {\n        let char = 'g';\n\n        switch (this.state) {\n            case State.RIGHT:\n            case State.JUMP_RIGHT:\n            case State.UP:\n            case State.DOWN:\n                char = 'p';\n                break;\n\n            case State.LEFT:\n            case State.JUMP_LEFT:\n                char = 'q';\n                break;\n\n            case State.FALLING:\n                char = 'b';\n                break;\n\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n\n            case State.DEAD:\n                char = '_';\n                break;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n}\n","import { Text } from './Text';\nimport { State } from './Behavior';\nimport { LEVEL_COLS } from './Constants';\nimport { Entity } from './Entity';\nimport { Screen } from './Screen';\nimport { game } from './Game';\n\nconst DEATH_FRAMES = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\nexport class Rock extends Entity {\n    constructor(dispenser) {\n        super();\n        this.x = dispenser.x;\n        this.y = dispenser.y;\n        this.state = State.FALLING;\n        this.nextState = undefined;\n        this.deathStep = 0;\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        if (this.state === State.STOPPED) {\n            if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                this.nextState = State.RIGHT;\n            } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                this.nextState = State.LEFT;\n            } else {\n                this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n            }\n        }\n\n        if (this.x === 0 && this.state === State.LEFT) {\n            this.state = State.RIGHT;\n        }\n\n        if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n            this.state = State.LEFT;\n        }\n\n        if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n            this.nextState = State.FALLING;\n        }\n\n        if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n            let r = Math.floor(Math.random() * 4);\n            this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n        }\n\n        if (field.isEater(this.x, this.y)) {\n            this.state = State.DYING;\n            return;\n        }\n\n        this.applyMovement(field);\n    }\n\n    draw() {\n        let char = 'o';\n\n        switch (this.state) {\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n            case State.DEAD:\n                return;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n}\n","import { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport LevelData from '../levels/levels.json';\n\nexport const Level = {\n    LEVELS: LevelData,\n    LEVEL_COUNT: LevelData.length,\n\n    load(levelNumber) {\n        console.log(Level.LEVELS);\n        // As the player keeps playing, level numbers will loop around to beginning\n        let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n        if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n        // Perform some sanity checks on the level layout and extract useful info\n        // like player start position and dispenser positions etc.\n\n        let layout = level.layout.map(row => row.split(''));\n        let dispensers = [];\n        let player;\n\n        // Sanity check\n        layout = layout.slice(0, LEVEL_ROWS);\n\n        for (let y = 0; y < LEVEL_ROWS; y++) {\n            // Sanity checks\n            if (!layout[y]) layout[y] = [];\n            layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n            for (let x = 0; x < LEVEL_COLS; x++) {\n                // Sanity check\n                if (!layout[y][x]) layout[y][x] = ' ';\n\n                // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                // to construct a list of them, but they are permanent parts of the layout, so we can\n                // leave them as part of the level and draw them normally.\n\n                if (layout[y][x] === 'V') {\n                    dispensers.push({ x, y });\n                }\n\n                // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                // can pick up the treasures and statues. That's why for these elements, we add them to\n                // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                // top of the layout.\n\n                if (layout[y][x] === 'p') {\n                    layout[y][x] = ' ';\n                    player = { x, y };\n                }\n\n                // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                // layout. The Lad interacts with them, but we can handle that during our movement checks.\n            }\n        }\n\n        return {\n            name: level.name,\n            time: level.time,\n            maxRocks: level.maRrocks,\n            layout,\n            dispensers,\n            player\n        };\n    }\n};\n","import { Text } from './Text';\nimport { Player } from './Player';\nimport { Rock } from './Rock';\nimport { LEVEL_COLS, LEVEL_ROWS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE } from './Constants';\nimport { game } from './Game';\nimport { State } from './Behavior';\nimport { Screen } from './Screen';\nimport { Level } from './Level';\n\n/**\n * Field\n *\n * The \"field\" represents the current level, or, \"playing field\". A new playing field is created\n * every time you start a level, so we attach everything about the currently played level to\n * the field -- positions of treasure, the player, victory conditions, etc.\n */\nexport class Field {\n    constructor(levelNumber) {\n        let level = Level.load(levelNumber);\n\n        this.layout = level.layout;\n        this.dispensers = level.dispensers;\n        this.time = level.time;\n        this.maxRocks = level.rocks;\n        this.rocks = [];\n        this.player = new Player(level.player.x, level.player.y);\n    }\n\n    update(moveFrame) {\n        let oldX = this.player.x, oldY = this.player.y;\n\n        // Move player based on user input\n        this.player.update(this, moveFrame);\n\n        if (oldX !== this.player.x && oldY === this.player.y) {\n            if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                this.layout[oldY + 1][oldX] = ' ';\n            }\n        }\n\n        // Check if player should be dead (before moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n        // Move rocks\n        for (let rock of this.rocks) rock.update(this, moveFrame);\n\n        // Check if player should be dead (after moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n        if (moveFrame) {\n            // Collect statues\n            if (this.isStatue(this.player.x, this.player.y)) {\n                this.layout[this.player.y][this.player.x] = ' ';\n                game.session.updateScore(SCORE_STATUE);\n            }\n\n            // Collect treasure (ends the current level)\n            if (this.isTreasure(this.player.x, this.player.y)) {\n                game.session.startNextLevel();\n            }\n\n            // Interact with trampolines\n            if (this.isTrampoline(this.player.x, this.player.y)) {\n                switch (Math.floor(Math.random() * 5)) {\n                    case 0:\n                        this.player.state = State.LEFT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 1:\n                        this.player.state = State.RIGHT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 2:\n                        this.player.state = State.JUMP_UP;\n                        this.player.nextState = undefined;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 3:\n                        this.player.state = State.JUMP_LEFT;\n                        this.player.nextState = State.LEFT;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 4:\n                        this.player.state = State.JUMP_RIGHT;\n                        this.player.nextState = State.RIGHT;\n                        this.player.jumpStep = 0;\n                        break;\n                }\n            }\n\n            // Dispense new rocks\n            if (this.rocks.length < 3 && Math.random() > 0.9) {\n                let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                this.rocks.push(new Rock(dispenser));\n            }\n\n            // Kill dead rocks\n            this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n            // Kill player\n            if (this.player.state === State.DEAD) {\n                game.session.restartLevel();\n            }\n        }\n    }\n\n    draw() {\n        // Draw layout\n        Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n        // Draw player\n        this.player.draw();\n\n        // Draw rocks\n        this.rocks.forEach(rock => rock.draw());\n    }\n\n    onSolid(x, y) {\n        return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n    }\n\n    emptySpace(x, y) {\n        if (x < 0 || x >= LEVEL_COLS) {\n            return false;\n        } else {\n            return !['|', '='].includes(this.layout[y][x]);\n        }\n    }\n\n    isLadder(x, y) {\n        return this.layout[y][x] === 'H';\n    }\n\n    isStatue(x, y) {\n        return this.layout[y][x] === '&';\n    }\n\n    isTreasure(x, y) {\n        return this.layout[y][x] === '$';\n    }\n\n    isTrampoline(x, y) {\n        return this.layout[y][x] === '.';\n    }\n\n    isEater(x, y) {\n        return this.layout[y][x] === '*';\n    }\n\n    isFire(x, y) {\n        return this.layout[y][x] === '^';\n    }\n\n    isDisappearingFloor(x, y) {\n        return this.layout[y][x] === '-';\n    }\n\n    canClimbUp(x, y) {\n        if (y < 0) return false;\n        return ['H', '&', '$'].includes(this.layout[y][x]);\n    }\n\n    canClimbDown(x, y) {\n        return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n    }\n\n    checkIfPlayerShouldDie() {\n        if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n        if (this.isFire(this.player.x, this.player.y)) {\n            this.player.state = State.DYING;\n        }\n\n        for (let i = 0; i < this.rocks.length; i++) {\n            if (this.player.x === this.rocks[i].x) {\n                if (this.player.y === this.rocks[i].y) {\n                    this.player.state = State.DYING;\n                    this.rocks.splice(i, 1);\n                    break;\n                } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                    game.session.updateScore(SCORE_ROCK);\n                } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                    game.session.updateScore(SCORE_ROCK);\n                }\n            }\n        }\n    }\n}\n","\nimport { PLAY_SPEEDS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE } from './Constants';\nimport { Field } from './Field';\nimport { Screen } from './Screen';\nimport { Input } from './Input';\nimport { game } from './Game';\n\nexport class Session {\n    constructor() {\n        this.score = 0;\n        this.levelNumber = 0;\n        this.levelCycle = 1;\n        this.lives = 5;\n        this.nextLife = 100;\n    }\n\n    update() {\n        // The overall game loop runs at a fixed 60 frames per second, but the Play Speed selected\n        // at the main menu controls how fast the game runs. To accomplish that, we do a second\n        // time check here, and unless this is a \"move frame\", we skip all the logic related to\n        // moving entities.\n        //\n        // This setup allows us to have things like death animations look the same regardless of\n        // the Play Speed selected.\n        let moveFps = PLAY_SPEEDS[game.playSpeed];\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n        let moveFrame = false;\n\n        if (now - lastFrame >= 1000 / moveFps) {\n            moveFrame = true;\n            this.lastFrame = now;\n        }\n\n        if (!this.field) {\n            this.field = new Field(this.levelNumber);\n        }\n\n        this.field.update(moveFrame);\n\n        let recentKeystrokes = Input.buffer.map(event => event.key).join('').toUpperCase();\n\n        if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n            Input.consume();\n            this.field = undefined;\n            this.levelNumber = parseInt(RegExp.$1, 10);\n        } else if (recentKeystrokes.includes(\"IDDQD\")) {\n            Input.consume();\n            console.log(\"god mode\");\n        }\n    }\n\n    draw() {\n        Screen.clear();\n\n        if (this.field) this.field.draw();\n\n        let stat = [\n            String(this.lives).padStart(2, ' '),\n            String(this.levelNumber + 1).padStart(2, ' '),\n            String(this.score).padStart(4, '0'),\n            this.field ? String(this.field.time).padStart(4, ' ') : ''\n        ];\n        Screen.write(0, 21, `Lads   ${stat[0]}   Level   ${stat[1]}    Score   ${stat[2]}    Bonus time   ${stat[3]}`);\n    }\n\n    restartLevel() {\n        this.field = undefined;\n    }\n\n    startNextLevel() {\n        this.field = undefined;\n        this.levelNumber++;\n        if (this.levelNumber % Levels.LEVEL_COUNT === 0) {\n            this.levelCycle++;\n        }\n    }\n\n    updateScore(scoreType) {\n        switch (scoreType) {\n            case SCORE_ROCK:\n                this.score += 2;\n                break;\n            case SCORE_STATUE:\n                this.score += this.field.time;\n                break;\n            case SCORE_TREASURE:\n                // Called repeatedly during the end-of-level event.\n                this.score += 1;\n                break;\n        }\n    }\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { Viewport } from './Viewport';\nimport { GAME_WIDTH, GAME_HEIGHT, PLAY_SPEEDS } from './Constants';\nimport { rgba, createCanvas, clamp, partialText, uv2xy, xy2qr } from './Util';\nimport { Audio } from './Audio';\nimport { ScreenShake } from './ScreenShake';\nimport { Screen } from './Screen';\nimport { MainMenu } from './MainMenu';\nimport { InstructionsMenu } from './InstructionsMenu';\nimport { Session } from './Session';\n\n/**\n * Game state.\n */\nexport class Game {\n    init() {\n        Sprite.loadSpritesheet(async () => {\n            await Viewport.init();\n            await Screen.init();\n            await Sprite.init();\n            await Text.init();\n            await Input.init();\n            await Audio.init();\n\n            window.addEventListener('blur', () => this.pause());\n            window.addEventListener('focus', () => this.unpause());\n\n            this.start();\n        });\n    }\n\n    start() {\n        this.frame = 0;\n        this.playSpeed = 0;\n        this.menu = new MainMenu();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    }\n\n    onFrame() {\n        let fps = 60;\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n\n        // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n        // 60 times per second in most cases. However, it can be higher (the browser may\n        // respect the user's refresh settings, which could be 120Hz or higher for example).\n        //\n        // It's safest to have a check like we do here, where we explicitly limit the number\n        // of update calls to 60 times per second.\n        if (now - lastFrame >= 1000 / fps) {\n            this.update();\n            this.lastFrame = now;\n        }\n\n        Viewport.resize();\n        this.draw();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    }\n\n    update() {\n        // Pull in frame by frame button pushes / keypresses / mouse clicks\n        Input.update();\n\n        /*game.camera.pos.x += 0.1;\n        game.camera.pos.y -= 0.1;*/\n\n        //if (Input.pressed[Input.Action.MENU]) {\n        //    this.paused ? this.unpause() : this.pause();\n        //}\n\n        if (this.paused) return;\n\n        // perform any per-frame audio updates\n        Audio.update();\n\n        // Behavior (AI, player input, etc.)\n        //perform(this.entities); <-- cut to save space\n\n        // perform any queued damage\n        //Damage.perform(this.entities);\n\n        // Movement (perform entity velocities to position)\n\n        // Dialog scheduling\n        //DialogScheduling.perform();\n\n        // Victory conditions\n\n        if (this.menu) {\n            this.menu.update();\n        }\n\n        /*    if (!this.session) {\n            this.session = new Session();\n        }*/\n\n        if (this.session) this.session.update();\n\n        // Culling (typically when an entity dies)\n\n        // Camera logic\n        /*let diff = {\n            x: this.player.pos.x - this.camera.pos.x,\n            y: this.player.pos.y - this.camera.pos.y\n        };*/\n\n        /*\n        this.camera.pos.x += diff.x * 0.2;\n        this.camera.pos.y += diff.y * 0.2;\n        */\n\n        // Tick screenshakes and cull finished screenshakes\n        this.screenshakes = this.screenshakes.filter(screenshake =>\n            screenshake.update()\n        );\n\n        // Flickering shadows\n        if (game.frame % 6 === 0) this.shadowOffset = (Math.random() * 10) | 0;\n\n        // Intro screenshake\n        if (game.frame === 30) game.screenshakes.push(new ScreenShake(20, 20, 20));\n    }\n\n    draw() {\n        // Reset canvas transform and scale\n        Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n        Viewport.ctx.fillStyle = 'black';\n        Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n        Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n        if (this.session) this.session.draw();\n        if (this.menu) this.menu.draw();\n\n        Screen.drawToViewport();\n\n        return;\n\n        // Render screenshakes (canvas translation)\n        let shakeX = 0, shakeY = 0;\n        this.screenshakes.forEach(shake => {\n            shakeX += shake.x;\n            shakeY += shake.y;\n        });\n        Viewport.ctx.translate(shakeX, shakeY);\n\n        //Maze.draw();\n\n        for (let entity of this.entities) {\n            if (!entity.z || entity.z < 100) entity.draw();\n        }\n\n        Viewport.ctx.drawImage(\n            Sprite.shadow.img,\n            0, 0,\n            500, 500,\n            -this.shadowOffset, -this.shadowOffset,\n            Viewport.width + this.shadowOffset * 2,\n            Viewport.height + this.shadowOffset * 2\n        );\n    }\n\n    pause() {\n        if (this.paused) return;\n        this.paused = true;\n        Audio.pause();\n    }\n\n    unpause() {\n        if (!this.paused) return;\n        this.paused = false;\n        Audio.unpause();\n    }\n\n    startSession() {\n        this.menu = undefined;\n        this.session = new Session();\n    }\n\n    showMainMenu() {\n        this.menu = new MainMenu();\n        this.session = undefined;\n    }\n\n    showInstructions() {\n        this.menu = new InstructionsMenu();\n        this.session = undefined;\n    }\n}\n\nexport const game = new Game();\n","import { game } from './Game';\n\n/**\n * Create and launch game.\n */\ngame.init();\n"]}