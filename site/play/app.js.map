{"version":3,"sources":["app.js","../src/js/Constants.js","../src/js/Viewport.js","../src/js/Util.js","../src/js/SpriteSheet-gen.js","../src/js/Sprite.js","../src/js/Input.js","../src/js/Text.js","../src/js/lib/zzfx.js","../src/js/lib/zzfxm.js","../src/js/songs/ObliqueMystique.js","../src/js/Audio.js","../src/js/Screen.js","../src/js/MainMenu.js","../src/js/InstructionsMenu.js","../src/js/Behavior.js","../src/js/Entity.js","../src/js/Player.js","../src/js/Rock.js","../src/js/Level.js","../src/js/Field.js","../src/js/Session.js","../src/js/Game.js","../src/js/index.js"],"names":["PLAY_SPEEDS","Viewport","[object Object]","canvas","document","getElementById","ctx","getContext","resize","force","dpi","window","devicePixelRatio","width","clientWidth","height","clientHeight","dpiWidth","dpiHeight","scale","Math","min","ceil","center","u","v","imageSmoothingEnabled","fillRect","rgba","r","g","b","a","createCanvas","createElement","SpriteSheet","Sprite","cb","image","Image","onload","src","sheet","data","anchor","font","source","w","h","img","x","y","initDynamicSprite","sliceCanvas","drawImage","loadCacheSlice","sprite","pos","rotation","this","viewportSprite2uv","save","translate","rotate","restore","game","camera","Action","UP","DOWN","LEFT","RIGHT","JUMP","STOP","PAUSE","RESUME","Input","KeyMapping","KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space","Escape","Enter","buffer","history","addEventListener","event","entry","at","Date","getTime","key","code","action","push","console","log","now","filter","length","undefined","UNICODE_CHAR_MAP","join","split","reduce","map","char","idx","Text","white","black","recolor","black_shadow","blue","blue_shadow","shadow","red","terminal","terminal_shadow","text","Array","isArray","block","drawText","k","charCodeAt","floor","measureWidth","sum","c","cu","cv","next","wip","list","cWidth","saved","space","pop","line","col","row","splitParagraph","color","fillStyle","globalCompositeOperation","zzfx","t","zzfxP","zzfxG","e","zzfxX","createBufferSource","f","createBuffer","zzfxR","d","i","getChannelData","set","connect","destination_","start","q","F","z","A","l","B","G","m","C","p","PI","H","I","D","random","Z","E","n","J","K","sin","max","tan","abs","round","zzfxV","top","AudioContext","webkitAudioContext","destination","ObliqueMystique","Audio","readyToPlay","gain_","createGain","shotgun","page","shellReload","damage","alarm","victory","song","instruments","patterns","sequence","BPM","instrumentParameters","j","note","sample","patternChannel","notFirstBeat","stop","instrument","pitch","attenuation","outSampleOffset","sampleOffset","nextSampleOffset","panning","sampleBuffer","leftChannelBuffer","rightChannelBuffer","channelIndex","hasMore","sampleCache","beatLength","patternIndex","sequenceIndex","zzfxM","musicPlaying","sound","gain","linearRampToValueAtTime","currentTime","Screen","screen","clear","MainMenu","lastKeyPressed","toUpperCase","consume","startSession","playSpeed","showInstructions","highScores","write","InstructionsMenu","showMainMenu","State","STOPPED","FALLING","START_JUMP","JUMP_LEFT","JUMP_RIGHT","JUMP_UP","DYING","DEAD","JUMP_FRAMES","Entity","field","repeat","nextState","state","includes","onSolid","jumpStep","isLadder","emptySpace","canClimbUp","canClimbDown","step","terrain","layout","applyMovement","DEATH_FRAMES","Player","super","deathStep","moveFrame","lastActionPressed","Rock","dispenser","LEVEL_COLS","isEater","LevelData","name","time","maxRocks","rocks","Level","LEVELS","LEVEL_COUNT","levelNumber","level","Error","player","dispensers","slice","maRrocks","Field","load","winning","session","updateScore","startNextLevel","oldX","oldY","update","isDisappearingFloor","checkIfPlayerShouldDie","rock","isStatue","isTreasure","isTrampoline","restartLevel","draw","forEach","isFire","splice","hiddenFactor","Session","score","levelCycle","lives","nextLife","lastFrame","nextFrame","moveFrameMillisecondDelay","recentKeystrokes","match","parseInt","RegExp","$1","stat","String","padStart","scoreType","loadSpritesheet","async","init","pause","unpause","frame","menu","requestAnimationFrame","onFrame","setTransform","drawToViewport","paused"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * Constants\n     */\n\n    // The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n    // may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\n    const GAME_WIDTH = 640;\n    const GAME_HEIGHT = 400;\n\n    // The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n    // pixels, we care about the ASCII display area (80x25).\n    const SCREEN_WIDTH = 80;\n    const SCREEN_HEIGHT = 25;\n\n    // The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\n    const CHAR_WIDTH = 8;\n    const CHAR_HEIGHT = 16;\n    const CHARSHEET_WIDTH = 16 * CHAR_WIDTH;\n\n    // Fixed level size\n    const LEVEL_ROWS = 20;\n    const LEVEL_COLS = 79;\n\n    // Play speeds, expressed as frames per second.\n    //\n    // According to the original, the play speeds had millisecond delays of:\n    //   [100ms, 50ms, 25ms, 13ms, 7ms].\n    //\n    // This would mean the effective FPS was:\n    //   [10, 20, 40, 76, 142].\n    //\n    // I think this is way too high, and might not be accurate (it doesn't count\n    // time spent drawing the screen and running the game's logic, which might\n    // be a significant number of milliseconds). From memory, each speed was about\n    // 50% faster than the previous one, so that's what I've set here.\n    const PLAY_SPEEDS = [120, 100, 90, 50, 30];\n\n    // Maximum number of rocks on screen at once\n    const MAX_ROCKS = 7;\n\n    // Each dispenser on the level increases max rocks by 1\n    const DISPENSER_MAX_ROCKS = 1;\n\n    // Hidden difficulty factor - the game gets 5% faster each level cycle\n    const HIDDEN_FACTOR_PLAY_SPEED = 0.05;\n\n    // Hidden difficulty factor - the maximum number of rocks increases each level cycle\n    const HIDDEN_FACTOR_MAX_ROCKS = 2;\n\n    // Score events (note, these are just identifiers for the types of score increases, not\n    // actual score values).\n    const SCORE_ROCK = 1;\n    const SCORE_STATUE = 2;\n    const SCORE_TREASURE = 3;\n\n    /**\n     * Viewport\n     *\n     * Represents the game display (for us, a canvas).\n     */\n    const Viewport = {\n        init() {\n            Viewport.canvas = document.getElementById('canvas');\n            Viewport.ctx = Viewport.canvas.getContext('2d');\n            Viewport.resize(true);\n        },\n\n        // Resize the canvas to give us approximately our desired game display size.\n        //\n        // Rather than attempt to explain it, here's a concrete example:\n        //\n        //     we start with a desired game dimension:   480x270px\n        //          get the actual browser dimensions:  1309x468px\n        //          factor in the display's DPI ratio:  2618x936px\n        //         now calculate the horizontal scale:       5.45x\n        //                     and the vertical scale:       3.46x\n        //            our new offical game scaling is:        5.4x\n        //       and our official viewport dimensions:   484x173px\n        //\n        // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n        // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n        // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n        // UI elements the player cannot see!).\n        resize(force) {\n            let dpi = window.devicePixelRatio,\n                width = Viewport.canvas.clientWidth,\n                height = Viewport.canvas.clientHeight,\n                dpiWidth = width * dpi,\n                dpiHeight = height * dpi;\n\n            if (\n                force ||\n                Viewport.canvas.width !== dpiWidth ||\n                Viewport.canvas.height !== dpiHeight\n            ) {\n                Viewport.canvas.width = dpiWidth;\n                Viewport.canvas.height = dpiHeight;\n\n                Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n                Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n                Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n                Viewport.center = {\n                    u: (Viewport.width / 2) | 0,\n                    v: (Viewport.height / 2) | 0\n                };\n                Viewport.clientWidth = width;\n                Viewport.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                Viewport.ctx.imageSmoothingEnabled = false;\n            }\n\n            // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n            //Viewport.canvas.style.cursor = 'none';\n        },\n\n        fillViewportRect() {\n            Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n        }\n    };\n\n    function rgba(r, g, b, a) {\n        return `rgba(${r},${g},${b},${a})`;\n    }\n\n    function createCanvas(width, height) {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        return { canvas, ctx };\n    }\n\n    /**\n     * This module is generated by `gulp buildAssets`.\n     */\n    const SpriteSheet =\n        /* <generated> */\n    { font: [ [ 128, 0, 128, 448 ] ],\n      font2: [ [ 0, 0, 128, 512 ] ],\n      harold: [ [ 128, 448, 19, 12 ] ],\n      uri: 'sprites.png' };\n    /* </generated> */\n\n    /**\n     * Sprite\n     *\n     * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n     * modifying them or constructing using primitives. To save space, we use some techniques\n     * like storing only a small slice of an image in the spritesheet, then using code\n     * to duplicate it, add some randomness, etc.\n     */\n    const Sprite = {\n        // This is an exception to the rule, loading the spritesheet is a special action that\n        // happens BEFORE everything is initialized.\n        loadSpritesheet(cb) {\n            let image = new Image();\n            image.onload = cb;\n            image.src = SpriteSheet.uri;\n            Sprite.sheet = image;\n        },\n\n        init() {\n            // Base pixel font and icons (see `Text.init` for additional variations)\n            Sprite.font = initBasicSprite(SpriteSheet.font2[0]);\n\n            return;\n        },\n\n        /**\n         * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n         * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n         * that's appropriate!\n         */\n        drawSprite(ctx, sprite, u, v) {\n            ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n        },\n\n        drawViewportSprite(sprite, pos, rotation) {\n            let { u, v } = this.viewportSprite2uv(\n                sprite,\n                pos\n            );\n            if (rotation) {\n                Viewport.ctx.save();\n                Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n                Viewport.ctx.rotate(rotation);\n                Viewport.ctx.drawImage(\n                    sprite.img,\n                    -sprite.anchor.x,\n                    -sprite.anchor.y\n                );\n                Viewport.ctx.restore();\n            } else {\n                Viewport.ctx.drawImage(sprite.img, u, v);\n            }\n        },\n\n        viewportSprite2uv(sprite, pos) {\n            return {\n                u: pos.x - sprite.anchor.x - game.camera.pos.x + Viewport.center.u,\n                v: pos.y - sprite.anchor.y - game.camera.pos.y + Viewport.center.v\n            };\n        }\n    };\n\n    // Sprite utility functions\n\n    function initBasicSprite(data, anchor) {\n        return initDynamicSprite(loadCacheSlice(...data), anchor);\n    }\n\n    function initDynamicSprite(source, anchor) {\n        let w = source.width,\n            h = source.height;\n\n        return {\n            img: source,\n            // Hack! Using a flat `.map(initBasicSprite)` is actually going to pass the\n            // element INDEX as second argument, resulting in \"anchor=1\". The right solution\n            // here is \"typeof anchor === 'object' ?\", but to save bytes I avoid using\n            // the typeof and instanceof keywords anywhere in the codebase. Hence,\n            // \"anchor && anchor.x\".\n            anchor: (anchor && anchor.x) ? anchor : { x: (w / 2) | 0, y: (h / 2) | 0 }\n        };\n    }\n\n    function loadCacheSlice(x, y, w, h) {\n        const source = Sprite.sheet;\n        const sliceCanvas = createCanvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n    }\n\n    // A list of in-game actions that can be performed by the player\n    const Action = {\n        UP:     11,\n        DOWN:   12,\n        LEFT:   13,\n        RIGHT:  14,\n        JUMP:   15,\n        STOP:   16,\n        PAUSE:  17,\n        RESUME: 18\n    };\n\n    // A list of key code mappings and what action they perform. Here we hard-code it, but\n    // you could easily also have the key mappings controlled by settings and let the user\n    // configure it.\n    const KeyMapping = {\n        KeyW:       Action.UP,\n        KeyS:       Action.DOWN,\n        KeyA:       Action.LEFT,\n        KeyD:       Action.RIGHT,\n        ArrowUp:    Action.UP,\n        ArrowDown:  Action.DOWN,\n        ArrowLeft:  Action.LEFT,\n        ArrowRight: Action.RIGHT,\n        Space:      Action.JUMP,\n        Escape:     Action.PAUSE,\n        Enter:      Action.RESUME\n    };\n\n    const Input = {\n        Action,\n        KeyMapping,\n\n        init() {\n            // Input buffer - new keypress events go into this buffer to be handled\n            // during the game's update loop. It's up to the `update()` methods to consume\n            // key presses and remove them from the buffer.\n            this.buffer = [];\n\n            // Input history - history contains recent key press events in order,\n            // removed automatically after a few seconds. This is useful for detecting\n            // inputs like cheat codes, for example.\n            this.history = [];\n\n            window.addEventListener('keydown', event => {\n                let entry = {\n                    at: new Date().getTime(),\n                    key: event.key,\n                    code: event.code,\n                    action: Input.KeyMapping[event.code] || Input.Action.STOP\n                };\n                Input.buffer.push(entry);\n                Input.history.push(entry);\n                console.log(entry);\n            });\n        },\n\n        update() {\n            let now = new Date().getTime();\n            this.history = this.history.filter(entry => entry.at > now - 3000);\n        },\n\n        lastKeyPressed() {\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n        },\n\n        lastCodePressed() {\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].code : '';\n        },\n\n        lastActionPressed() {\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n        },\n\n        consume() {\n            this.buffer = [];\n        },\n    };\n\n    // In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n    // characters are convenient for us. Here we can choose to map unicode characters to positions\n    // 0x80+ in the charsheet, making it easy for us to render things like special characters,\n    // box drawing characters, etc.\n    const SUPPORTED_UNICODE_CHARS = [\n        '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n        '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n        '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n    ].join('');\n\n    const UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n        map[char] = 0x80 + idx;\n        return map;\n    }, {});\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        init() {\n            Text.white = Sprite.font.img;\n\n            Text.black = recolor(Text.white, rgba(0, 0, 0, 1));\n            Text.black_shadow = recolor(Text.white, rgba(90, 20, 90, 0.15));\n            Text.blue = recolor(Text.white, rgba(200, 40, 220, 1));\n            Text.blue_shadow = recolor(Text.white, rgba(240, 50, 200, 0.2));\n            Text.shadow = recolor(Text.white, rgba(240, 240, 255, 0.25));\n            Text.red = recolor(Text.white, rgba(240, 50, 50, 1));\n\n            Text.terminal = recolor(Text.white, rgba(51, 255, 0, 1));\n            Text.terminal_shadow = recolor(Text.white, rgba(255, 255, 255, 0.3));\n\n            Text.terminal = recolor(Text.white, rgba(51, 255, 0, 0.9));\n            Text.terminal_shadow = undefined;\n\n            Text['#ead4aa'] = recolor(Text.white, '#ead4aa');\n            Text['#fee761'] = recolor(Text.white, '#fee761');\n            Text['#ff0044'] = recolor(Text.white, '#ff0044');\n        },\n\n        drawText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n            if (Array.isArray(text)) {\n                for (let block of text) {\n                    Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, scale, font, shadow);\n                }\n                return;\n            }\n\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n                let k = (c - 0) * (CHAR_WIDTH);\n                if (shadow) {\n                    ctx.drawImage(\n                        shadow,\n                        k % CHARSHEET_WIDTH,\n                        Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                        CHAR_WIDTH,\n                        CHAR_HEIGHT,\n                        u + 1,\n                        v,\n                        CHAR_WIDTH * scale,\n                        CHAR_HEIGHT * scale\n                    );\n                }\n                ctx.drawImage(\n                    font,\n                    k % CHARSHEET_WIDTH,\n                    Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    u,\n                    v,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                u += CHAR_WIDTH * scale;\n            }\n        },\n\n        /*\n        drawRightText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n            u -= Text.measureWidth(text, scale);\n            Text.drawText(ctx, text, u, v, scale, font, shadow);\n        },\n        */\n\n        measureWidth(text, scale = 1) {\n            return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n        },\n\n        splitParagraph(text, w, h) {\n            let cu = 0, cv = 0;\n            let next = () => ({ text: '', u: cu, v: cv });\n            let wip = next();\n            let list = [];\n\n            for (let c of text.split('')) {\n                let cWidth = Text.measureWidth(c, 1);\n                if (c === '\\n' || cu + cWidth > w) {\n                    let saved = '';\n                    if (c !== '\\n' && c !== ' ') {\n                        let space = wip.text.split(' ');\n                        if (space.length > 1) {\n                            saved = space.pop();\n                            wip.text = space.join(' ');\n                        }\n                    }\n                    if (wip.text.length > 0) list.push(wip);\n                    cu = 0;\n                    cv += (CHAR_HEIGHT);\n                    wip = next();\n                    if (saved.length > 0) {\n                        wip.text = saved;\n                        cu += Text.measureWidth(wip.text, 1);\n                    }\n                } else {\n                    cu += cWidth;\n                }\n                if (c !== '\\n') {\n                    wip.text = wip.text + c;\n                }\n            }\n\n            if (wip.text.length > 0) list.push(wip);\n\n            return list.map(line => ({\n                ...line,\n                w: Text.measureWidth(line.text, 1),\n                h: CHAR_HEIGHT\n            }));\n        },\n\n        drawTextColRow(text, col, row) {\n            Text.drawText(Viewport.ctx, Text.splitParagraph(text, Viewport.width), col * CHAR_WIDTH, row * CHAR_HEIGHT, 1, Text.terminal, Text.terminal_shadow);\n        }\n    };\n\n    // Text utility functions\n\n    function recolor(font, color) {\n        let canvas = createCanvas(font.width, font.height);\n        canvas.ctx.fillStyle = color;\n        canvas.ctx.fillRect(0, 0, font.width, font.height);\n        canvas.ctx.globalCompositeOperation = 'destination-in';\n        canvas.ctx.drawImage(font, 0, 0);\n        return canvas.canvas;\n    }\n\n    // zzfx() - the universal entry point -- returns a AudioBufferSourceNode\n    const zzfx=(...t)=>zzfxP(zzfxG(...t));\n\n    // zzfxP() - the sound player -- returns a AudioBufferSourceNode\n    const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e};\n\n    // zzfxG() - the sound generator -- returns an array of sample data\n    const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z};\n\n    // zzfxV - global volume\n    const zzfxV=.3;\n\n    // zzfxR - global sample rate\n    const zzfxR=44100;\n\n    // zzfxX - the common audio context\n    const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n    // destination for zzfx and zzfxm sounds\n    zzfx.destination_ = zzfxX.destination;\n\n    /**\n     * ZzFX Music Renderer v2.0.2 by Keith Clark\n     */\n\n    /**\n     * @typedef Channel\n     * @type {Array.<Number>}\n     * @property {Number} 0 - Channel instrument\n     * @property {Number} 1 - Channel panning (-1 to +1)\n     * @property {Number} 2 - Note\n     */\n\n    /**\n     * @typedef Pattern\n     * @type {Array.<Channel>}\n     */\n\n    /**\n     * @typedef Instrument\n     * @type {Array.<Number>} ZzFX sound parameters\n     */\n\n    /**\n     * Generate a song\n     *\n     * @param {Array.<Instrument>} instruments - Array of ZzFX sound paramaters.\n     * @param {Array.<Pattern>} patterns - Array of pattern data.\n     * @param {Array.<Number>} sequence - Array of pattern indexes.\n     * @param {Number} [speed=125] - Playback speed of the song (in BPM).\n     * @returns {Array.<Array.<Number>>} Left and right channel sample data.\n     */\n\n    const zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n        let instrumentParameters,\n            i,\n            j,\n            k,\n            note,\n            sample,\n            patternChannel,\n            notFirstBeat,\n            stop,\n            instrument,\n            pitch,\n            attenuation,\n            outSampleOffset,\n            sampleOffset,\n            nextSampleOffset,\n            sampleBuffer = [],\n            leftChannelBuffer = [],\n            rightChannelBuffer = [],\n            channelIndex = 0,\n            panning,\n            hasMore = 1,\n            sampleCache = {},\n            beatLength = ((zzfxR / BPM) * 60) >> 2;\n\n        // for each channel in order until there are no more\n        for (; hasMore; channelIndex++) {\n            // reset current values\n            sampleBuffer = [(hasMore = notFirstBeat = pitch = outSampleOffset = 0)];\n\n            // for each pattern in sequence\n            sequence.map((patternIndex, sequenceIndex) => {\n                // get pattern for current channel, use empty 1 note pattern if none found\n                patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n                // check if there are more channels\n                hasMore |= !!patterns[patternIndex][channelIndex];\n\n                // get next offset, use the length of first channel\n                nextSampleOffset =\n                    outSampleOffset +\n                    (patterns[patternIndex][0].length - 2 - !notFirstBeat) *\n                        beatLength;\n\n                // for each beat in pattern, plus one extra if end of sequence\n                for (\n                    i = 2, k = outSampleOffset;\n                    i <\n                    patternChannel.length + (sequenceIndex == sequence.length - 1);\n                    notFirstBeat = ++i\n                ) {\n                    // <channel-note>\n                    note = patternChannel[i];\n\n                    // stop if different instrument or new note\n                    stop = (instrument != (patternChannel[0] || 0)) | note | 0;\n\n                    // fill buffer with samples for previous beat, most cpu intensive part\n                    for (\n                        j = 0;\n                        j < beatLength && notFirstBeat;\n                        // fade off attenuation at end of beat if stopping note, prevents clicking\n                        j++ > beatLength - 99 && stop\n                            ? (attenuation += (attenuation < 1) / 99)\n                            : 0\n                    ) {\n                        // copy sample to stereo buffers with panning\n                        sample =\n                            ((1 - attenuation) * sampleBuffer[sampleOffset++]) /\n                                2 || 0;\n                        leftChannelBuffer[k] =\n                            (leftChannelBuffer[k] || 0) + sample * panning - sample;\n                        rightChannelBuffer[k] =\n                            (rightChannelBuffer[k++] || 0) +\n                            sample * panning +\n                            sample;\n                    }\n\n                    // set up for next note\n                    if (note) {\n                        // set attenuation\n                        attenuation = note % 1;\n                        panning = patternChannel[1] || 0;\n                        if ((note |= 0)) {\n                            // get cached sample\n                            sampleBuffer = sampleCache[\n                                [\n                                    (instrument =\n                                        patternChannel[(sampleOffset = 0)] || 0),\n                                    note\n                                ]\n                            ] =\n                                sampleCache[[instrument, note]] ||\n                                // add sample to cache\n                                ((instrumentParameters = [\n                                    ...instruments[instrument]\n                                ]),\n                                (instrumentParameters[2] *=\n                                    2 ** ((note - 12) / 12)),\n                                zzfxG(...instrumentParameters));\n                        }\n                    }\n                }\n\n                // update the sample offset\n                outSampleOffset = nextSampleOffset;\n            });\n        }\n\n        return [leftChannelBuffer, rightChannelBuffer];\n    };\n\n    const ObliqueMystique = [[[1.3,0,23,,,.2,3,5],[1.5,0,4e3,,,.03,2,1.25,,,,,.02,6.8,-.3,,.5],[.7,0,2100,,,.2,3,3,,,-400,,,2],[,0,655,,,.11,2,1.65,,,,,,3.8,-.1,.1]],[[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,],[,.6,,,,,13,,18,,19,,,,,,,,19,,18,,,,16,,,,13,,,,,,,,,,13,,18,,19,,,,,,,,18,19,18,,,,13,14,13,,16,,18,,19,,],[3,-1,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,13,13,13,13]],[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,]]],[1,1,0,0,0,0,1,0],,];\n\n    const Audio = {\n        init() {\n            Audio.readyToPlay = false;\n\n            Audio.ctx = zzfxX;\n            Audio.gain_ = Audio.ctx.createGain();\n            Audio.gain_.connect(Audio.ctx.destination);\n            zzfx.destination_ = Audio.gain_;\n\n            Audio.shotgun = [,0.01,140,0.01,0.02,0.45,4,2.42,0.1,-0.1,,,,1.2,,0.3,0.04,0.8,0.02];\n            Audio.page = [,,1233,,.01,.2,1,1.43,,,539,.1,,,,,,.51,.03,.01];\n            Audio.shellReload = [,,68,0.01,,0.14,1,1.53,7.5,0.1,50,0.02,-0.01,-0.2,0.1,0.2,,0.47,0.01];\n            Audio.damage = [,,391,,.19,.01,2,.54,-4,20,,,,,,,.02,.9];\n            Audio.alarm = [,,970,.12,.25,.35,,.39,8.1,,10,.1,.2,,.1,,,.6,.09,.13];\n            // [,,961,.05,.06,1.17,1,4.67,.8,,,,,.8,-0.8,.1,.49,.62,.09];\n            Audio.victory = [,,454,.06,.86,.71,2,.63,-0.7,1.7,-83,.09,.27,.3,.2,,.18,.95,.02,.02];\n            Audio.song = zzfxM(...ObliqueMystique);\n\n            // Save our background music in os13k, for fun!\n            //localStorage[`OS13kMusic,${TITLE} - Oblique Mystique`] = JSON.stringify(ObliqueMystique);\n        },\n\n        update() {\n            if (!Audio.readyToPlay) return;\n\n            if (!Audio.musicPlaying) {\n                //Audio.bgmusicnode = zzfxP(...Audio.song);\n                //Audio.bgmusicnode.loop = true;\n                Audio.musicPlaying = true;\n            }\n        },\n\n        play(sound) {\n            if (!Audio.readyToPlay) return;\n            zzfx(...sound);\n        },\n\n        // It's important we do pausing and unpausing as specific events and not in general update(),\n        // because update() is triggered by the animation frame trigger which does not run if the\n        // page is not visible. (So, if you want the music to fade in the background, for example,\n        // that's not helpful if it won't work because you aren't looking at the page!)\n\n        pause() {\n            Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n        },\n\n        unpause() {\n            Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n        }\n    };\n\n    const Screen = {\n        init() {\n            this.screen = [];\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                this.screen.push([]);\n            }\n            this.clear();\n        },\n\n        clear() {\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                for (let x = 0; x < SCREEN_WIDTH; x++) {\n                    this.screen[y][x] = ' ';\n                }\n            }\n        },\n\n        write(x, y, text) {\n            if (!Array.isArray(text)) text = [text];\n\n            for (let j = 0; j < text.length; j++) {\n                for (let i = 0; i < text[j].length; i++) {\n                    this.screen[y + j][x + i] = text[j][i];\n                }\n            }\n        },\n\n        drawToViewport() {\n            let text = this.screen.map(row => row.join('')).join('\\n');\n\n            Text.drawText(\n                Viewport.ctx,\n                Text.splitParagraph(text, Viewport.width),\n                0, 0,\n                1,\n                Text.terminal, Text.terminal_shadow\n            );\n        }\n    };\n\n    class MainMenu {\n        constructor() {\n        }\n\n        update() {\n            switch (Input.lastKeyPressed().toUpperCase()) {\n                case 'P':\n                    Input.consume();\n                    game.startSession();\n                    break;\n                case 'L':\n                    Input.consume();\n                    game.playSpeed = (game.playSpeed + 1) % PLAY_SPEEDS.length;\n                    break;\n                case 'I':\n                    Input.consume();\n                    game.showInstructions();\n                    break;\n                case 'E':\n                    Input.consume();\n                    game.showInstructions();\n                    break;\n            }\n        }\n\n        draw() {\n            let version = '?';\n            let terminal = '?';\n\n            let highScores = [\n                `1) 6000  Bob`,\n                `2) 6000  Tom`,\n                `3) 4000  Wayne`,\n                ``,\n                ``\n            ];\n\n            Screen.clear();\n            Screen.write(0, 0, [\n                `               LL                     dd       dd`,\n                `               LL                     dd       dd                      tm`,\n                `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n                `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n                ``,\n                `                                       Version:    ${version}`,\n                `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n                `10970 Ashton Ave.  Suite 312           Play speed: ${game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n                `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n                `                                       Stop = Other`,\n                ``,\n                `P = Play game                          High Scores`,\n                `L = Change level of difficulty         ${highScores[0]}`,\n                `C = Configure Ladder                   ${highScores[1]}`,\n                `I = Instructions                       ${highScores[2]}`,\n                `E = Exit Ladder                        ${highScores[3]}`,\n                `                                       ${highScores[4]}`,\n                ``,\n                `Enter one of the above:`\n            ]);\n        }\n    }\n\n    class InstructionsMenu {\n        constructor() {\n        }\n\n        update() {\n            if (Input.lastKeyPressed().toUpperCase() !== '') {\n                Input.consume();\n                game.showMainMenu();\n            }\n        }\n\n        draw() {\n            Screen.clear();\n            Screen.write(0, 0, [\n                `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n                `dark corridors never before seen by human eyes and find hidden`,\n                `treasures and riches.`,\n                ``,\n                `You control Lad by typing the direction buttons and jumping by`,\n                `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n                `You must find and grasp the treasures (shown as $) BEFORE the`,\n                `bonus time runs out.`,\n                ``,\n                `A new Lad will be awarded for every 10,000 points.`,\n                `Extra points are awarded for touching the gold`,\n                `statues (shown as &).  You will receive the bonus time points`,\n                `that are left when you have finished the level.`,\n                ``,\n                `Type an ESCape to pause the game.`,\n                ``,\n                `Remember, there is more than one way to skin a cat. (Chum)`,\n                ``,\n                `Good luck Lad.`,\n                ``,\n                ``,\n                ``,\n                `Type RETURN to return to main menu:`\n            ]);\n        }\n    }\n\n    // This is our list of STATES. Each entity starts out in one of these states and can move between\n    // them based on events that happen in the game. (Note that some of these are directions, but\n    // since an entity keeps moving in the direction it is going unless stopped, directions are\n    // states in this game.)\n    const State = {\n        STOPPED:    1,         // Standing still\n        UP:         2,         // Moving up (player only)\n        LEFT:       3,         // Moving left\n        DOWN:       4,         // Moving down\n        RIGHT:      5,         // Moving right\n        FALLING:    6,         // Falling\n        START_JUMP: 7,         // About to start a jump (player only)\n        JUMP_LEFT:  8,         // Jumping left (player only)\n        JUMP_RIGHT: 9,         // Jumping right (player only)\n        JUMP_UP:    10,        // Jumping straight up (player only)\n        DYING:      11,        // Dying (used as a death animation)\n        DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n    };\n\n    const JUMP_FRAMES = {\n        [State.JUMP_RIGHT]: [\n            { x: 1, y: -1 },\n            { x: 1, y: -1 },\n            { x: 1, y: 0 },\n            { x: 1, y: 0 },\n            { x: 1, y: 1 },\n            { x: 1, y: 1 }\n        ],\n        [State.JUMP_LEFT]: [\n            { x: -1, y: -1 },\n            { x: -1, y: -1 },\n            { x: -1, y: 0 },\n            { x: -1, y: 0 },\n            { x: -1, y: 1 },\n            { x: -1, y: 1 }\n        ],\n        [State.JUMP_UP]: [\n            { x: 0, y: -1 },\n            { x: 0, y: -1 },\n            { x: 0, y: 0 },\n            { x: 0, y: 1 },\n            { x: 0, y: 1 },\n            { x: 0, y: 0 }\n        ],\n    };\n\n    class Entity {\n        applyMovement(field) {\n            let repeat = false;\n\n            // This method contains generic \"movement\" application for all entities, including\n            // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n            // work the same for both.\n            //\n            // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n            // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n            if (this.nextState) {\n                switch (this.state) {\n                    case State.STOPPED:\n                    case State.LEFT:\n                    case State.RIGHT:\n                        if ([State.LEFT, State.RIGHT, State.STOPPED].includes(this.nextState)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                        break;\n\n                    case State.UP:\n                    case State.DOWN:\n                        // Normal\n                        if ([State.LEFT, State.RIGHT].includes(this.nextState)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                        break;\n                }\n            }\n\n            if (this.nextState === State.START_JUMP) {\n                // Special case: the user wants to jump!\n                //\n                // If the player is standing on something solid, we initiate a jump based on the current\n                // movement of the player. If not, we (sort of) ignore the request to jump... although\n                // it does subtly change the behavior upon landing.\n                if (field.onSolid(this.x, this.y)) {\n                    if (this.state === State.STOPPED || this.state === State.FALLING) {\n                        this.state = State.JUMP_UP;\n                        this.jumpStep = 0;\n                        this.nextState = State.STOPPED;\n                    } else if (this.state === State.LEFT || this.state === State.JUMP_LEFT) {\n                        this.state = State.JUMP_LEFT;\n                        this.jumpStep = 0;\n                        this.nextState = State.LEFT;\n                    } else if (this.state === State.RIGHT || this.state === State.JUMP_RIGHT) {\n                        this.state = State.JUMP_RIGHT;\n                        this.jumpStep = 0;\n                        this.nextState = State.RIGHT;\n                    }\n                } else {\n                    if (this.state === State.JUMP_UP || this.state === State.FALLING) {\n                        this.nextState = State.STOPPED;\n                    } else if (this.state === State.JUMP_RIGHT) {\n                        this.nextState = State.RIGHT;\n                    } else if (this.state === State.JUMP_LEFT) {\n                        this.nextState = State.LEFT;\n                    }\n                }\n            } else if (this.nextState === State.UP && field.isLadder(this.x, this.y)) {\n                // Special case: the user wants to go up!\n                //\n                // If the user is on a ladder, we can start ascending. Note that if the user is not\n                // on a ladder we ignore their input, which is intentional -- this allows queued\n                // (pacman) input, where we can tap UP a little before reaching the ladder.\n                this.state = State.UP;\n                this.nextState = undefined;\n            } else if (this.nextState === State.DOWN && (field.isLadder(this.x, this.y) || field.isLadder(this.x, this.y + 1))) {\n                // Special case: the player wants to go down!\n                //\n                // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n                // on a ladder we ignore their input, which is intentional -- this allows queued\n                // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n                this.state = State.DOWN;\n                this.nextState = undefined;\n            }\n\n            switch (this.state) {\n                case State.LEFT:\n                    if (!field.onSolid(this.x, this.y)) {\n                        this.nextState = State.LEFT;\n                        this.state = State.FALLING;\n                        repeat = true;\n                        break;\n                    }\n                    if (field.emptySpace(this.x - 1, this.y)) {\n                        this.x--;\n                    } else {\n                        this.nextState = State.STOPPED;\n                    }\n                    break;\n\n                case State.RIGHT:\n                    if (!field.onSolid(this.x, this.y)) {\n                        this.nextState = State.RIGHT;\n                        this.state = State.FALLING;\n                        repeat = true;\n                        break;\n                    }\n                    if (field.emptySpace(this.x + 1, this.y)) {\n                        this.x++;\n                    } else {\n                        this.nextState = State.STOPPED;\n                    }\n                    break;\n\n                case State.UP:\n                    if (field.canClimbUp(this.x, this.y - 1)) {\n                        this.y--;\n                    } else {\n                        this.state = State.STOPPED;\n                    }\n                    break;\n\n                case State.DOWN:\n                    if (field.canClimbDown(this.x, this.y + 1)) {\n                        this.y++;\n                    } else {\n                        this.state = State.STOPPED;\n                    }\n                    break;\n\n                case State.JUMP_RIGHT:\n                case State.JUMP_LEFT:\n                case State.JUMP_UP:\n                    let step = JUMP_FRAMES[this.state][this.jumpStep];\n                    console.log(['jump', this.state, this.jumpStep, step]);\n                    if ((this.x + step.x >= 0) && (this.x + step.x < LEVEL_COLS)) {\n                        let terrain = field.layout[this.y + step.y][this.x + step.x];\n                        if (['=', '|', '-'].includes(terrain)) {\n                            if (field.onSolid(this.x, this.y)) {\n                                this.state = this.nextState;\n                                this.nextState = undefined;\n                            } else {\n                                switch (this.state) {\n                                    case State.JUMP_RIGHT:\n                                        this.nextState = State.RIGHT;\n                                        break;\n                                    case State.JUMP_LEFT:\n                                        this.nextState = State.LEFT;\n                                        break;\n                                    case State.JUMP_UP:\n                                        this.nextState = State.UP;\n                                        break;\n                                }\n                                this.state = State.FALLING;\n                            }\n                        } else if (terrain === 'H') {\n                            this.x += step.x;\n                            this.y += step.y;\n                            this.state = State.STOPPED;\n                            this.nextState = undefined;\n                        } else {\n                            this.x += step.x;\n                            this.y += step.y;\n                            this.jumpStep++;\n\n                            if (this.jumpStep >= JUMP_FRAMES[this.state].length) {\n                                this.state = this.nextState;\n                                this.nextState = undefined;\n                            }\n                        }\n                    } else {\n                        if (field.onSolid(this.x, this.y)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        } else {\n                            this.state = State.FALLING;\n                            this.nextState = State.STOPPED;\n                        }\n                    }\n                    break;\n\n                case State.FALLING:\n                    if (field.onSolid(this.x, this.y)) {\n                        this.state = this.nextState || State.STOPPED;\n                    } else {\n                        this.y++;\n                    }\n                    break;\n            }\n\n            // If we were attempting to move somewhere and realized we should be falling instead,\n            // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n            // frame\" from the user's point of view.\n            if (repeat) return this.applyMovement(field);\n        }\n    }\n\n    const DEATH_FRAMES = ['p', 'p', 'b', 'd', 'd', 'q', 'p', 'p', 'b', 'd', 'd', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n    /**\n     * Player\n     */\n    class Player extends Entity {\n        constructor(x, y) {\n            super();\n            this.x = x;\n            this.y = y;\n            this.state = State.STOPPED;\n            this.nextState = State.STOPPED;\n            this.jumpStep = 0;\n            this.deathStep = 0;\n            console.log('player constructed', x, y);\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            let action = Input.lastActionPressed();\n\n            if (action === Input.Action.LEFT) {\n                this.nextState = State.LEFT;\n                Input.consume();\n            } else if (action === Input.Action.RIGHT) {\n                this.nextState = State.RIGHT;\n                Input.consume();\n            } else if (action === Input.Action.UP) {\n                this.nextState = State.UP;\n                Input.consume();\n            } else if (action === Input.Action.DOWN) {\n                this.nextState = State.DOWN;\n                Input.consume();\n            } else if (action === Input.Action.JUMP) {\n                this.nextState = State.START_JUMP;\n                Input.consume();\n            }\n\n            return this.applyMovement(field);\n        }\n\n        draw() {\n            let char = 'g';\n\n            switch (this.state) {\n                case State.RIGHT:\n                case State.JUMP_RIGHT:\n                case State.UP:\n                case State.DOWN:\n                    char = 'p';\n                    break;\n\n                case State.LEFT:\n                case State.JUMP_LEFT:\n                    char = 'q';\n                    break;\n\n                case State.FALLING:\n                    char = 'b';\n                    break;\n\n                case State.DYING:\n                    char = DEATH_FRAMES[this.deathStep];\n                    break;\n\n                case State.DEAD:\n                    char = '_';\n                    break;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n    }\n\n    const DEATH_FRAMES$1 = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\n    class Rock extends Entity {\n        constructor(dispenser) {\n            super();\n            this.x = dispenser.x;\n            this.y = dispenser.y;\n            this.state = State.FALLING;\n            this.nextState = undefined;\n            this.deathStep = 0;\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES$1.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            if (this.state === State.STOPPED) {\n                if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                    this.nextState = State.RIGHT;\n                } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                    this.nextState = State.LEFT;\n                } else {\n                    this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n                }\n            }\n\n            if (this.x === 0 && this.state === State.LEFT) {\n                this.state = State.RIGHT;\n            }\n\n            if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n                this.state = State.LEFT;\n            }\n\n            if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n                this.nextState = State.FALLING;\n            }\n\n            if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n                let r = Math.floor(Math.random() * 4);\n                this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n            }\n\n            if (field.isEater(this.x, this.y)) {\n                this.state = State.DYING;\n                return;\n            }\n\n            this.applyMovement(field);\n        }\n\n        draw() {\n            let char = 'o';\n\n            switch (this.state) {\n                case State.DYING:\n                    char = DEATH_FRAMES$1[this.deathStep];\n                    break;\n                case State.DEAD:\n                    return;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n    }\n\n    var LevelData = [\n    \t{\n    \t\tname: \"Easy Street\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                                       V                 $                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==================================================            \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H          H                             H                     \",\n    \t\t\t\"================H==========H==================   ========H=====================\",\n    \t\t\t\"                &          H                             H          |       |  \",\n    \t\t\t\"                                                         H         Easy Street \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==========H=========  =======================                 \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"======================== ====================== =========H==============       \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"*    p                                                   H                    *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Long Island\",\n    \t\ttime: 45,\n    \t\tmaxRocks: 8,\n    \t\tlayout: [\n    \t\t\t\"                                                                          $    \",\n    \t\t\t\"                                                                   &      H    \",\n    \t\t\t\"    H       |V                                                     V|     H    \",\n    \t\t\t\"====H======================= ========================= ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                    & |                         . .                  H    \",\n    \t\t\t\"========================== ======  =================== ===================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"                                  |                                       H    \",\n    \t\t\t\"    H                             |                 .  .                  H    \",\n    \t\t\t\"====H=====================   ======  ================  ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                      |                                                   \",\n    \t\t\t\"    H                      |                        .   .                 H    \",\n    \t\t\t\"=========================  ========    ==============   ==================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"==============                      |                                     H    \",\n    \t\t\t\" Long Island |   p         *        |                 *                   H    \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Ghost Town\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                            V               V           V               $      \",\n    \t\t\t\"                                                                       $$$     \",\n    \t\t\t\"     p    H                                                    H      $$$$$   H\",\n    \t\t\t\"==========H===                                                =H==============H\",\n    \t\t\t\"          H                                                    H              H\",\n    \t\t\t\"          H                              &                     H              H\",\n    \t\t\t\"     ==============   ====     =    ======    =   ====    =====H=====         H\",\n    \t\t\t\"    G              ^^^    ^^^^^ ^^^^      ^^^^ ^^^    ^^^                     $\",\n    \t\t\t\"    h                                                                 |        \",\n    \t\t\t\"    o     |                     H                             &       |        \",\n    \t\t\t\"    s     ======================H============================== ===========    \",\n    \t\t\t\"    t        &                  H                                              \",\n    \t\t\t\"                                H                                              \",\n    \t\t\t\"              |                 H                 H                   H        \",\n    \t\t\t\"    T         ==================H=================H===================H======= \",\n    \t\t\t\"    o                                             H                   H        \",\n    \t\t\t\"    w                                                                 H        \",\n    \t\t\t\"    n                           ^                                     H        \",\n    \t\t\t\"*                              ^^^                                    H       *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Tunnel Vision\",\n    \t\ttime: 36,\n    \t\trocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                                            V                       V          \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"     H             H                         |                H                \",\n    \t\t\t\"=====H=====--======H==========================     ===----====H===========     \",\n    \t\t\t\"     H             H                |&&                       H                \",\n    \t\t\t\"     H             H                ==================        H                \",\n    \t\t\t\"     H             H                       tunnel  H          H                \",\n    \t\t\t\"     H           =======---===----=================H=         H           H    \",\n    \t\t\t\"     H         |                           vision  H          H           H    \",\n    \t\t\t\"     H         =========---&      -----============H          H           H    \",\n    \t\t\t\"     H           H                                 H |        H           H    \",\n    \t\t\t\"     H           H=========----===----================        H  ==============\",\n    \t\t\t\"                 H                                        &   H                \",\n    \t\t\t\"                 H                                        |   H                \",\n    \t\t\t\"====---====      H                                        |   H                \",\n    \t\t\t\"|         |    ================---===---===================   H                \",\n    \t\t\t\"|   ===   |                                                   H        H    p  \",\n    \t\t\t\"|    $    |                                                   H     ===H=======\",\n    \t\t\t\"|*  $$$  *|   *                *       *                     *H       *H       \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Point of No Return\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 7,\n    \t\tlayout: [\n    \t\t\t\"         $                                                                     \",\n    \t\t\t\"         H                                                   V                 \",\n    \t\t\t\"         H                                                                     \",\n    \t\t\t\"         HHHHHHHHHHHHH     .HHHHHHHHHHHHHH                          H    p     \",\n    \t\t\t\"         &                   V           H                        ==H==========\",\n    \t\t\t\"                                         H                          H          \",\n    \t\t\t\"   H                                     H        .                 H          \",\n    \t\t\t\"===H==============-----------============H====                      H          \",\n    \t\t\t\"   H                                                      H         H          \",\n    \t\t\t\"   H                                                 =====H==============      \",\n    \t\t\t\"   H                                     H                H                    \",\n    \t\t\t\"   H              &..^^^.....^..^ . ^^   H==---------     H                    \",\n    \t\t\t\"   H         ============================H    &           H             H      \",\n    \t\t\t\"   H         ===      ===      ===       H    ---------=================H======\",\n    \t\t\t\"   H                                     H                              H      \",\n    \t\t\t\"   H                          &          H          &                   H      \",\n    \t\t\t\"   ==========-------------------------=======----------===================     \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"^^^*         ^^^^^^^^^^^^^^^^^^^^^^^^^*     *^^^^^^^^^^*Point of No Return*^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Bug City\",\n    \t\ttime: 37,\n    \t\tmaxRocks: 6,\n    \t\tlayout: [\n    \t\t\t\"        Bug City             HHHHHHHH                          V               \",\n    \t\t\t\"                           HHH      HHH                                        \",\n    \t\t\t\"   H                                          >mmmmmmmm                        \",\n    \t\t\t\"   H===============                   ====================          H          \",\n    \t\t\t\"   H              |=====       \\\\  /         V                  =====H==========\",\n    \t\t\t\"   H                            \\\\/                                  H          \",\n    \t\t\t\"   H                                        | $                     H          \",\n    \t\t\t\"   H           H                            | H                     H          \",\n    \t\t\t\"   H       ====H=======          p          |&H    H                H          \",\n    \t\t\t\"   H           H             ======================H           ======          \",\n    \t\t\t\"   H           H      &|                           H                    H      \",\n    \t\t\t\"   H           H      &|                    H      H     }{        =====H====  \",\n    \t\t\t\"===H===&       H       =====================H      H                    H      \",\n    \t\t\t\"               H                            H      H                    H      \",\n    \t\t\t\"               H                            H      &                    H      \",\n    \t\t\t\"         ======H===   =======    H    <>    &                           H      \",\n    \t\t\t\"                                 H==========       =====     =     ============\",\n    \t\t\t\"     }i{                         H                                             \",\n    \t\t\t\"*                                H                                            *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"GangLand\",\n    \t\ttime: 32,\n    \t\tmaxRocks: 6,\n    \t\tlayout: [\n    \t\t\t\"                    =Gang Land=                             V                  \",\n    \t\t\t\"                   ==      _  ==                                      .        \",\n    \t\t\t\"      p    H        |  [] |_| |                  &                    .  H     \",\n    \t\t\t\"===========H        |     |_| |       H         ===   ===================H     \",\n    \t\t\t\"      V    H        =============     H======                            H     \",\n    \t\t\t\"           H                          H                     &            H     \",\n    \t\t\t\"           H                          H                |    |            H     \",\n    \t\t\t\"    H      H        ^^^&&^^^ & ^  ^^^ H           H    |    =============H     \",\n    \t\t\t\"    H======H   =======================H===========H=====          &      H     \",\n    \t\t\t\"    H                                 H           H    |         &&&     H     \",\n    \t\t\t\"    H                                 H           H    |        &&&&&    H     \",\n    \t\t\t\"    H                                 H           H    |    =============H     \",\n    \t\t\t\"              =====------=================        H    |       $     $         \",\n    \t\t\t\"                                         |        H    |      $$$   $$$        \",\n    \t\t\t\"====------===                            |        H    |     $$$$$ $$$$$       \",\n    \t\t\t\"            |       =                    | =============    ============       \",\n    \t\t\t\"            |       $                     ^          &                         \",\n    \t\t\t\"            |^^^^^^^^^^^^^^      $ ^              ======                       \",\n    \t\t\t\"*                   .      &   ^ H*^                    ^  ^       ^^^^^^^^^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t}\n    ];\n\n    const Level = {\n        LEVELS: LevelData,\n        LEVEL_COUNT: LevelData.length,\n\n        load(levelNumber) {\n            console.log(Level.LEVELS);\n            // As the player keeps playing, level numbers will loop around to beginning\n            let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n            if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n            // Perform some sanity checks on the level layout and extract useful info\n            // like player start position and dispenser positions etc.\n\n            let layout = level.layout.map(row => row.split(''));\n            let dispensers = [];\n            let player;\n\n            // Sanity check\n            layout = layout.slice(0, LEVEL_ROWS);\n\n            for (let y = 0; y < LEVEL_ROWS; y++) {\n                // Sanity checks\n                if (!layout[y]) layout[y] = [];\n                layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n                for (let x = 0; x < LEVEL_COLS; x++) {\n                    // Sanity check\n                    if (!layout[y][x]) layout[y][x] = ' ';\n\n                    // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                    // to construct a list of them, but they are permanent parts of the layout, so we can\n                    // leave them as part of the level and draw them normally.\n\n                    if (layout[y][x] === 'V') {\n                        dispensers.push({ x, y });\n                    }\n\n                    // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                    // can pick up the treasures and statues. That's why for these elements, we add them to\n                    // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                    // top of the layout.\n\n                    if (layout[y][x] === 'p') {\n                        layout[y][x] = ' ';\n                        player = { x, y };\n                    }\n\n                    // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                    // layout. The Lad interacts with them, but we can handle that during our movement checks.\n                }\n            }\n\n            return {\n                name: level.name,\n                time: level.time,\n                maxRocks: level.maRrocks,\n                layout,\n                dispensers,\n                player\n            };\n        }\n    };\n\n    /**\n     * Field\n     *\n     * The \"field\" represents the current level, or, \"playing field\". A new playing field is created\n     * every time you start a level, so we attach everything about the currently played level to\n     * the field -- positions of treasure, the player, victory conditions, etc.\n     */\n    class Field {\n        constructor(levelNumber) {\n            let level = Level.load(levelNumber);\n\n            // Store level-related info\n            this.layout = level.layout;\n            this.dispensers = level.dispensers;\n            this.time = 2000;\n\n            // Initialize player\n            this.player = new Player(level.player.x, level.player.y);\n\n            // Initialize list of rocks (empty)\n            this.rocks = [];\n\n            // Not winning yet (while \"winning\" the player stops moving and we add up the bonus score)\n            this.winning = false;\n        }\n\n        update(moveFrame) {\n            if (this.winning) {\n                game.session.updateScore(SCORE_TREASURE);\n                this.time -= 10;\n                if (this.time < 0) game.session.startNextLevel();\n                return;\n            }\n\n            if (this.time > 0 && moveFrame) this.time--;\n\n            let oldX = this.player.x, oldY = this.player.y;\n\n            // Move player based on user input\n            this.player.update(this, moveFrame);\n\n            if (oldX !== this.player.x && oldY === this.player.y) {\n                if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                    this.layout[oldY + 1][oldX] = ' ';\n                }\n            }\n\n            // Check if player should be dead (before moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n            // Move rocks\n            for (let rock of this.rocks) rock.update(this, moveFrame);\n\n            // Check if player should be dead (after moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n            if (moveFrame) {\n                // Collect statues\n                if (this.isStatue(this.player.x, this.player.y)) {\n                    this.layout[this.player.y][this.player.x] = ' ';\n                    game.session.updateScore(SCORE_STATUE);\n                }\n\n                // Collect treasure (ends the current level)\n                if (this.isTreasure(this.player.x, this.player.y)) {\n                    this.winning = true;\n                    return;\n                }\n\n                // Interact with trampolines\n                if (this.isTrampoline(this.player.x, this.player.y)) {\n                    switch (Math.floor(Math.random() * 5)) {\n                        case 0:\n                            this.player.state = State.LEFT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 1:\n                            this.player.state = State.RIGHT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 2:\n                            this.player.state = State.JUMP_UP;\n                            this.player.nextState = undefined;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 3:\n                            this.player.state = State.JUMP_LEFT;\n                            this.player.nextState = State.LEFT;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 4:\n                            this.player.state = State.JUMP_RIGHT;\n                            this.player.nextState = State.RIGHT;\n                            this.player.jumpStep = 0;\n                            break;\n                    }\n                }\n\n                // Kill dead rocks\n                this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n                // Dispense new rocks\n                if (this.rocks.length < this.maxRocks() && Math.random() > 0.91) {\n                    let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                    this.rocks.push(new Rock(dispenser));\n                }\n\n                // Kill player\n                if (this.player.state === State.DEAD) {\n                    game.session.restartLevel();\n                }\n            }\n        }\n\n        draw() {\n            // Draw layout\n            Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n            // Draw player\n            this.player.draw();\n\n            // Draw rocks\n            this.rocks.forEach(rock => rock.draw());\n        }\n\n        onSolid(x, y) {\n            return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n        }\n\n        emptySpace(x, y) {\n            if (x < 0 || x >= LEVEL_COLS) {\n                return false;\n            } else {\n                return !['|', '='].includes(this.layout[y][x]);\n            }\n        }\n\n        isLadder(x, y) {\n            return this.layout[y][x] === 'H';\n        }\n\n        isStatue(x, y) {\n            return this.layout[y][x] === '&';\n        }\n\n        isTreasure(x, y) {\n            return this.layout[y][x] === '$';\n        }\n\n        isTrampoline(x, y) {\n            return this.layout[y][x] === '.';\n        }\n\n        isEater(x, y) {\n            return this.layout[y][x] === '*';\n        }\n\n        isFire(x, y) {\n            return this.layout[y][x] === '^';\n        }\n\n        isDisappearingFloor(x, y) {\n            return this.layout[y][x] === '-';\n        }\n\n        canClimbUp(x, y) {\n            if (y < 0) return false;\n            return ['H', '&', '$'].includes(this.layout[y][x]);\n        }\n\n        canClimbDown(x, y) {\n            return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n        }\n\n        checkIfPlayerShouldDie() {\n            if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n            if (this.isFire(this.player.x, this.player.y)) {\n                this.player.state = State.DYING;\n            }\n\n            if (this.time <= 0) {\n                this.player.state = State.DYING;\n            }\n\n            for (let i = 0; i < this.rocks.length; i++) {\n                if (this.player.x === this.rocks[i].x) {\n                    if (this.player.y === this.rocks[i].y) {\n                        this.player.state = State.DYING;\n                        this.rocks.splice(i, 1);\n                        break;\n                    } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                        game.session.updateScore(SCORE_ROCK);\n                    } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                        game.session.updateScore(SCORE_ROCK);\n                    }\n                }\n            }\n        }\n\n        maxRocks() {\n            return MAX_ROCKS + this.dispensers.length * DISPENSER_MAX_ROCKS + game.session.hiddenFactor() * HIDDEN_FACTOR_MAX_ROCKS;\n        }\n    }\n\n    class Session {\n        constructor() {\n            this.score = 0;\n            this.levelNumber = 0;\n            this.levelCycle = 1;\n            this.lives = 5;\n            this.nextLife = 100;\n        }\n\n        update() {\n            // The overall game loop runs at a fixed 60 frames per second, but the Play Speed selected\n            // at the main menu controls how fast the game runs. To accomplish that, we do a second\n            // time check here, and unless this is a \"move frame\", we skip all the logic related to\n            // moving entities.\n            //\n            // This setup allows us to have things like death animations look the same regardless of\n            // the Play Speed selected.\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n            let moveFrame = false;\n\n            if (now - lastFrame >= (this.nextFrame || 0)) {\n                moveFrame = true;\n                this.nextFrame = now + this.moveFrameMillisecondDelay();\n            }\n\n            if (!this.field) this.field = new Field(this.levelNumber);\n            this.field.update(moveFrame);\n\n            let recentKeystrokes = Input.history.map(event => event.key).join('').toUpperCase();\n\n            if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n                Input.consume();\n                this.field = undefined;\n                this.levelNumber = parseInt(RegExp.$1, 10);\n            } else if (recentKeystrokes.includes(\"IDDQD\")) {\n                Input.consume();\n                console.log(\"god mode\");\n            } else if (recentKeystrokes.includes(\"IDKFA\")) {\n                this.field.winning = true;\n                Input.consume();\n            }\n        }\n\n        draw() {\n            Screen.clear();\n\n            if (this.field) this.field.draw();\n\n            let stat = [\n                String(this.lives).padStart(2, ' '),\n                String(this.levelNumber + 1).padStart(2, ' '),\n                String(this.score).padStart(6, ' '),\n                this.field ? String(this.field.time).padStart(4, ' ') : ''\n            ];\n            Screen.write(0, 21, `Lads   ${stat[0]}     Level   ${stat[1]}      Score   ${stat[2]}      Bonus time   ${stat[3]}`);\n        }\n\n        restartLevel() {\n            this.field = undefined;\n        }\n\n        startNextLevel() {\n            this.field = undefined;\n            this.levelNumber++;\n            if (this.levelNumber % Level.LEVEL_COUNT === 0) {\n                this.levelCycle++;\n            }\n        }\n\n        updateScore(scoreType) {\n            switch (scoreType) {\n                case SCORE_ROCK:\n                    this.score += 200;\n                    break;\n                case SCORE_STATUE:\n                    this.score += this.field.time;\n                    break;\n                case SCORE_TREASURE:\n                    // Added repeatedly after winning the level\n                    this.score += 10;\n                    break;\n            }\n        }\n\n        hiddenFactor() {\n            // This \"hidden\" difficulty level increases steadily as the player completes a\n            // level cycle (every time they reach the Easy Street level). This makes the\n            // game slowly harder as you keep playing.\n            return Math.floor(this.levelNumber / Level.LEVEL_COUNT);\n        }\n\n        moveFrameMillisecondDelay() {\n            // Regardless of play speed, the game gets slightly faster every level cycle\n            return Math.floor(PLAY_SPEEDS[game.playSpeed] - this.hiddenFactor() * HIDDEN_FACTOR_PLAY_SPEED * PLAY_SPEEDS[game.playSpeed]);\n        }\n    }\n\n    /**\n     * Game state.\n     */\n    class Game {\n        init() {\n            Sprite.loadSpritesheet(async () => {\n                await Viewport.init();\n                await Screen.init();\n                await Sprite.init();\n                await Text.init();\n                await Input.init();\n                await Audio.init();\n\n                window.addEventListener('blur', () => this.pause());\n                window.addEventListener('focus', () => this.unpause());\n\n                this.start();\n            });\n        }\n\n        start() {\n            this.frame = 0;\n            this.playSpeed = 0;\n            this.menu = new MainMenu();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        }\n\n        onFrame() {\n            let fps = 60;\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n\n            // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n            // 60 times per second in most cases. However, it can be higher (the browser may\n            // respect the user's refresh settings, which could be 120Hz or higher for example).\n            //\n            // It's safest to have a check like we do here, where we explicitly limit the number\n            // of update calls to 60 times per second.\n            if (now - lastFrame >= 1000 / fps) {\n                this.update();\n                this.lastFrame = now;\n            }\n\n            Viewport.resize();\n            this.draw();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        }\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            Input.update();\n\n            // perform any per-frame audio updates\n            Audio.update();\n\n            if (this.menu) {\n                this.menu.update();\n            }\n\n            if (this.session) this.session.update();\n        }\n\n        draw() {\n            // Reset canvas transform and scale\n            Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n            Viewport.ctx.fillStyle = 'black';\n            Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n            Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n            if (this.session) this.session.draw();\n            if (this.menu) this.menu.draw();\n\n            Screen.drawToViewport();\n\n            return;\n        }\n\n        pause() {\n            if (this.paused) return;\n            this.paused = true;\n            Audio.pause();\n        }\n\n        unpause() {\n            if (!this.paused) return;\n            this.paused = false;\n            Audio.unpause();\n        }\n\n        startSession() {\n            this.menu = undefined;\n            this.session = new Session();\n        }\n\n        showMainMenu() {\n            this.menu = new MainMenu();\n            this.session = undefined;\n        }\n\n        showInstructions() {\n            this.menu = new InstructionsMenu();\n            this.session = undefined;\n        }\n    }\n\n    const game = new Game();\n\n    /**\n     * Create and launch game.\n     */\n    game.init();\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","/**\n * Constants\n */\n\n// Spritesheet URI (produced during gulp build)\nexport const SPRITESHEET_URI = 'sprites.png';\n\n// The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n// may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\nexport const GAME_WIDTH = 640;\nexport const GAME_HEIGHT = 400;\n\n// The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n// pixels, we care about the ASCII display area (80x25).\nexport const SCREEN_WIDTH = 80;\nexport const SCREEN_HEIGHT = 25;\n\n// The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\nexport const CHAR_WIDTH = 8;\nexport const CHAR_HEIGHT = 16;\nexport const CHARSHEET_WIDTH = 16 * CHAR_WIDTH;\nexport const CHARSHEET_HEIGHT = 32 * CHAR_HEIGHT;\n\n// Fixed level size\nexport const LEVEL_ROWS = 20;\nexport const LEVEL_COLS = 79;\n\n// Play speeds, expressed as frames per second.\n//\n// According to the original, the play speeds had millisecond delays of:\n//   [100ms, 50ms, 25ms, 13ms, 7ms].\n//\n// This would mean the effective FPS was:\n//   [10, 20, 40, 76, 142].\n//\n// I think this is way too high, and might not be accurate (it doesn't count\n// time spent drawing the screen and running the game's logic, which might\n// be a significant number of milliseconds). From memory, each speed was about\n// 50% faster than the previous one, so that's what I've set here.\nexport const PLAY_SPEEDS = [120, 100, 90, 50, 30];\n\n// Maximum number of rocks on screen at once\nexport const MAX_ROCKS = 7;\n\n// Each dispenser on the level increases max rocks by 1\nexport const DISPENSER_MAX_ROCKS = 1;\n\n// Hidden difficulty factor - the game gets 5% faster each level cycle\nexport const HIDDEN_FACTOR_PLAY_SPEED = 0.05;\n\n// Hidden difficulty factor - the maximum number of rocks increases each level cycle\nexport const HIDDEN_FACTOR_MAX_ROCKS = 2;\n\n// Score events (note, these are just identifiers for the types of score increases, not\n// actual score values).\nexport const SCORE_ROCK = 1;\nexport const SCORE_STATUE = 2;\nexport const SCORE_TREASURE = 3;\n","'use strict';\n\nimport { GAME_WIDTH, GAME_HEIGHT } from './Constants';\n\n/**\n * Viewport\n *\n * Represents the game display (for us, a canvas).\n */\nexport const Viewport = {\n    init() {\n        Viewport.canvas = document.getElementById('canvas');\n        Viewport.ctx = Viewport.canvas.getContext('2d');\n        Viewport.resize(true);\n    },\n\n    // Resize the canvas to give us approximately our desired game display size.\n    //\n    // Rather than attempt to explain it, here's a concrete example:\n    //\n    //     we start with a desired game dimension:   480x270px\n    //          get the actual browser dimensions:  1309x468px\n    //          factor in the display's DPI ratio:  2618x936px\n    //         now calculate the horizontal scale:       5.45x\n    //                     and the vertical scale:       3.46x\n    //            our new offical game scaling is:        5.4x\n    //       and our official viewport dimensions:   484x173px\n    //\n    // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n    // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n    // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n    // UI elements the player cannot see!).\n    resize(force) {\n        let dpi = window.devicePixelRatio,\n            width = Viewport.canvas.clientWidth,\n            height = Viewport.canvas.clientHeight,\n            dpiWidth = width * dpi,\n            dpiHeight = height * dpi;\n\n        if (\n            force ||\n            Viewport.canvas.width !== dpiWidth ||\n            Viewport.canvas.height !== dpiHeight\n        ) {\n            Viewport.canvas.width = dpiWidth;\n            Viewport.canvas.height = dpiHeight;\n\n            Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n            Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n            Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n            Viewport.center = {\n                u: (Viewport.width / 2) | 0,\n                v: (Viewport.height / 2) | 0\n            };\n            Viewport.clientWidth = width;\n            Viewport.clientHeight = height;\n\n            // Note: smoothing flag gets reset on every resize by some browsers, which is why\n            // we do it here.\n            Viewport.ctx.imageSmoothingEnabled = false;\n        }\n\n        // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n        //Viewport.canvas.style.cursor = 'none';\n    },\n\n    fillViewportRect() {\n        Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n    }\n};\n","'use strict';\n\nimport { game } from './Game';\nimport { Viewport } from './Viewport';\n\nexport function qr2xy(pos) {\n    return {\n        x: pos.q * 13,\n        y: pos.q * 6 + pos.r * 12\n    };\n}\n\nexport function xy2qr(pos) {\n    let qrFraction = {\n        q: (pos.x / 13),\n        r: ((pos.y - pos.x * 6 / 13) / 12)\n    };\n    return qrRounded(qrFraction);\n}\n\nexport function xy2uv(pos) {\n    return {\n        u: pos.x + Viewport.center.u - game.camera.pos.x,\n        v: pos.y + Viewport.center.v - game.camera.pos.y\n    };\n}\n\nexport function uv2xy(pos) {\n    return {\n        x: pos.u - Viewport.center.u + game.camera.pos.x,\n        y: pos.v - Viewport.center.v + game.camera.pos.y\n    };\n}\n\nexport function qr2qrs(pos) {\n    return { q: pos.q, r: pos.r, s: -pos.q-pos.r };\n}\n\nexport function qrs2qr(pos) {\n    return { q: pos.q, r: pos.r };\n}\n\n// When you \"round\" a fractional hexagonal value to an integer one (usually to convert\n// a mouse click to a hex grid), you can't just `Math.floor()` like you can with standard\n// square tiles - you'll never get the behavior right on the angled sides of the hexagons.\n//\n// To get the behavior you want, you need to convert to cubed coordinates (q,r,s), then\n// individually round each one and eliminate the one furthest away from your original value.\nexport function qrRounded(pos) {\n    let qrsA = qr2qrs(pos),\n        qrsB = {\n            q: Math.round(qrsA.q),\n            r: Math.round(qrsA.r),\n            s: Math.round(qrsA.s)\n        },\n        diffQ = Math.abs(qrsA.q - qrsB.q),\n        diffR = Math.abs(qrsA.r - qrsB.r),\n        diffS = Math.abs(qrsA.s - qrsB.s);\n\n    if (diffQ > diffR && diffQ > diffS) {\n        qrsB.q = -qrsB.r-qrsB.s;\n    } else if (diffR > diffS) {\n        qrsB.r = -qrsB.q-qrsB.s;\n    } else {\n        qrsB.s = -qrsB.q-qrsB.r;\n    }\n\n    return qrs2qr(qrsB);\n}\n\nexport function clamp(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n}\n\nexport function flood(maze, pos, maxDistance = Infinity) {\n    let result = array2d(maze[0].length, maze.length, () => Infinity);\n    let stack = [{ ...pos, cost: 0 }];\n    while (stack.length > 0) {\n        let { q, r, cost } = stack.shift();\n        if (result[r][q] <= cost) continue;\n        result[r][q] = cost++;\n        if (result[r][q] >= maxDistance) continue;\n        if (maze[r][q + 1] && result[r][q + 1] > cost)\n            stack.push({ q: q + 1, r, cost });\n        if (maze[r][q - 1] && result[r][q - 1] > cost)\n            stack.push({ q: q - 1, r, cost });\n        if (maze[r + 1][q] && result[r + 1][q] > cost)\n            stack.push({ q, r: r + 1, cost });\n        if (maze[r - 1][q] && result[r - 1][q] > cost)\n            stack.push({ q, r: r - 1, cost });\n    }\n    return result;\n}\n\nexport function array2d(width, height, fn) {\n    return Array.from({ length: height }, () =>\n        Array.from({ length: width }, fn)\n    );\n}\n\nexport function tileIsPassable(q, r) {\n    if (game.brawl) {\n        let room = game.brawl.room;\n        if (\n            q < room.q ||\n            r < room.r ||\n            q >= room.q + room.w ||\n            r >= room.r + room.h\n        )\n            return false;\n    }\n    if (q < 0 || r < 0 || q >= game.maze.w || r >= game.maze.h) return false;\n    return !!game.maze.maze[r][q];\n}\n\nexport function rgba(r, g, b, a) {\n    return `rgba(${r},${g},${b},${a})`;\n}\n\nexport function createCanvas(width, height) {\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    let ctx = canvas.getContext('2d');\n    return { canvas, ctx };\n}\n\nexport function roomCenter(room) {\n    return {\n        x: (room.q + room.w / 2) * TILE_SIZE,\n        y: (room.r + room.h / 2) * TILE_SIZE\n    };\n}\n\nexport function partialText(text, t, d) {\n    let length = clamp(Math.ceil(t / d * text.length), 0, text.length),\n        substr = text.slice(0, length),\n        idx = text.indexOf(' ', length - 1);\n    if (idx < 0) idx = text.length;\n    if (idx - length > 0) substr += '#'.repeat(idx - length);\n\n    return substr;\n}\n","'use strict';\n\n/**\n * This module is generated by `gulp buildAssets`.\n */\nexport const SpriteSheet =\n    /* <generated> */\n{ font: [ [ 128, 0, 128, 448 ] ],\n  font2: [ [ 0, 0, 128, 512 ] ],\n  harold: [ [ 128, 448, 19, 12 ] ],\n  uri: 'sprites.png' }\n/* </generated> */\n","'use strict';\n\nimport { game } from './Game';\nimport { rgba, createCanvas } from './Util';\nimport { SpriteSheet } from './SpriteSheet-gen';\nimport { Viewport } from './Viewport';\n\n/**\n * Sprite\n *\n * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n * modifying them or constructing using primitives. To save space, we use some techniques\n * like storing only a small slice of an image in the spritesheet, then using code\n * to duplicate it, add some randomness, etc.\n */\nexport const Sprite = {\n    // This is an exception to the rule, loading the spritesheet is a special action that\n    // happens BEFORE everything is initialized.\n    loadSpritesheet(cb) {\n        let image = new Image();\n        image.onload = cb;\n        image.src = SpriteSheet.uri;\n        Sprite.sheet = image;\n    },\n\n    init() {\n        // Base pixel font and icons (see `Text.init` for additional variations)\n        Sprite.font = initBasicSprite(SpriteSheet.font2[0]);\n\n        return;\n    },\n\n    /**\n     * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n     * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n     * that's appropriate!\n     */\n    drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n    },\n\n    drawViewportSprite(sprite, pos, rotation) {\n        let { u, v } = this.viewportSprite2uv(\n            sprite,\n            pos\n        );\n        if (rotation) {\n            Viewport.ctx.save();\n            Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n            Viewport.ctx.rotate(rotation);\n            Viewport.ctx.drawImage(\n                sprite.img,\n                -sprite.anchor.x,\n                -sprite.anchor.y\n            );\n            Viewport.ctx.restore();\n        } else {\n            Viewport.ctx.drawImage(sprite.img, u, v);\n        }\n    },\n\n    viewportSprite2uv(sprite, pos) {\n        return {\n            u: pos.x - sprite.anchor.x - game.camera.pos.x + Viewport.center.u,\n            v: pos.y - sprite.anchor.y - game.camera.pos.y + Viewport.center.v\n        };\n    }\n};\n\n// Sprite utility functions\n\nfunction initBasicSprite(data, anchor) {\n    return initDynamicSprite(loadCacheSlice(...data), anchor);\n}\n\nfunction initDynamicSprite(source, anchor) {\n    let w = source.width,\n        h = source.height;\n\n    return {\n        img: source,\n        // Hack! Using a flat `.map(initBasicSprite)` is actually going to pass the\n        // element INDEX as second argument, resulting in \"anchor=1\". The right solution\n        // here is \"typeof anchor === 'object' ?\", but to save bytes I avoid using\n        // the typeof and instanceof keywords anywhere in the codebase. Hence,\n        // \"anchor && anchor.x\".\n        anchor: (anchor && anchor.x) ? anchor : { x: (w / 2) | 0, y: (h / 2) | 0 }\n    };\n}\n\nfunction loadCacheSlice(x, y, w, h) {\n    const source = Sprite.sheet;\n    const sliceCanvas = createCanvas(w, h);\n    sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n    return sliceCanvas.canvas;\n}\n","\n// A list of in-game actions that can be performed by the player\nconst Action = {\n    UP:     11,\n    DOWN:   12,\n    LEFT:   13,\n    RIGHT:  14,\n    JUMP:   15,\n    STOP:   16,\n    PAUSE:  17,\n    RESUME: 18\n};\n\n// A list of key code mappings and what action they perform. Here we hard-code it, but\n// you could easily also have the key mappings controlled by settings and let the user\n// configure it.\nconst KeyMapping = {\n    KeyW:       Action.UP,\n    KeyS:       Action.DOWN,\n    KeyA:       Action.LEFT,\n    KeyD:       Action.RIGHT,\n    ArrowUp:    Action.UP,\n    ArrowDown:  Action.DOWN,\n    ArrowLeft:  Action.LEFT,\n    ArrowRight: Action.RIGHT,\n    Space:      Action.JUMP,\n    Escape:     Action.PAUSE,\n    Enter:      Action.RESUME\n};\n\nexport const Input = {\n    Action,\n    KeyMapping,\n\n    init() {\n        // Input buffer - new keypress events go into this buffer to be handled\n        // during the game's update loop. It's up to the `update()` methods to consume\n        // key presses and remove them from the buffer.\n        this.buffer = [];\n\n        // Input history - history contains recent key press events in order,\n        // removed automatically after a few seconds. This is useful for detecting\n        // inputs like cheat codes, for example.\n        this.history = [];\n\n        window.addEventListener('keydown', event => {\n            let entry = {\n                at: new Date().getTime(),\n                key: event.key,\n                code: event.code,\n                action: Input.KeyMapping[event.code] || Input.Action.STOP\n            };\n            Input.buffer.push(entry);\n            Input.history.push(entry);\n            console.log(entry);\n        });\n    },\n\n    update() {\n        let now = new Date().getTime();\n        this.history = this.history.filter(entry => entry.at > now - 3000);\n    },\n\n    lastKeyPressed() {\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n    },\n\n    lastCodePressed() {\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].code : '';\n    },\n\n    lastActionPressed() {\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n    },\n\n    consume() {\n        this.buffer = [];\n    },\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { rgba, createCanvas } from './Util';\nimport { CHAR_WIDTH, CHAR_HEIGHT, CHARSHEET_WIDTH } from './Constants';\nimport { Viewport } from './Viewport';\n\n\n// In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n// characters are convenient for us. Here we can choose to map unicode characters to positions\n// 0x80+ in the charsheet, making it easy for us to render things like special characters,\n// box drawing characters, etc.\nconst SUPPORTED_UNICODE_CHARS = [\n    '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n    '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n    '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n].join('');\n\nconst UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n    map[char] = 0x80 + idx;\n    return map;\n}, {});\n\n/**\n * Text\n *\n * Utilities for drawing text using in-game pixel font.\n */\nexport const Text = {\n    init() {\n        Text.white = Sprite.font.img;\n\n        Text.black = recolor(Text.white, rgba(0, 0, 0, 1));\n        Text.black_shadow = recolor(Text.white, rgba(90, 20, 90, 0.15));\n        Text.blue = recolor(Text.white, rgba(200, 40, 220, 1));\n        Text.blue_shadow = recolor(Text.white, rgba(240, 50, 200, 0.2));\n        Text.shadow = recolor(Text.white, rgba(240, 240, 255, 0.25));\n        Text.red = recolor(Text.white, rgba(240, 50, 50, 1));\n\n        Text.terminal = recolor(Text.white, rgba(51, 255, 0, 1));\n        Text.terminal_shadow = recolor(Text.white, rgba(255, 255, 255, 0.3));\n\n        Text.terminal = recolor(Text.white, rgba(51, 255, 0, 0.9));\n        Text.terminal_shadow = undefined;\n\n        Text['#ead4aa'] = recolor(Text.white, '#ead4aa');\n        Text['#fee761'] = recolor(Text.white, '#fee761');\n        Text['#ff0044'] = recolor(Text.white, '#ff0044');\n    },\n\n    drawText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n        if (Array.isArray(text)) {\n            for (let block of text) {\n                Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, scale, font, shadow);\n            }\n            return;\n        }\n\n        for (let idx = 0; idx < text.length; idx++) {\n            let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n            let k = (c - 0) * (CHAR_WIDTH);\n            if (shadow) {\n                ctx.drawImage(\n                    shadow,\n                    k % CHARSHEET_WIDTH,\n                    Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    u + 1,\n                    v,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n            }\n            ctx.drawImage(\n                font,\n                k % CHARSHEET_WIDTH,\n                Math.floor(k / CHARSHEET_WIDTH) * CHAR_HEIGHT,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                u,\n                v,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            u += CHAR_WIDTH * scale;\n        }\n    },\n\n    /*\n    drawRightText(ctx, text, u, v, scale = 1, font = Text.white, shadow) {\n        u -= Text.measureWidth(text, scale);\n        Text.drawText(ctx, text, u, v, scale, font, shadow);\n    },\n    */\n\n    measureWidth(text, scale = 1) {\n        return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n    },\n\n    splitParagraph(text, w, h) {\n        let cu = 0, cv = 0;\n        let next = () => ({ text: '', u: cu, v: cv });\n        let wip = next();\n        let list = [];\n\n        for (let c of text.split('')) {\n            let cWidth = Text.measureWidth(c, 1);\n            if (c === '\\n' || cu + cWidth > w) {\n                let saved = '';\n                if (c !== '\\n' && c !== ' ') {\n                    let space = wip.text.split(' ');\n                    if (space.length > 1) {\n                        saved = space.pop();\n                        wip.text = space.join(' ');\n                    }\n                }\n                if (wip.text.length > 0) list.push(wip);\n                cu = 0;\n                cv += (CHAR_HEIGHT);\n                wip = next();\n                if (saved.length > 0) {\n                    wip.text = saved;\n                    cu += Text.measureWidth(wip.text, 1);\n                }\n            } else {\n                cu += cWidth;\n            }\n            if (c !== '\\n') {\n                wip.text = wip.text + c;\n            }\n        }\n\n        if (wip.text.length > 0) list.push(wip);\n\n        return list.map(line => ({\n            ...line,\n            w: Text.measureWidth(line.text, 1),\n            h: CHAR_HEIGHT\n        }));\n    },\n\n    drawTextColRow(text, col, row) {\n        Text.drawText(Viewport.ctx, Text.splitParagraph(text, Viewport.width), col * CHAR_WIDTH, row * CHAR_HEIGHT, 1, Text.terminal, Text.terminal_shadow);\n    }\n};\n\n// Text utility functions\n\nfunction recolor(font, color) {\n    let canvas = createCanvas(font.width, font.height);\n    canvas.ctx.fillStyle = color;\n    canvas.ctx.fillRect(0, 0, font.width, font.height);\n    canvas.ctx.globalCompositeOperation = 'destination-in';\n    canvas.ctx.drawImage(font, 0, 0);\n    return canvas.canvas;\n}\n","// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nexport const zzfx=(...t)=>zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nexport const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e}\n\n// zzfxG() - the sound generator -- returns an array of sample data\nexport const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z}\n\n// zzfxV - global volume\nexport const zzfxV=.3\n\n// zzfxR - global sample rate\nexport const zzfxR=44100\n\n// zzfxX - the common audio context\nexport const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n// destination for zzfx and zzfxm sounds\nzzfx.destination_ = zzfxX.destination;\n","'use strict';\n\nimport { zzfxG, zzfxR } from './zzfx';\n\n/**\n * ZzFX Music Renderer v2.0.2 by Keith Clark\n */\n\n/**\n * @typedef Channel\n * @type {Array.<Number>}\n * @property {Number} 0 - Channel instrument\n * @property {Number} 1 - Channel panning (-1 to +1)\n * @property {Number} 2 - Note\n */\n\n/**\n * @typedef Pattern\n * @type {Array.<Channel>}\n */\n\n/**\n * @typedef Instrument\n * @type {Array.<Number>} ZzFX sound parameters\n */\n\n/**\n * Generate a song\n *\n * @param {Array.<Instrument>} instruments - Array of ZzFX sound paramaters.\n * @param {Array.<Pattern>} patterns - Array of pattern data.\n * @param {Array.<Number>} sequence - Array of pattern indexes.\n * @param {Number} [speed=125] - Playback speed of the song (in BPM).\n * @returns {Array.<Array.<Number>>} Left and right channel sample data.\n */\n\nexport const zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n    let instrumentParameters,\n        i,\n        j,\n        k,\n        note,\n        sample,\n        patternChannel,\n        notFirstBeat,\n        stop,\n        instrument,\n        pitch,\n        attenuation,\n        outSampleOffset,\n        sampleOffset,\n        nextSampleOffset,\n        sampleBuffer = [],\n        leftChannelBuffer = [],\n        rightChannelBuffer = [],\n        channelIndex = 0,\n        panning,\n        hasMore = 1,\n        sampleCache = {},\n        beatLength = ((zzfxR / BPM) * 60) >> 2;\n\n    // for each channel in order until there are no more\n    for (; hasMore; channelIndex++) {\n        // reset current values\n        sampleBuffer = [(hasMore = notFirstBeat = pitch = outSampleOffset = 0)];\n\n        // for each pattern in sequence\n        sequence.map((patternIndex, sequenceIndex) => {\n            // get pattern for current channel, use empty 1 note pattern if none found\n            patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n            // check if there are more channels\n            hasMore |= !!patterns[patternIndex][channelIndex];\n\n            // get next offset, use the length of first channel\n            nextSampleOffset =\n                outSampleOffset +\n                (patterns[patternIndex][0].length - 2 - !notFirstBeat) *\n                    beatLength;\n\n            // for each beat in pattern, plus one extra if end of sequence\n            for (\n                i = 2, k = outSampleOffset;\n                i <\n                patternChannel.length + (sequenceIndex == sequence.length - 1);\n                notFirstBeat = ++i\n            ) {\n                // <channel-note>\n                note = patternChannel[i];\n\n                // stop if different instrument or new note\n                stop = (instrument != (patternChannel[0] || 0)) | note | 0;\n\n                // fill buffer with samples for previous beat, most cpu intensive part\n                for (\n                    j = 0;\n                    j < beatLength && notFirstBeat;\n                    // fade off attenuation at end of beat if stopping note, prevents clicking\n                    j++ > beatLength - 99 && stop\n                        ? (attenuation += (attenuation < 1) / 99)\n                        : 0\n                ) {\n                    // copy sample to stereo buffers with panning\n                    sample =\n                        ((1 - attenuation) * sampleBuffer[sampleOffset++]) /\n                            2 || 0;\n                    leftChannelBuffer[k] =\n                        (leftChannelBuffer[k] || 0) + sample * panning - sample;\n                    rightChannelBuffer[k] =\n                        (rightChannelBuffer[k++] || 0) +\n                        sample * panning +\n                        sample;\n                }\n\n                // set up for next note\n                if (note) {\n                    // set attenuation\n                    attenuation = note % 1;\n                    panning = patternChannel[1] || 0;\n                    if ((note |= 0)) {\n                        // get cached sample\n                        sampleBuffer = sampleCache[\n                            [\n                                (instrument =\n                                    patternChannel[(sampleOffset = 0)] || 0),\n                                note\n                            ]\n                        ] =\n                            sampleCache[[instrument, note]] ||\n                            // add sample to cache\n                            ((instrumentParameters = [\n                                ...instruments[instrument]\n                            ]),\n                            (instrumentParameters[2] *=\n                                2 ** ((note - 12) / 12)),\n                            zzfxG(...instrumentParameters));\n                    }\n                }\n            }\n\n            // update the sample offset\n            outSampleOffset = nextSampleOffset;\n        });\n    }\n\n    return [leftChannelBuffer, rightChannelBuffer];\n};\n","export const ObliqueMystique = [[[1.3,0,23,,,.2,3,5],[1.5,0,4e3,,,.03,2,1.25,,,,,.02,6.8,-.3,,.5],[.7,0,2100,,,.2,3,3,,,-400,,,2],[,0,655,,,.11,2,1.65,,,,,,3.8,-.1,.1]],[[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,],[,.6,,,,,13,,18,,19,,,,,,,,19,,18,,,,16,,,,13,,,,,,,,,,13,,18,,19,,,,,,,,18,19,18,,,,13,14,13,,16,,18,,19,,],[3,-1,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,13,13,13,13]],[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,]]],[1,1,0,0,0,0,1,0],,]\n","'use strict';\n\nimport { zzfx, zzfxP, zzfxX } from './lib/zzfx';\nimport { zzfxM } from './lib/zzfxm';\nimport { ObliqueMystique } from './songs/ObliqueMystique';\n\nexport const Audio = {\n    init() {\n        Audio.readyToPlay = false;\n\n        Audio.ctx = zzfxX;\n        Audio.gain_ = Audio.ctx.createGain();\n        Audio.gain_.connect(Audio.ctx.destination);\n        zzfx.destination_ = Audio.gain_;\n\n        Audio.shotgun = [,0.01,140,0.01,0.02,0.45,4,2.42,0.1,-0.1,,,,1.2,,0.3,0.04,0.8,0.02];\n        Audio.page = [,,1233,,.01,.2,1,1.43,,,539,.1,,,,,,.51,.03,.01];\n        Audio.shellReload = [,,68,0.01,,0.14,1,1.53,7.5,0.1,50,0.02,-0.01,-0.2,0.1,0.2,,0.47,0.01];\n        Audio.damage = [,,391,,.19,.01,2,.54,-4,20,,,,,,,.02,.9];\n        Audio.alarm = [,,970,.12,.25,.35,,.39,8.1,,10,.1,.2,,.1,,,.6,.09,.13];\n        // [,,961,.05,.06,1.17,1,4.67,.8,,,,,.8,-0.8,.1,.49,.62,.09];\n        Audio.victory = [,,454,.06,.86,.71,2,.63,-0.7,1.7,-83,.09,.27,.3,.2,,.18,.95,.02,.02];\n        Audio.song = zzfxM(...ObliqueMystique);\n\n        // Save our background music in os13k, for fun!\n        //localStorage[`OS13kMusic,${TITLE} - Oblique Mystique`] = JSON.stringify(ObliqueMystique);\n    },\n\n    update() {\n        if (!Audio.readyToPlay) return;\n\n        if (!Audio.musicPlaying) {\n            //Audio.bgmusicnode = zzfxP(...Audio.song);\n            //Audio.bgmusicnode.loop = true;\n            Audio.musicPlaying = true;\n        }\n    },\n\n    play(sound) {\n        if (!Audio.readyToPlay) return;\n        zzfx(...sound);\n    },\n\n    // It's important we do pausing and unpausing as specific events and not in general update(),\n    // because update() is triggered by the animation frame trigger which does not run if the\n    // page is not visible. (So, if you want the music to fade in the background, for example,\n    // that's not helpful if it won't work because you aren't looking at the page!)\n\n    pause() {\n        Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n    },\n\n    unpause() {\n        Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n    }\n};\n","import { SCREEN_WIDTH, SCREEN_HEIGHT } from './Constants';\nimport { Viewport } from './Viewport';\nimport { Text } from './Text';\n\nexport const Screen = {\n    init() {\n        this.screen = [];\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            this.screen.push([]);\n        }\n        this.clear();\n    },\n\n    clear() {\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            for (let x = 0; x < SCREEN_WIDTH; x++) {\n                this.screen[y][x] = ' ';\n            }\n        }\n    },\n\n    write(x, y, text) {\n        if (!Array.isArray(text)) text = [text];\n\n        for (let j = 0; j < text.length; j++) {\n            for (let i = 0; i < text[j].length; i++) {\n                this.screen[y + j][x + i] = text[j][i];\n            }\n        }\n    },\n\n    drawToViewport() {\n        let text = this.screen.map(row => row.join('')).join('\\n');\n\n        Text.drawText(\n            Viewport.ctx,\n            Text.splitParagraph(text, Viewport.width),\n            0, 0,\n            1,\n            Text.terminal, Text.terminal_shadow\n        );\n    }\n};\n","import { Screen } from './Screen';\nimport { game } from './Game';\nimport { PLAY_SPEEDS } from './Constants';\nimport { Input } from './Input';\n\nexport class MainMenu {\n    constructor() {\n    }\n\n    update() {\n        switch (Input.lastKeyPressed().toUpperCase()) {\n            case 'P':\n                Input.consume();\n                game.startSession();\n                break;\n            case 'L':\n                Input.consume();\n                game.playSpeed = (game.playSpeed + 1) % PLAY_SPEEDS.length;\n                break;\n            case 'I':\n                Input.consume();\n                game.showInstructions();\n                break;\n            case 'E':\n                Input.consume();\n                game.showInstructions();\n                break;\n        }\n    }\n\n    draw() {\n        let version = '?';\n        let terminal = '?';\n\n        let highScores = [\n            `1) 6000  Bob`,\n            `2) 6000  Tom`,\n            `3) 4000  Wayne`,\n            ``,\n            ``\n        ];\n\n        Screen.clear();\n        Screen.write(0, 0, [\n            `               LL                     dd       dd`,\n            `               LL                     dd       dd                      tm`,\n            `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n            `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n            ``,\n            `                                       Version:    ${version}`,\n            `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n            `10970 Ashton Ave.  Suite 312           Play speed: ${game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n            `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n            `                                       Stop = Other`,\n            ``,\n            `P = Play game                          High Scores`,\n            `L = Change level of difficulty         ${highScores[0]}`,\n            `C = Configure Ladder                   ${highScores[1]}`,\n            `I = Instructions                       ${highScores[2]}`,\n            `E = Exit Ladder                        ${highScores[3]}`,\n            `                                       ${highScores[4]}`,\n            ``,\n            `Enter one of the above:`\n        ]);\n    }\n}\n","import { Screen } from './Screen';\nimport { game } from './Game';\nimport { Input } from './Input';\n\nexport class InstructionsMenu {\n    constructor() {\n    }\n\n    update() {\n        if (Input.lastKeyPressed().toUpperCase() !== '') {\n            Input.consume();\n            game.showMainMenu();\n        }\n    }\n\n    draw() {\n        Screen.clear();\n        Screen.write(0, 0, [\n            `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n            `dark corridors never before seen by human eyes and find hidden`,\n            `treasures and riches.`,\n            ``,\n            `You control Lad by typing the direction buttons and jumping by`,\n            `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n            `You must find and grasp the treasures (shown as $) BEFORE the`,\n            `bonus time runs out.`,\n            ``,\n            `A new Lad will be awarded for every 10,000 points.`,\n            `Extra points are awarded for touching the gold`,\n            `statues (shown as &).  You will receive the bonus time points`,\n            `that are left when you have finished the level.`,\n            ``,\n            `Type an ESCape to pause the game.`,\n            ``,\n            `Remember, there is more than one way to skin a cat. (Chum)`,\n            ``,\n            `Good luck Lad.`,\n            ``,\n            ``,\n            ``,\n            `Type RETURN to return to main menu:`\n        ]);\n    }\n}\n","\n// This is our list of STATES. Each entity starts out in one of these states and can move between\n// them based on events that happen in the game. (Note that some of these are directions, but\n// since an entity keeps moving in the direction it is going unless stopped, directions are\n// states in this game.)\nexport const State = {\n    STOPPED:    1,         // Standing still\n    UP:         2,         // Moving up (player only)\n    LEFT:       3,         // Moving left\n    DOWN:       4,         // Moving down\n    RIGHT:      5,         // Moving right\n    FALLING:    6,         // Falling\n    START_JUMP: 7,         // About to start a jump (player only)\n    JUMP_LEFT:  8,         // Jumping left (player only)\n    JUMP_RIGHT: 9,         // Jumping right (player only)\n    JUMP_UP:    10,        // Jumping straight up (player only)\n    DYING:      11,        // Dying (used as a death animation)\n    DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n};\n\nexport const JUMP_FRAMES = {\n    [State.JUMP_RIGHT]: [\n        { x: 1, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 0 },\n        { x: 1, y: 0 },\n        { x: 1, y: 1 },\n        { x: 1, y: 1 }\n    ],\n    [State.JUMP_LEFT]: [\n        { x: -1, y: -1 },\n        { x: -1, y: -1 },\n        { x: -1, y: 0 },\n        { x: -1, y: 0 },\n        { x: -1, y: 1 },\n        { x: -1, y: 1 }\n    ],\n    [State.JUMP_UP]: [\n        { x: 0, y: -1 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 },\n        { x: 0, y: 1 },\n        { x: 0, y: 1 },\n        { x: 0, y: 0 }\n    ],\n};\n","import { State, JUMP_FRAMES } from './Behavior';\nimport { LEVEL_COLS } from './Constants';\n\nexport class Entity {\n    applyMovement(field) {\n        let repeat = false;\n\n        // This method contains generic \"movement\" application for all entities, including\n        // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n        // work the same for both.\n        //\n        // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n        // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n        if (this.nextState) {\n            switch (this.state) {\n                case State.STOPPED:\n                case State.LEFT:\n                case State.RIGHT:\n                    if ([State.LEFT, State.RIGHT, State.STOPPED].includes(this.nextState)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    }\n                    break;\n\n                case State.UP:\n                case State.DOWN:\n                    // Normal\n                    if ([State.LEFT, State.RIGHT].includes(this.nextState)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    }\n                    break;\n            }\n        }\n\n        if (this.nextState === State.START_JUMP) {\n            // Special case: the user wants to jump!\n            //\n            // If the player is standing on something solid, we initiate a jump based on the current\n            // movement of the player. If not, we (sort of) ignore the request to jump... although\n            // it does subtly change the behavior upon landing.\n            if (field.onSolid(this.x, this.y)) {\n                if (this.state === State.STOPPED || this.state === State.FALLING) {\n                    this.state = State.JUMP_UP;\n                    this.jumpStep = 0;\n                    this.nextState = State.STOPPED;\n                } else if (this.state === State.LEFT || this.state === State.JUMP_LEFT) {\n                    this.state = State.JUMP_LEFT;\n                    this.jumpStep = 0;\n                    this.nextState = State.LEFT;\n                } else if (this.state === State.RIGHT || this.state === State.JUMP_RIGHT) {\n                    this.state = State.JUMP_RIGHT;\n                    this.jumpStep = 0;\n                    this.nextState = State.RIGHT;\n                }\n            } else {\n                if (this.state === State.JUMP_UP || this.state === State.FALLING) {\n                    this.nextState = State.STOPPED;\n                } else if (this.state === State.JUMP_RIGHT) {\n                    this.nextState = State.RIGHT;\n                } else if (this.state === State.JUMP_LEFT) {\n                    this.nextState = State.LEFT;\n                }\n            }\n        } else if (this.nextState === State.UP && field.isLadder(this.x, this.y)) {\n            // Special case: the user wants to go up!\n            //\n            // If the user is on a ladder, we can start ascending. Note that if the user is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap UP a little before reaching the ladder.\n            this.state = State.UP;\n            this.nextState = undefined;\n        } else if (this.nextState === State.DOWN && (field.isLadder(this.x, this.y) || field.isLadder(this.x, this.y + 1))) {\n            // Special case: the player wants to go down!\n            //\n            // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n            this.state = State.DOWN;\n            this.nextState = undefined;\n        }\n\n        switch (this.state) {\n            case State.LEFT:\n                if (!field.onSolid(this.x, this.y)) {\n                    this.nextState = State.LEFT;\n                    this.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(this.x - 1, this.y)) {\n                    this.x--;\n                } else {\n                    this.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.RIGHT:\n                if (!field.onSolid(this.x, this.y)) {\n                    this.nextState = State.RIGHT;\n                    this.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(this.x + 1, this.y)) {\n                    this.x++;\n                } else {\n                    this.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.UP:\n                if (field.canClimbUp(this.x, this.y - 1)) {\n                    this.y--;\n                } else {\n                    this.state = State.STOPPED;\n                }\n                break;\n\n            case State.DOWN:\n                if (field.canClimbDown(this.x, this.y + 1)) {\n                    this.y++;\n                } else {\n                    this.state = State.STOPPED;\n                }\n                break;\n\n            case State.JUMP_RIGHT:\n            case State.JUMP_LEFT:\n            case State.JUMP_UP:\n                let step = JUMP_FRAMES[this.state][this.jumpStep];\n                console.log(['jump', this.state, this.jumpStep, step]);\n                if ((this.x + step.x >= 0) && (this.x + step.x < LEVEL_COLS)) {\n                    let terrain = field.layout[this.y + step.y][this.x + step.x];\n                    if (['=', '|', '-'].includes(terrain)) {\n                        if (field.onSolid(this.x, this.y)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        } else {\n                            switch (this.state) {\n                                case State.JUMP_RIGHT:\n                                    this.nextState = State.RIGHT;\n                                    break;\n                                case State.JUMP_LEFT:\n                                    this.nextState = State.LEFT;\n                                    break;\n                                case State.JUMP_UP:\n                                    this.nextState = State.UP;\n                                    break;\n                            }\n                            this.state = State.FALLING;\n                        }\n                    } else if (terrain === 'H') {\n                        this.x += step.x;\n                        this.y += step.y;\n                        this.state = State.STOPPED;\n                        this.nextState = undefined;\n                    } else {\n                        this.x += step.x;\n                        this.y += step.y;\n                        this.jumpStep++;\n\n                        if (this.jumpStep >= JUMP_FRAMES[this.state].length) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                    }\n                } else {\n                    if (field.onSolid(this.x, this.y)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    } else {\n                        this.state = State.FALLING;\n                        this.nextState = State.STOPPED;\n                    }\n                }\n                break;\n\n            case State.FALLING:\n                if (field.onSolid(this.x, this.y)) {\n                    this.state = this.nextState || State.STOPPED;\n                } else {\n                    this.y++;\n                }\n                break;\n        }\n\n        // If we were attempting to move somewhere and realized we should be falling instead,\n        // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n        // frame\" from the user's point of view.\n        if (repeat) return this.applyMovement(field);\n    }\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { State, JUMP_FRAMES } from './Behavior';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport { Entity } from './Entity';\nimport { Screen } from './Screen';\nimport { game } from './Game';\n\nconst DEATH_FRAMES = ['p', 'p', 'b', 'd', 'd', 'q', 'p', 'p', 'b', 'd', 'd', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n/**\n * Player\n */\nexport class Player extends Entity {\n    constructor(x, y) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.state = State.STOPPED;\n        this.nextState = State.STOPPED;\n        this.jumpStep = 0;\n        this.deathStep = 0;\n        console.log('player constructed', x, y);\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        let action = Input.lastActionPressed();\n\n        if (action === Input.Action.LEFT) {\n            this.nextState = State.LEFT;\n            Input.consume();\n        } else if (action === Input.Action.RIGHT) {\n            this.nextState = State.RIGHT;\n            Input.consume();\n        } else if (action === Input.Action.UP) {\n            this.nextState = State.UP;\n            Input.consume();\n        } else if (action === Input.Action.DOWN) {\n            this.nextState = State.DOWN;\n            Input.consume();\n        } else if (action === Input.Action.JUMP) {\n            this.nextState = State.START_JUMP;\n            Input.consume();\n        }\n\n        return this.applyMovement(field);\n    }\n\n    draw() {\n        let char = 'g';\n\n        switch (this.state) {\n            case State.RIGHT:\n            case State.JUMP_RIGHT:\n            case State.UP:\n            case State.DOWN:\n                char = 'p';\n                break;\n\n            case State.LEFT:\n            case State.JUMP_LEFT:\n                char = 'q';\n                break;\n\n            case State.FALLING:\n                char = 'b';\n                break;\n\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n\n            case State.DEAD:\n                char = '_';\n                break;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n}\n","import { Text } from './Text';\nimport { State } from './Behavior';\nimport { LEVEL_COLS } from './Constants';\nimport { Entity } from './Entity';\nimport { Screen } from './Screen';\nimport { game } from './Game';\n\nconst DEATH_FRAMES = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\nexport class Rock extends Entity {\n    constructor(dispenser) {\n        super();\n        this.x = dispenser.x;\n        this.y = dispenser.y;\n        this.state = State.FALLING;\n        this.nextState = undefined;\n        this.deathStep = 0;\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        if (this.state === State.STOPPED) {\n            if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                this.nextState = State.RIGHT;\n            } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                this.nextState = State.LEFT;\n            } else {\n                this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n            }\n        }\n\n        if (this.x === 0 && this.state === State.LEFT) {\n            this.state = State.RIGHT;\n        }\n\n        if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n            this.state = State.LEFT;\n        }\n\n        if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n            this.nextState = State.FALLING;\n        }\n\n        if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n            let r = Math.floor(Math.random() * 4);\n            this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n        }\n\n        if (field.isEater(this.x, this.y)) {\n            this.state = State.DYING;\n            return;\n        }\n\n        this.applyMovement(field);\n    }\n\n    draw() {\n        let char = 'o';\n\n        switch (this.state) {\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n            case State.DEAD:\n                return;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n}\n","import { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport LevelData from '../levels/levels.json';\n\nexport const Level = {\n    LEVELS: LevelData,\n    LEVEL_COUNT: LevelData.length,\n\n    load(levelNumber) {\n        console.log(Level.LEVELS);\n        // As the player keeps playing, level numbers will loop around to beginning\n        let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n        if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n        // Perform some sanity checks on the level layout and extract useful info\n        // like player start position and dispenser positions etc.\n\n        let layout = level.layout.map(row => row.split(''));\n        let dispensers = [];\n        let player;\n\n        // Sanity check\n        layout = layout.slice(0, LEVEL_ROWS);\n\n        for (let y = 0; y < LEVEL_ROWS; y++) {\n            // Sanity checks\n            if (!layout[y]) layout[y] = [];\n            layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n            for (let x = 0; x < LEVEL_COLS; x++) {\n                // Sanity check\n                if (!layout[y][x]) layout[y][x] = ' ';\n\n                // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                // to construct a list of them, but they are permanent parts of the layout, so we can\n                // leave them as part of the level and draw them normally.\n\n                if (layout[y][x] === 'V') {\n                    dispensers.push({ x, y });\n                }\n\n                // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                // can pick up the treasures and statues. That's why for these elements, we add them to\n                // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                // top of the layout.\n\n                if (layout[y][x] === 'p') {\n                    layout[y][x] = ' ';\n                    player = { x, y };\n                }\n\n                // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                // layout. The Lad interacts with them, but we can handle that during our movement checks.\n            }\n        }\n\n        return {\n            name: level.name,\n            time: level.time,\n            maxRocks: level.maRrocks,\n            layout,\n            dispensers,\n            player\n        };\n    }\n};\n","import { Text } from './Text';\nimport { Player } from './Player';\nimport { Rock } from './Rock';\nimport { LEVEL_COLS, LEVEL_ROWS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE, MAX_ROCKS, DISPENSER_MAX_ROCKS, HIDDEN_FACTOR_MAX_ROCKS } from './Constants';\nimport { game } from './Game';\nimport { State } from './Behavior';\nimport { Screen } from './Screen';\nimport { Level } from './Level';\n\n/**\n * Field\n *\n * The \"field\" represents the current level, or, \"playing field\". A new playing field is created\n * every time you start a level, so we attach everything about the currently played level to\n * the field -- positions of treasure, the player, victory conditions, etc.\n */\nexport class Field {\n    constructor(levelNumber) {\n        let level = Level.load(levelNumber);\n\n        // Store level-related info\n        this.layout = level.layout;\n        this.dispensers = level.dispensers;\n        this.time = 2000;\n\n        // Initialize player\n        this.player = new Player(level.player.x, level.player.y);\n\n        // Initialize list of rocks (empty)\n        this.rocks = [];\n\n        // Not winning yet (while \"winning\" the player stops moving and we add up the bonus score)\n        this.winning = false;\n    }\n\n    update(moveFrame) {\n        if (this.winning) {\n            game.session.updateScore(SCORE_TREASURE);\n            this.time -= 10;\n            if (this.time < 0) game.session.startNextLevel();\n            return;\n        }\n\n        if (this.time > 0 && moveFrame) this.time--;\n\n        let oldX = this.player.x, oldY = this.player.y;\n\n        // Move player based on user input\n        this.player.update(this, moveFrame);\n\n        if (oldX !== this.player.x && oldY === this.player.y) {\n            if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                this.layout[oldY + 1][oldX] = ' ';\n            }\n        }\n\n        // Check if player should be dead (before moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n        // Move rocks\n        for (let rock of this.rocks) rock.update(this, moveFrame);\n\n        // Check if player should be dead (after moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(game.session);\n\n        if (moveFrame) {\n            // Collect statues\n            if (this.isStatue(this.player.x, this.player.y)) {\n                this.layout[this.player.y][this.player.x] = ' ';\n                game.session.updateScore(SCORE_STATUE);\n            }\n\n            // Collect treasure (ends the current level)\n            if (this.isTreasure(this.player.x, this.player.y)) {\n                this.winning = true;\n                return;\n            }\n\n            // Interact with trampolines\n            if (this.isTrampoline(this.player.x, this.player.y)) {\n                switch (Math.floor(Math.random() * 5)) {\n                    case 0:\n                        this.player.state = State.LEFT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 1:\n                        this.player.state = State.RIGHT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 2:\n                        this.player.state = State.JUMP_UP;\n                        this.player.nextState = undefined;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 3:\n                        this.player.state = State.JUMP_LEFT;\n                        this.player.nextState = State.LEFT;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 4:\n                        this.player.state = State.JUMP_RIGHT;\n                        this.player.nextState = State.RIGHT;\n                        this.player.jumpStep = 0;\n                        break;\n                }\n            }\n\n            // Kill dead rocks\n            this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n            // Dispense new rocks\n            if (this.rocks.length < this.maxRocks() && Math.random() > 0.91) {\n                let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                this.rocks.push(new Rock(dispenser));\n            }\n\n            // Kill player\n            if (this.player.state === State.DEAD) {\n                game.session.restartLevel();\n            }\n        }\n    }\n\n    draw() {\n        // Draw layout\n        Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n        // Draw player\n        this.player.draw();\n\n        // Draw rocks\n        this.rocks.forEach(rock => rock.draw());\n    }\n\n    onSolid(x, y) {\n        return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n    }\n\n    emptySpace(x, y) {\n        if (x < 0 || x >= LEVEL_COLS) {\n            return false;\n        } else {\n            return !['|', '='].includes(this.layout[y][x]);\n        }\n    }\n\n    isLadder(x, y) {\n        return this.layout[y][x] === 'H';\n    }\n\n    isStatue(x, y) {\n        return this.layout[y][x] === '&';\n    }\n\n    isTreasure(x, y) {\n        return this.layout[y][x] === '$';\n    }\n\n    isTrampoline(x, y) {\n        return this.layout[y][x] === '.';\n    }\n\n    isEater(x, y) {\n        return this.layout[y][x] === '*';\n    }\n\n    isFire(x, y) {\n        return this.layout[y][x] === '^';\n    }\n\n    isDisappearingFloor(x, y) {\n        return this.layout[y][x] === '-';\n    }\n\n    canClimbUp(x, y) {\n        if (y < 0) return false;\n        return ['H', '&', '$'].includes(this.layout[y][x]);\n    }\n\n    canClimbDown(x, y) {\n        return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n    }\n\n    checkIfPlayerShouldDie() {\n        if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n        if (this.isFire(this.player.x, this.player.y)) {\n            this.player.state = State.DYING;\n        }\n\n        if (this.time <= 0) {\n            this.player.state = State.DYING;\n        }\n\n        for (let i = 0; i < this.rocks.length; i++) {\n            if (this.player.x === this.rocks[i].x) {\n                if (this.player.y === this.rocks[i].y) {\n                    this.player.state = State.DYING;\n                    this.rocks.splice(i, 1);\n                    break;\n                } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                    game.session.updateScore(SCORE_ROCK);\n                } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                    game.session.updateScore(SCORE_ROCK);\n                }\n            }\n        }\n    }\n\n    maxRocks() {\n        return MAX_ROCKS + this.dispensers.length * DISPENSER_MAX_ROCKS + game.session.hiddenFactor() * HIDDEN_FACTOR_MAX_ROCKS;\n    }\n}\n","\nimport { PLAY_SPEEDS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE, HIDDEN_FACTOR_PLAY_SPEED, HIDDEN_FACTOR_MAX_ROCKS } from './Constants';\nimport { Field } from './Field';\nimport { Screen } from './Screen';\nimport { Input } from './Input';\nimport { game } from './Game';\nimport { Level } from './Level';\n\nexport class Session {\n    constructor() {\n        this.score = 0;\n        this.levelNumber = 0;\n        this.levelCycle = 1;\n        this.lives = 5;\n        this.nextLife = 100;\n    }\n\n    update() {\n        // The overall game loop runs at a fixed 60 frames per second, but the Play Speed selected\n        // at the main menu controls how fast the game runs. To accomplish that, we do a second\n        // time check here, and unless this is a \"move frame\", we skip all the logic related to\n        // moving entities.\n        //\n        // This setup allows us to have things like death animations look the same regardless of\n        // the Play Speed selected.\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n        let moveFrame = false;\n\n        if (now - lastFrame >= (this.nextFrame || 0)) {\n            moveFrame = true;\n            this.nextFrame = now + this.moveFrameMillisecondDelay();\n        }\n\n        if (!this.field) this.field = new Field(this.levelNumber);\n        this.field.update(moveFrame);\n\n        let recentKeystrokes = Input.history.map(event => event.key).join('').toUpperCase();\n\n        if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n            Input.consume();\n            this.field = undefined;\n            this.levelNumber = parseInt(RegExp.$1, 10);\n        } else if (recentKeystrokes.includes(\"IDDQD\")) {\n            Input.consume();\n            console.log(\"god mode\");\n        } else if (recentKeystrokes.includes(\"IDKFA\")) {\n            this.field.winning = true;\n            Input.consume();\n        }\n    }\n\n    draw() {\n        Screen.clear();\n\n        if (this.field) this.field.draw();\n\n        let stat = [\n            String(this.lives).padStart(2, ' '),\n            String(this.levelNumber + 1).padStart(2, ' '),\n            String(this.score).padStart(6, ' '),\n            this.field ? String(this.field.time).padStart(4, ' ') : ''\n        ];\n        Screen.write(0, 21, `Lads   ${stat[0]}     Level   ${stat[1]}      Score   ${stat[2]}      Bonus time   ${stat[3]}`);\n    }\n\n    restartLevel() {\n        this.field = undefined;\n    }\n\n    startNextLevel() {\n        this.field = undefined;\n        this.levelNumber++;\n        if (this.levelNumber % Level.LEVEL_COUNT === 0) {\n            this.levelCycle++;\n        }\n    }\n\n    updateScore(scoreType) {\n        switch (scoreType) {\n            case SCORE_ROCK:\n                this.score += 200;\n                break;\n            case SCORE_STATUE:\n                this.score += this.field.time;\n                break;\n            case SCORE_TREASURE:\n                // Added repeatedly after winning the level\n                this.score += 10;\n                break;\n        }\n    }\n\n    hiddenFactor() {\n        // This \"hidden\" difficulty level increases steadily as the player completes a\n        // level cycle (every time they reach the Easy Street level). This makes the\n        // game slowly harder as you keep playing.\n        return Math.floor(this.levelNumber / Level.LEVEL_COUNT);\n    }\n\n    moveFrameMillisecondDelay() {\n        // Regardless of play speed, the game gets slightly faster every level cycle\n        return Math.floor(PLAY_SPEEDS[game.playSpeed] - this.hiddenFactor() * HIDDEN_FACTOR_PLAY_SPEED * PLAY_SPEEDS[game.playSpeed]);\n    }\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { Viewport } from './Viewport';\nimport { GAME_WIDTH, GAME_HEIGHT, PLAY_SPEEDS } from './Constants';\nimport { rgba, createCanvas, clamp, partialText, uv2xy, xy2qr } from './Util';\nimport { Audio } from './Audio';\nimport { ScreenShake } from './ScreenShake';\nimport { Screen } from './Screen';\nimport { MainMenu } from './MainMenu';\nimport { InstructionsMenu } from './InstructionsMenu';\nimport { Session } from './Session';\n\n/**\n * Game state.\n */\nexport class Game {\n    init() {\n        Sprite.loadSpritesheet(async () => {\n            await Viewport.init();\n            await Screen.init();\n            await Sprite.init();\n            await Text.init();\n            await Input.init();\n            await Audio.init();\n\n            window.addEventListener('blur', () => this.pause());\n            window.addEventListener('focus', () => this.unpause());\n\n            this.start();\n        });\n    }\n\n    start() {\n        this.frame = 0;\n        this.playSpeed = 0;\n        this.menu = new MainMenu();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    }\n\n    onFrame() {\n        let fps = 60;\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n\n        // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n        // 60 times per second in most cases. However, it can be higher (the browser may\n        // respect the user's refresh settings, which could be 120Hz or higher for example).\n        //\n        // It's safest to have a check like we do here, where we explicitly limit the number\n        // of update calls to 60 times per second.\n        if (now - lastFrame >= 1000 / fps) {\n            this.update();\n            this.lastFrame = now;\n        }\n\n        Viewport.resize();\n        this.draw();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    }\n\n    update() {\n        // Pull in frame by frame button pushes / keypresses / mouse clicks\n        Input.update();\n\n        // perform any per-frame audio updates\n        Audio.update();\n\n        if (this.menu) {\n            this.menu.update();\n        }\n\n        if (this.session) this.session.update();\n    }\n\n    draw() {\n        // Reset canvas transform and scale\n        Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n        Viewport.ctx.fillStyle = 'black';\n        Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n        Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n        if (this.session) this.session.draw();\n        if (this.menu) this.menu.draw();\n\n        Screen.drawToViewport();\n\n        return;\n\n        // Render screenshakes (canvas translation)\n        let shakeX = 0, shakeY = 0;\n        this.screenshakes.forEach(shake => {\n            shakeX += shake.x;\n            shakeY += shake.y;\n        });\n        Viewport.ctx.translate(shakeX, shakeY);\n\n        //Maze.draw();\n\n        for (let entity of this.entities) {\n            if (!entity.z || entity.z < 100) entity.draw();\n        }\n\n        Viewport.ctx.drawImage(\n            Sprite.shadow.img,\n            0, 0,\n            500, 500,\n            -this.shadowOffset, -this.shadowOffset,\n            Viewport.width + this.shadowOffset * 2,\n            Viewport.height + this.shadowOffset * 2\n        );\n    }\n\n    pause() {\n        if (this.paused) return;\n        this.paused = true;\n        Audio.pause();\n    }\n\n    unpause() {\n        if (!this.paused) return;\n        this.paused = false;\n        Audio.unpause();\n    }\n\n    startSession() {\n        this.menu = undefined;\n        this.session = new Session();\n    }\n\n    showMainMenu() {\n        this.menu = new MainMenu();\n        this.session = undefined;\n    }\n\n    showInstructions() {\n        this.menu = new InstructionsMenu();\n        this.session = undefined;\n    }\n}\n\nexport const game = new Game();\n","import { game } from './Game';\n\n/**\n * Create and launch game.\n */\ngame.init();\n"]}