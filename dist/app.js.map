{"version":3,"sources":["app.js","../src/js/Util.js","../src/js/SpriteSheet-gen.js","../src/js/Constants.js","../src/js/Viewport.js","../src/js/Sprite.js","../src/js/Input.js","../src/js/Text.js","../src/js/lib/zzfx.js","../src/js/lib/zzfxm.js","../src/js/songs/ObliqueMystique.js","../src/js/Audio.js","../src/js/Screen.js","../src/js/MainMenu.js","../src/js/InstructionsMenu.js","../src/js/Behavior.js","../src/js/Entity.js","../src/js/Player.js","../src/js/Rock.js","../src/js/Level.js","../src/js/PlayingField.js","../src/js/GameSession.js","../src/js/Game.js","../src/js/index.js"],"names":["rgba","r","g","b","a","createCanvas","width","height","canvas","document","createElement","ctx","getContext","SpriteSheet","PLAY_SPEEDS","Viewport","[object Object]","getElementById","resize","force","dpi","window","devicePixelRatio","clientWidth","clientHeight","dpiWidth","dpiHeight","scale","Math","min","ceil","center","u","v","imageSmoothingEnabled","style","cursor","Sprite","cb","image","Image","onload","src","sheet","data","anchor","font","source","w","h","img","x","y","initDynamicSprite","sliceCanvas","drawImage","loadCacheSlice","sprite","pos","rotation","this","viewportSprite2uv","save","translate","rotate","restore","Game","camera","Action","UP","DOWN","LEFT","RIGHT","JUMP","STOP","PAUSE","RESUME","Input","KeyMapping","KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space","Escape","Enter","buffer","history","addEventListener","event","entry","at","Date","getTime","key","code","action","push","console","log","now","filter","length","undefined","clearHistory","UNICODE_CHAR_MAP","join","split","reduce","map","char","idx","Text","white","border","margin","terminal","recolor","terminal_shadow","glow","cols","rows","temp","clearRect","bakeFontGlow","text","Array","isArray","block","drawText","c","charCodeAt","k","floor","measureWidth","sum","cu","cv","next","wip","list","cWidth","saved","space","pop","line","color","fillStyle","fillRect","globalCompositeOperation","zzfx","t","zzfxP","zzfxG","e","zzfxX","createBufferSource","f","createBuffer","zzfxR","d","i","getChannelData","set","connect","destination_","start","q","F","z","A","l","B","G","m","C","p","PI","H","I","D","random","Z","E","n","J","K","sin","max","tan","abs","round","zzfxV","top","AudioContext","webkitAudioContext","destination","ObliqueMystique","Audio","readyToPlay","gain_","createGain","shotgun","page","shellReload","damage","alarm","victory","song","instruments","patterns","sequence","BPM","instrumentParameters","j","note","sample","patternChannel","notFirstBeat","stop","instrument","pitch","attenuation","outSampleOffset","sampleOffset","nextSampleOffset","panning","sampleBuffer","leftChannelBuffer","rightChannelBuffer","channelIndex","hasMore","sampleCache","beatLength","patternIndex","sequenceIndex","zzfxM","musicPlaying","sound","gain","linearRampToValueAtTime","currentTime","Screen","screen","clear","row","splitParagraph","MainMenu","lastKey","toUpperCase","consume","startSession","playSpeed","showInstructions","highScores","write","InstructionsMenu","showMainMenu","State","STOPPED","FALLING","START_JUMP","JUMP_LEFT","JUMP_RIGHT","JUMP_UP","DYING","DEAD","JUMP_FRAMES","Entity","field","repeat","nextState","state","includes","onSolid","jumpStep","isLadder","emptySpace","canClimbUp","canClimbDown","step","terrain","layout","applyMovement","DEATH_FRAMES","Player","super","deathStep","moveFrame","lastAction","Rock","dispenser","LEVEL_COLS","isEater","LevelData","name","time","maxRocks","rocks","Level","LEVELS","LEVEL_COUNT","levelNumber","level","Error","player","dispensers","slice","maRrocks","PlayingField","load","winning","session","updateScore","startNextLevel","oldX","oldY","update","isDisappearingFloor","checkIfPlayerShouldDie","rock","isStatue","isTreasure","isTrampoline","lives","restartLevel","draw","forEach","isFire","kill","splice","hiddenFactor","GameSession","score","levelCycle","nextLife","paused","lastFrame","nextFrame","moveFrameMillisecondDelay","handleCheatCodes","stat","String","padStart","scoreType","recentKeystrokes","match","parseInt","RegExp","$1","loadSpritesheet","async","init","lostFocus","gainedFocus","frame","requestAnimationFrame","onFrame","menu","setTransform","getElementsByClassName","className"],"mappings":"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T,EAAGS,KAAKR,GAC3BQ,KAAKwN,MAAQd,MAAMO,MAIvBjN,KAAKmO,cAAcd,QAGvBjQ,OACI,IAAIkG,KAAO,IAEX,OAAQtD,KAAKwN,OACT,KAAKd,MAAMO,MACP3J,KAAO8K,eAAapO,KAAKuO,WACzB,MACJ,KAAK7B,MAAMQ,KACP,OAGRxB,OAAOa,MAAMvM,KAAKT,EAAGS,KAAKR,EAAG8D,OlB8yCjC,IAAIwL,UAAY,CACf,CACCC,KAAM,cACNC,KAAM,GACNC,SAAU,EACVf,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCa,KAAM,cACNC,KAAM,GACNC,SAAU,EACVf,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCa,KAAM,aACNC,KAAM,GACNC,SAAU,EACVf,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCa,KAAM,gBACNC,KAAM,GACNE,MAAO,EACPhB,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCa,KAAM,qBACNC,KAAM,GACNC,SAAU,EACVf,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCa,KAAM,WACNC,KAAM,GACNC,SAAU,EACVf,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,mFACA,mFACA,kFACA,kFACA,kFACA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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * Miscellaneous, individually exported functions that don't fit anywhere else.\n     *\n     * In many games I'll stick all my random math, geometry, and clipping stuff here,\n     * but in this game there's actually not a lot of extra math to do (mostly because\n     * we can only move one \"character\" at a time, and there's not any AI to speak of,\n     * so no flood fills or other algorithms to consider).\n     */\n\n    function rgba(r, g, b, a) {\n        return `rgba(${r},${g},${b},${a})`;\n    }\n\n    function createCanvas(width, height) {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        return { canvas, ctx };\n    }\n\n    /**\n     * This module is generated by `gulp buildAssets`.\n     */\n    const SpriteSheet =\n        /* <generated> */\n    { font: [ [ 0, 0, 128, 512 ] ], uri: 'sprites.png' };\n    /* </generated> */\n\n    /**\n     * Global constants for our game.\n     *\n     * I export all constants individually and import just the ones I want in each file that\n     * uses them. In theory this helps with tree-shaking and lets you see at a glance which\n     * files use which constants, but mostly it works only because this is a small game. If you\n     * have hundreds of constants it's probably better to export a single `Constants` object and\n     * let them be namespaced.\n     */\n\n    // The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n    // pixels, we care about the ASCII display area (80x25).\n    //\n    // Actually the original was likely an 80x24. We can use either here, whatever looks good in the browser.\n    const SCREEN_WIDTH = 80;\n    const SCREEN_HEIGHT = /*25*/ 24;\n\n    // The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\n    const CHAR_WIDTH = 8;\n    const CHAR_HEIGHT = 16;\n\n    // A screen scale factor. This scale factor multiplies the entire screen size so that\n    // we can then introduce text artifacts (like character glow and scan lines), to give it\n    // a little of that 1982 feel.\n    const SCREEN_SCALE = 4;\n\n    // The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n    // may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\n    //\n    // Note the extra little padding of a character, which just prevents our text from butting right\n    // against the edge of the browser window.\n    const GAME_WIDTH = (SCREEN_WIDTH + 1) * CHAR_WIDTH * SCREEN_SCALE;\n    const GAME_HEIGHT = (SCREEN_HEIGHT + 1) * CHAR_HEIGHT * SCREEN_SCALE;\n\n    // Fixed level size\n    const LEVEL_ROWS = 20;\n    const LEVEL_COLS = 79;\n\n    // Play speeds, expressed as frames per second.\n    //\n    // According to the original, the play speeds had millisecond delays of:\n    //   [100ms, 50ms, 25ms, 13ms, 7ms].\n    //\n    // This would mean the effective FPS was:\n    //   [10, 20, 40, 76, 142].\n    //\n    // I think this is way too high, and might not be accurate (it doesn't count\n    // time spent drawing the screen and running the game's logic, which might\n    // be a significant number of milliseconds). From memory, each speed was about\n    // 50% faster than the previous one, so that's what I've set here.\n    const PLAY_SPEEDS = [120, 100, 90, 50, 30];\n\n    // Maximum number of rocks on screen at once\n    const MAX_ROCKS = 7;\n\n    // Each dispenser on the level increases max rocks by 1\n    const DISPENSER_MAX_ROCKS = 1;\n\n    // Hidden difficulty factor - the game gets 5% faster each level cycle\n    const HIDDEN_FACTOR_PLAY_SPEED = 0.05;\n\n    // Hidden difficulty factor - the maximum number of rocks increases each level cycle\n    const HIDDEN_FACTOR_MAX_ROCKS = 2;\n\n    // Score events (note, these are just identifiers for the types of score increases, not\n    // actual score values).\n    const SCORE_ROCK = 1;\n    const SCORE_STATUE = 2;\n    const SCORE_TREASURE = 3;\n\n    // 1-Up\n    const NEW_LIFE_SCORE = 10_000;\n\n    /**\n     * Viewport\n     *\n     * Represents the game display (for us, a canvas).\n     */\n    const Viewport = {\n        init() {\n            Viewport.canvas = document.getElementById('canvas');\n            Viewport.ctx = Viewport.canvas.getContext('2d');\n            Viewport.resize(true);\n        },\n\n        // Resize the canvas to give us approximately our desired game display size.\n        //\n        // Rather than attempt to explain it, here's a concrete example:\n        //\n        //     we start with a desired game dimension:   480x270px\n        //          get the actual browser dimensions:  1309x468px\n        //          factor in the display's DPI ratio:  2618x936px\n        //         now calculate the horizontal scale:       5.45x\n        //                     and the vertical scale:       3.46x\n        //            our new offical game scaling is:        5.4x\n        //       and our official viewport dimensions:   484x173px\n        //\n        // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n        // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n        // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n        // UI elements the player cannot see!).\n        resize(force) {\n            let dpi = window.devicePixelRatio,\n                width = Viewport.canvas.clientWidth,\n                height = Viewport.canvas.clientHeight,\n                dpiWidth = width * dpi,\n                dpiHeight = height * dpi;\n\n            if (\n                force ||\n                Viewport.canvas.width !== dpiWidth ||\n                Viewport.canvas.height !== dpiHeight\n            ) {\n                Viewport.canvas.width = dpiWidth;\n                Viewport.canvas.height = dpiHeight;\n\n                Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n                Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n                Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n                Viewport.center = {\n                    u: (Viewport.width / 2) | 0,\n                    v: (Viewport.height / 2) | 0\n                };\n                Viewport.clientWidth = width;\n                Viewport.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                Viewport.ctx.imageSmoothingEnabled = false;\n            }\n\n            // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n            Viewport.canvas.style.cursor = 'not-allowed';\n        }\n    };\n\n    /**\n     * Sprite\n     *\n     * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n     * modifying them or constructing using primitives. To save space, we use some techniques\n     * like storing only a small slice of an image in the spritesheet, then using code\n     * to duplicate it, add some randomness, etc.\n     */\n    const Sprite = {\n        // This is an exception to the rule, loading the spritesheet is a special action that\n        // happens BEFORE everything is initialized.\n        loadSpritesheet(cb) {\n            let image = new Image();\n            image.onload = cb;\n            image.src = SpriteSheet.uri;\n            Sprite.sheet = image;\n        },\n\n        init() {\n            // Base pixel font and icons (see `Text.init` for additional variations)\n            Sprite.font = initBasicSprite(SpriteSheet.font[0]);\n        },\n\n        /**\n         * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n         * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n         * that's appropriate!\n         */\n        drawSprite(ctx, sprite, u, v) {\n            ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n        },\n\n        drawViewportSprite(sprite, pos, rotation) {\n            let { u, v } = this.viewportSprite2uv(\n                sprite,\n                pos\n            );\n            if (rotation) {\n                Viewport.ctx.save();\n                Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n                Viewport.ctx.rotate(rotation);\n                Viewport.ctx.drawImage(\n                    sprite.img,\n                    -sprite.anchor.x,\n                    -sprite.anchor.y\n                );\n                Viewport.ctx.restore();\n            } else {\n                Viewport.ctx.drawImage(sprite.img, u, v);\n            }\n        },\n\n        viewportSprite2uv(sprite, pos) {\n            return {\n                u: pos.x - sprite.anchor.x - Game.camera.pos.x + Viewport.center.u,\n                v: pos.y - sprite.anchor.y - Game.camera.pos.y + Viewport.center.v\n            };\n        }\n    };\n\n    // Sprite utility functions\n\n    function initBasicSprite(data, anchor) {\n        return initDynamicSprite(loadCacheSlice(...data), anchor);\n    }\n\n    function initDynamicSprite(source, anchor) {\n        let w = source.width,\n            h = source.height;\n\n        return {\n            img: source,\n            anchor: anchor || { x: (w / 2) | 0, y: (h / 2) | 0 }\n        };\n    }\n\n    function loadCacheSlice(x, y, w, h) {\n        const source = Sprite.sheet;\n        const sliceCanvas = createCanvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n    }\n\n    /**\n     * `Input` is a singleton that helps us map keyboard events in the browser\n     * to in-game actions.\n     *\n     * We generally care about two types of input events:\n     *\n     *  - An \"action\" is a specific action recognizable by the game, like moving right\n     *    or jumping. In theory, if this was a more complicated game, there could be\n     *    many ways to cause a specific action (maybe user presses SPACEBAR to jump,\n     *    or they click RIGHT MOUSE BUTTON, or they tap A on a gamepad, etc.). For this\n     *    reason, it helps to separate processing in-game actions from processing the\n     *    raw keyboard events that cause them.\n     *\n     *  - Actual key presses. There are situations where we need a more broad view of\n     *    the user's key presses, for example, if they are typing in their name for a\n     *    high score or pressing one of the inputs at the main menu. In this case we\n     *    want to know \"did the user tap P?\", as opposed to mapping the keys to actions.\n     */\n\n    // A list of in-game actions that can be performed by the player\n    const Action = {\n        UP:     11,\n        DOWN:   12,\n        LEFT:   13,\n        RIGHT:  14,\n        JUMP:   15,\n        STOP:   16,\n        PAUSE:  17,\n        RESUME: 18\n    };\n\n    // A list of key code mappings and what action they perform. Here we hard-code it, but\n    // you could easily also have the key mappings controlled by settings and let the user\n    // configure it.\n    const KeyMapping = {\n        KeyW:       Action.UP,\n        KeyS:       Action.DOWN,\n        KeyA:       Action.LEFT,\n        KeyD:       Action.RIGHT,\n        ArrowUp:    Action.UP,\n        ArrowDown:  Action.DOWN,\n        ArrowLeft:  Action.LEFT,\n        ArrowRight: Action.RIGHT,\n        Space:      Action.JUMP,\n        Escape:     Action.PAUSE,\n        Enter:      Action.RESUME\n    };\n\n    const Input = {\n        Action,\n        KeyMapping,\n\n        init() {\n            // Input buffer - new keypress events go into this buffer to be handled\n            // during the game's update loop. It's up to the `update()` methods to consume\n            // key presses and remove them from the buffer.\n            this.buffer = [];\n\n            // Input history - history contains recent key press events in order,\n            // removed automatically after a few seconds. This is useful for detecting\n            // inputs like cheat codes, for example.\n            //\n            // (Actually, cheat codes is the only use for this extra history buffer, so\n            // if you didn't support cheat codes you could delete it altogether.)\n            this.history = [];\n\n            window.addEventListener('keydown', event => {\n                let entry = {\n                    at: new Date().getTime(),\n                    key: event.key,\n                    code: event.code,\n                    action: Input.KeyMapping[event.code] || Input.Action.STOP\n                };\n                Input.buffer.push(entry);\n                Input.history.push(entry);\n                console.log(entry);\n            });\n        },\n\n        update() {\n            let now = new Date().getTime();\n            this.history = this.history.filter(entry => entry.at > now - 3000);\n        },\n\n        lastKey() {\n            // A shortcut helper for code that cares about what KEY was pressed.\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n        },\n\n        lastAction() {\n            // A shortcut helper for code that cares about what ACTION was taken.\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n        },\n\n        consume(clearHistory) {\n            this.buffer = [];\n\n            // Normally, \"consuming\" all existing buffer input is something that happens\n            // somewhere in the game logic. If we just detected and acted on a cheat code,\n            // though, we want to clear the history too, otherwise we'll just keep behaving\n            // like the user is entering the cheat code every frame.\n            if (clearHistory) this.history = [];\n        }\n    };\n\n    /**\n     * `Text` is a singleton responsible for drawing text characters on the viewport. This\n     * game uses a custom pixel font, so we need to implement some basic text handling\n     * (splitting long lines, measuring character width, etc.) ourselves.\n     */\n\n    // In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n    // characters are convenient for us. Here we can choose to map unicode characters to positions\n    // 0x80+ in the charsheet, making it easy for us to render things like special characters,\n    // box drawing characters, etc.\n    //\n    // Note: I like pasting actual characters instead of codes (\"├\" instead of \"\\u251C\"). If you\n    // do this, don't forget to explicitly tell the browser what charset your JS file is, or it\n    // won't execute -- see `index.html` for an example.\n    const SUPPORTED_UNICODE_CHARS = [\n        '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n        '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n        '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n    ].join('');\n\n    const UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n        map[char] = 0x80 + idx;\n        return map;\n    }, {});\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        init() {\n            // The \"white\" font sheet, right from the sprite.\n            Text.white = { img: Sprite.font.img, scale: 1, border: 0, margin: 0 };\n\n            // Recolored versions of the original font sheet, to use when constructing our glow.\n            //\n            // The color here is #33FF00 which is roughly the glow of the Kaypro II.\n            Text.terminal = recolor(Text.white, rgba(51 + 16, 255, 0 + 16, 1));\n            Text.terminal_shadow = recolor(Text.white, rgba(51, 255, 0, 0.4));\n\n            // \"Glowing\" a bunch of characters on-screen is just too slow when you're doing 5\n            // draw calls for every individual character. To avoid that, we can build a new\n            // sprite sheet that is pre-scaled with the glow built in.\n            Text.glow = bakeFontGlow(Text.terminal, Text.terminal_shadow, SCREEN_SCALE, 2, 2);\n        },\n\n        drawText(ctx, text, u, v, font = Text.terminal) {\n            // The math gymnastics are a little hard to read (apologies). To render the\n            // font asked for correctly, we need to have the font sheet image, the scale,\n            // the border and the margin.\n            //\n            // The \"scale\" informs us what PRESCALING is applied to the font sheet, so\n            // we know how big to render it (we don't do additional scaling here).\n            //\n            // The \"border\" tells us how many PRE-SCALE pixels of border exist in this\n            // image. A border of 2 means a total of 2 pixels (so 1 on every side) were\n            // used. This is pre-scale, so if the scale is 4, that means there are 4 pixels\n            // of \"space\" around each character in the font sheet.\n            //\n            // The \"margin\" tells us how many POST-SCALE pixels of margin exist (in practice\n            // this means, how many pixels of glow surround the character). You want to subtract\n            // this margin when rendering the character so the character body is in the expected\n            // spot on screen.\n            let { img, scale, border, margin } = font;\n\n            if (Array.isArray(text)) {\n                for (let block of text) {\n                    Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, font);\n                }\n                return;\n            }\n\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n                let k = (c - 0) * (CHAR_WIDTH + border);\n                let drawable = (c !== 32);\n\n                // We clear the canvas in every frame, and it's a HUGE speed advantage not to draw an\n                // empty image (this check can save 1000+ drawImage calls a frame).\n                if (drawable) {\n                    ctx.drawImage(\n                        img,\n                        (k * scale) % img.width,\n                        Math.floor((k * scale) / (img.width)) * (CHAR_HEIGHT + border) * scale,\n                        CHAR_WIDTH * scale,\n                        CHAR_HEIGHT * scale,\n                        u + margin,\n                        v + margin,\n                        CHAR_WIDTH * scale,\n                        CHAR_HEIGHT * scale\n                    );\n                }\n                u += CHAR_WIDTH * scale;\n            }\n        },\n\n        measureWidth(text, scale = 1) {\n            return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n        },\n\n        splitParagraph(text, w, h) {\n            let cu = 0, cv = 0;\n            let next = () => ({ text: '', u: cu, v: cv });\n            let wip = next();\n            let list = [];\n\n            for (let c of text.split('')) {\n                let cWidth = Text.measureWidth(c, 1);\n                if (c === '\\n' || cu + cWidth > w) {\n                    let saved = '';\n                    if (c !== '\\n' && c !== ' ') {\n                        let space = wip.text.split(' ');\n                        if (space.length > 1) {\n                            saved = space.pop();\n                            wip.text = space.join(' ');\n                        }\n                    }\n                    if (wip.text.length > 0) list.push(wip);\n                    cu = 0;\n                    cv += (CHAR_HEIGHT);\n                    wip = next();\n                    if (saved.length > 0) {\n                        wip.text = saved;\n                        cu += Text.measureWidth(wip.text, 1);\n                    }\n                } else {\n                    cu += cWidth;\n                }\n                if (c !== '\\n') {\n                    wip.text = wip.text + c;\n                }\n            }\n\n            if (wip.text.length > 0) list.push(wip);\n\n            return list.map(line => ({\n                ...line,\n                w: Text.measureWidth(line.text, 1),\n                h: CHAR_HEIGHT\n            }));\n        }\n    };\n\n    // Text utility functions, for manipulating the font sheet images\n\n    function recolor(font, color) {\n        let canvas = createCanvas(font.img.width, font.img.height);\n        canvas.ctx.fillStyle = color;\n        canvas.ctx.fillRect(0, 0, font.img.width, font.img.height);\n        canvas.ctx.globalCompositeOperation = 'destination-in';\n        canvas.ctx.drawImage(font.img, 0, 0);\n\n        // Return a new font with the same metadata, but a recolored image\n        return {\n            ...font,\n            img: canvas.canvas\n        };\n    }\n\n    function bakeFontGlow(font, glow, scale, border, margin) {\n        // This function is a little complicated because it has to do several things at once.\n        //\n        // The idea is:\n        //  - Take our original sheet of 8x16 characters\n        //  - Build a NEW sheet, with additional \"border\" around each character, so that there is\n        //    room for us to add a glow around each character without bleeding into our neighbors.\n        //  - We want the glow baked in at an upscaled pixel size.\n        //\n        // What is the upscaled pixel size? Here for example, we are scaling up from 8x16 pixels\n        // to 32x64 pixels for each characters. We then want the GLOW added around this new\n        // 32x64 character, not the original size (this allows us to have a glow more tight than\n        // the original chunky pixels we started with).\n        //\n        // A complication of HTML Canvas is that if you draw from a source canvas into a destination\n        // canvas at a higher scale, you will \"bleed\" neighboring pixels from the source canvas.\n        // To avoid this, we use a second temporary canvas and draw from the source into the temporary\n        // canvas with no upscaling, then we draw from the temporary canvas into the upscaled canvas.\n        //\n        // (This means double the draws, but we only do this step once when the game loads, so it's\n        // not a big deal.)\n        let cols = font.img.width / CHAR_WIDTH, rows = font.img.height / CHAR_HEIGHT;\n\n        let temp = createCanvas(CHAR_WIDTH, CHAR_HEIGHT);\n        let canvas = createCanvas(\n            cols * (CHAR_WIDTH + border) * scale,\n            rows * (CHAR_HEIGHT + border) * scale\n        );\n\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                // Glow (rendered on all 4 sides)\n                temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n                temp.ctx.drawImage(\n                    glow.img,\n                    x * CHAR_WIDTH,\n                    y * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin,\n                    y * (CHAR_HEIGHT + border) * scale,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale,\n                    y * (CHAR_HEIGHT + border) * scale + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin * 2,\n                    y * (CHAR_HEIGHT + border) * scale + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin,\n                    y * (CHAR_HEIGHT + border) * scale + margin * 2,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n\n                // Center character\n                temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n                temp.ctx.drawImage(\n                    font.img,\n                    x * CHAR_WIDTH,\n                    y * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin,\n                    y * (CHAR_HEIGHT + border) * scale + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n            }\n        }\n\n        return { img: canvas.canvas, scale, border, margin };\n    }\n\n    // zzfx() - the universal entry point -- returns a AudioBufferSourceNode\n    const zzfx=(...t)=>zzfxP(zzfxG(...t));\n\n    // zzfxP() - the sound player -- returns a AudioBufferSourceNode\n    const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e};\n\n    // zzfxG() - the sound generator -- returns an array of sample data\n    const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z};\n\n    // zzfxV - global volume\n    const zzfxV=.3;\n\n    // zzfxR - global sample rate\n    const zzfxR=44100;\n\n    // zzfxX - the common audio context\n    const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n    // destination for zzfx and zzfxm sounds\n    zzfx.destination_ = zzfxX.destination;\n\n    /**\n     * ZzFX Music Renderer v2.0.2 by Keith Clark\n     */\n\n    /**\n     * @typedef Channel\n     * @type {Array.<Number>}\n     * @property {Number} 0 - Channel instrument\n     * @property {Number} 1 - Channel panning (-1 to +1)\n     * @property {Number} 2 - Note\n     */\n\n    /**\n     * @typedef Pattern\n     * @type {Array.<Channel>}\n     */\n\n    /**\n     * @typedef Instrument\n     * @type {Array.<Number>} ZzFX sound parameters\n     */\n\n    /**\n     * Generate a song\n     *\n     * @param {Array.<Instrument>} instruments - Array of ZzFX sound paramaters.\n     * @param {Array.<Pattern>} patterns - Array of pattern data.\n     * @param {Array.<Number>} sequence - Array of pattern indexes.\n     * @param {Number} [speed=125] - Playback speed of the song (in BPM).\n     * @returns {Array.<Array.<Number>>} Left and right channel sample data.\n     */\n\n    const zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n        let instrumentParameters,\n            i,\n            j,\n            k,\n            note,\n            sample,\n            patternChannel,\n            notFirstBeat,\n            stop,\n            instrument,\n            pitch,\n            attenuation,\n            outSampleOffset,\n            sampleOffset,\n            nextSampleOffset,\n            sampleBuffer = [],\n            leftChannelBuffer = [],\n            rightChannelBuffer = [],\n            channelIndex = 0,\n            panning,\n            hasMore = 1,\n            sampleCache = {},\n            beatLength = ((zzfxR / BPM) * 60) >> 2;\n\n        // for each channel in order until there are no more\n        for (; hasMore; channelIndex++) {\n            // reset current values\n            sampleBuffer = [(hasMore = notFirstBeat = pitch = outSampleOffset = 0)];\n\n            // for each pattern in sequence\n            sequence.map((patternIndex, sequenceIndex) => {\n                // get pattern for current channel, use empty 1 note pattern if none found\n                patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n                // check if there are more channels\n                hasMore |= !!patterns[patternIndex][channelIndex];\n\n                // get next offset, use the length of first channel\n                nextSampleOffset =\n                    outSampleOffset +\n                    (patterns[patternIndex][0].length - 2 - !notFirstBeat) *\n                        beatLength;\n\n                // for each beat in pattern, plus one extra if end of sequence\n                for (\n                    i = 2, k = outSampleOffset;\n                    i <\n                    patternChannel.length + (sequenceIndex == sequence.length - 1);\n                    notFirstBeat = ++i\n                ) {\n                    // <channel-note>\n                    note = patternChannel[i];\n\n                    // stop if different instrument or new note\n                    stop = (instrument != (patternChannel[0] || 0)) | note | 0;\n\n                    // fill buffer with samples for previous beat, most cpu intensive part\n                    for (\n                        j = 0;\n                        j < beatLength && notFirstBeat;\n                        // fade off attenuation at end of beat if stopping note, prevents clicking\n                        j++ > beatLength - 99 && stop\n                            ? (attenuation += (attenuation < 1) / 99)\n                            : 0\n                    ) {\n                        // copy sample to stereo buffers with panning\n                        sample =\n                            ((1 - attenuation) * sampleBuffer[sampleOffset++]) /\n                                2 || 0;\n                        leftChannelBuffer[k] =\n                            (leftChannelBuffer[k] || 0) + sample * panning - sample;\n                        rightChannelBuffer[k] =\n                            (rightChannelBuffer[k++] || 0) +\n                            sample * panning +\n                            sample;\n                    }\n\n                    // set up for next note\n                    if (note) {\n                        // set attenuation\n                        attenuation = note % 1;\n                        panning = patternChannel[1] || 0;\n                        if ((note |= 0)) {\n                            // get cached sample\n                            sampleBuffer = sampleCache[\n                                [\n                                    (instrument =\n                                        patternChannel[(sampleOffset = 0)] || 0),\n                                    note\n                                ]\n                            ] =\n                                sampleCache[[instrument, note]] ||\n                                // add sample to cache\n                                ((instrumentParameters = [\n                                    ...instruments[instrument]\n                                ]),\n                                (instrumentParameters[2] *=\n                                    2 ** ((note - 12) / 12)),\n                                zzfxG(...instrumentParameters));\n                        }\n                    }\n                }\n\n                // update the sample offset\n                outSampleOffset = nextSampleOffset;\n            });\n        }\n\n        return [leftChannelBuffer, rightChannelBuffer];\n    };\n\n    const ObliqueMystique = [[[1.3,0,23,,,.2,3,5],[1.5,0,4e3,,,.03,2,1.25,,,,,.02,6.8,-.3,,.5],[.7,0,2100,,,.2,3,3,,,-400,,,2],[,0,655,,,.11,2,1.65,,,,,,3.8,-.1,.1]],[[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,],[,.6,,,,,13,,18,,19,,,,,,,,19,,18,,,,16,,,,13,,,,,,,,,,13,,18,,19,,,,,,,,18,19,18,,,,13,14,13,,16,,18,,19,,],[3,-1,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,13,13,13,13]],[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,]]],[1,1,0,0,0,0,1,0],,];\n\n    const Audio = {\n        init() {\n            Audio.readyToPlay = false;\n\n            Audio.ctx = zzfxX;\n            Audio.gain_ = Audio.ctx.createGain();\n            Audio.gain_.connect(Audio.ctx.destination);\n            zzfx.destination_ = Audio.gain_;\n\n            Audio.shotgun = [,0.01,140,0.01,0.02,0.45,4,2.42,0.1,-0.1,,,,1.2,,0.3,0.04,0.8,0.02];\n            Audio.page = [,,1233,,.01,.2,1,1.43,,,539,.1,,,,,,.51,.03,.01];\n            Audio.shellReload = [,,68,0.01,,0.14,1,1.53,7.5,0.1,50,0.02,-0.01,-0.2,0.1,0.2,,0.47,0.01];\n            Audio.damage = [,,391,,.19,.01,2,.54,-4,20,,,,,,,.02,.9];\n            Audio.alarm = [,,970,.12,.25,.35,,.39,8.1,,10,.1,.2,,.1,,,.6,.09,.13];\n            // [,,961,.05,.06,1.17,1,4.67,.8,,,,,.8,-0.8,.1,.49,.62,.09];\n            Audio.victory = [,,454,.06,.86,.71,2,.63,-0.7,1.7,-83,.09,.27,.3,.2,,.18,.95,.02,.02];\n            Audio.song = zzfxM(...ObliqueMystique);\n\n            // Save our background music in os13k, for fun!\n            //localStorage[`OS13kMusic,${TITLE} - Oblique Mystique`] = JSON.stringify(ObliqueMystique);\n        },\n\n        update() {\n            if (!Audio.readyToPlay) return;\n\n            if (!Audio.musicPlaying) {\n                //Audio.bgmusicnode = zzfxP(...Audio.song);\n                //Audio.bgmusicnode.loop = true;\n                Audio.musicPlaying = true;\n            }\n        },\n\n        play(sound) {\n            if (!Audio.readyToPlay) return;\n            zzfx(...sound);\n        },\n\n        // It's important we do pausing and unpausing as specific events and not in general update(),\n        // because update() is triggered by the animation frame trigger which does not run if the\n        // page is not visible. (So, if you want the music to fade in the background, for example,\n        // that's not helpful if it won't work because you aren't looking at the page!)\n\n        pause() {\n            Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n        },\n\n        unpause() {\n            Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n        }\n    };\n\n    /**\n     * `Screen` is a singleton that represents the virtual 80x25 character screen our game\n     * lives in. Components like PlayingField will \"draw\" (write text onto) this virtual\n     * screen each frame. Once all the text is written, the text will end up rendered on\n     * the viewport (canvas) in the browser.\n     */\n\n    const Screen = {\n        init() {\n            this.screen = [];\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                this.screen.push([]);\n            }\n            this.clear();\n        },\n\n        clear() {\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                for (let x = 0; x < SCREEN_WIDTH; x++) {\n                    this.screen[y][x] = ' ';\n                }\n            }\n        },\n\n        write(x, y, text) {\n            if (!Array.isArray(text)) text = [text];\n\n            for (let j = 0; j < text.length; j++) {\n                for (let i = 0; i < text[j].length; i++) {\n                    this.screen[y + j][x + i] = text[j][i];\n                }\n            }\n        },\n\n        draw(ctx) {\n            let text = this.screen.map(row => row.join('')).join('\\n');\n\n            Text.drawText(\n                ctx,\n                Text.splitParagraph(text, Viewport.width),\n                0, 0,\n                Text.glow\n            );\n        }\n    };\n\n    class MainMenu {\n        constructor() {\n        }\n\n        update() {\n            switch (Input.lastKey().toUpperCase()) {\n                case 'P':\n                    Input.consume();\n                    Game.startSession();\n                    break;\n                case 'L':\n                    Input.consume();\n                    Game.playSpeed = (Game.playSpeed + 1) % PLAY_SPEEDS.length;\n                    break;\n                case 'I':\n                    Input.consume();\n                    Game.showInstructions();\n                    break;\n                case 'E':\n                    Input.consume();\n                    Game.showInstructions();\n                    break;\n            }\n        }\n\n        draw() {\n            let version = '?';\n            let terminal = '?';\n\n            let highScores = [\n                `1) 6000  Bob`,\n                `2) 6000  Tom`,\n                `3) 4000  Wayne`,\n                ``,\n                ``\n            ];\n\n            Screen.clear();\n            Screen.write(0, 0, [\n                `               LL                     dd       dd`,\n                `               LL                     dd       dd                      tm`,\n                `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n                `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n                ``,\n                `                                       Version:    ${version}`,\n                `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n                `10970 Ashton Ave.  Suite 312           Play speed: ${Game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n                `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n                `                                       Stop = Other`,\n                ``,\n                `P = Play game                          High Scores`,\n                `L = Change level of difficulty         ${highScores[0]}`,\n                `C = Configure Ladder                   ${highScores[1]}`,\n                `I = Instructions                       ${highScores[2]}`,\n                `E = Exit Ladder                        ${highScores[3]}`,\n                `                                       ${highScores[4]}`,\n                ``,\n                `Enter one of the above:`\n            ]);\n        }\n    }\n\n    class InstructionsMenu {\n        constructor() {\n        }\n\n        update() {\n            if (Input.lastKey().toUpperCase() !== '') {\n                Input.consume();\n                Game.showMainMenu();\n            }\n        }\n\n        draw() {\n            Screen.clear();\n            Screen.write(0, 0, [\n                `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n                `dark corridors never before seen by human eyes and find hidden`,\n                `treasures and riches.`,\n                ``,\n                `You control Lad by typing the direction buttons and jumping by`,\n                `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n                `You must find and grasp the treasures (shown as $) BEFORE the`,\n                `bonus time runs out.`,\n                ``,\n                `A new Lad will be awarded for every 10,000 points.`,\n                `Extra points are awarded for touching the gold`,\n                `statues (shown as &).  You will receive the bonus time points`,\n                `that are left when you have finished the level.`,\n                ``,\n                `Type an ESCape to pause the Game`,\n                ``,\n                `Remember, there is more than one way to skin a cat. (Chum)`,\n                ``,\n                `Good luck Lad.`,\n                ``,\n                ``,\n                ``,\n                `Type RETURN to return to main menu:`\n            ]);\n        }\n    }\n\n    // This is our list of STATES. Each entity starts out in one of these states and can move between\n    // them based on events that happen in the Game (Note that some of these are directions, but\n    // since an entity keeps moving in the direction it is going unless stopped, directions are\n    // states in this Game)\n    const State = {\n        STOPPED:    1,         // Standing still\n        UP:         2,         // Moving up (player only)\n        LEFT:       3,         // Moving left\n        DOWN:       4,         // Moving down\n        RIGHT:      5,         // Moving right\n        FALLING:    6,         // Falling\n        START_JUMP: 7,         // About to start a jump (player only)\n        JUMP_LEFT:  8,         // Jumping left (player only)\n        JUMP_RIGHT: 9,         // Jumping right (player only)\n        JUMP_UP:    10,        // Jumping straight up (player only)\n        DYING:      11,        // Dying (used as a death animation)\n        DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n    };\n\n    const JUMP_FRAMES = {\n        [State.JUMP_RIGHT]: [\n            { x: 1, y: -1 },\n            { x: 1, y: -1 },\n            { x: 1, y: 0 },\n            { x: 1, y: 0 },\n            { x: 1, y: 1 },\n            { x: 1, y: 1 }\n        ],\n        [State.JUMP_LEFT]: [\n            { x: -1, y: -1 },\n            { x: -1, y: -1 },\n            { x: -1, y: 0 },\n            { x: -1, y: 0 },\n            { x: -1, y: 1 },\n            { x: -1, y: 1 }\n        ],\n        [State.JUMP_UP]: [\n            { x: 0, y: -1 },\n            { x: 0, y: -1 },\n            { x: 0, y: 0 },\n            { x: 0, y: 1 },\n            { x: 0, y: 1 },\n            { x: 0, y: 0 }\n        ],\n    };\n\n    class Entity {\n        applyMovement(field) {\n            let repeat = false;\n\n            // This method contains generic \"movement\" application for all entities, including\n            // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n            // work the same for both.\n            //\n            // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n            // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n            if (this.nextState) {\n                switch (this.state) {\n                    case State.STOPPED:\n                    case State.LEFT:\n                    case State.RIGHT:\n                        if ([State.LEFT, State.RIGHT, State.STOPPED].includes(this.nextState)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                        break;\n\n                    case State.UP:\n                    case State.DOWN:\n                        // Normal\n                        if ([State.LEFT, State.RIGHT].includes(this.nextState)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                        break;\n                }\n            }\n\n            if (this.nextState === State.START_JUMP) {\n                // Special case: the user wants to jump!\n                //\n                // If the player is standing on something solid, we initiate a jump based on the current\n                // movement of the player. If not, we (sort of) ignore the request to jump... although\n                // it does subtly change the behavior upon landing.\n                if (field.onSolid(this.x, this.y)) {\n                    if (this.state === State.STOPPED || this.state === State.FALLING) {\n                        this.state = State.JUMP_UP;\n                        this.jumpStep = 0;\n                        this.nextState = State.STOPPED;\n                    } else if (this.state === State.LEFT || this.state === State.JUMP_LEFT) {\n                        this.state = State.JUMP_LEFT;\n                        this.jumpStep = 0;\n                        this.nextState = State.LEFT;\n                    } else if (this.state === State.RIGHT || this.state === State.JUMP_RIGHT) {\n                        this.state = State.JUMP_RIGHT;\n                        this.jumpStep = 0;\n                        this.nextState = State.RIGHT;\n                    }\n                } else {\n                    if (this.state === State.JUMP_UP || this.state === State.FALLING) {\n                        this.nextState = State.STOPPED;\n                    } else if (this.state === State.JUMP_RIGHT) {\n                        this.nextState = State.RIGHT;\n                    } else if (this.state === State.JUMP_LEFT) {\n                        this.nextState = State.LEFT;\n                    }\n                }\n            } else if (this.nextState === State.UP && field.isLadder(this.x, this.y)) {\n                // Special case: the user wants to go up!\n                //\n                // If the user is on a ladder, we can start ascending. Note that if the user is not\n                // on a ladder we ignore their input, which is intentional -- this allows queued\n                // (pacman) input, where we can tap UP a little before reaching the ladder.\n                this.state = State.UP;\n                this.nextState = undefined;\n            } else if (this.nextState === State.DOWN && (field.isLadder(this.x, this.y) || field.isLadder(this.x, this.y + 1))) {\n                // Special case: the player wants to go down!\n                //\n                // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n                // on a ladder we ignore their input, which is intentional -- this allows queued\n                // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n                this.state = State.DOWN;\n                this.nextState = undefined;\n            }\n\n            switch (this.state) {\n                case State.LEFT:\n                    if (!field.onSolid(this.x, this.y)) {\n                        this.nextState = State.LEFT;\n                        this.state = State.FALLING;\n                        repeat = true;\n                        break;\n                    }\n                    if (field.emptySpace(this.x - 1, this.y)) {\n                        this.x--;\n                    } else {\n                        this.nextState = State.STOPPED;\n                    }\n                    break;\n\n                case State.RIGHT:\n                    if (!field.onSolid(this.x, this.y)) {\n                        this.nextState = State.RIGHT;\n                        this.state = State.FALLING;\n                        repeat = true;\n                        break;\n                    }\n                    if (field.emptySpace(this.x + 1, this.y)) {\n                        this.x++;\n                    } else {\n                        this.nextState = State.STOPPED;\n                    }\n                    break;\n\n                case State.UP:\n                    if (field.canClimbUp(this.x, this.y - 1)) {\n                        this.y--;\n                    } else {\n                        this.state = State.STOPPED;\n                    }\n                    break;\n\n                case State.DOWN:\n                    if (field.canClimbDown(this.x, this.y + 1)) {\n                        this.y++;\n                    } else {\n                        this.state = State.STOPPED;\n                    }\n                    break;\n\n                case State.JUMP_RIGHT:\n                case State.JUMP_LEFT:\n                case State.JUMP_UP:\n                    let step = JUMP_FRAMES[this.state][this.jumpStep];\n                    console.log(['jump', this.state, this.jumpStep, step]);\n                    if ((this.x + step.x >= 0) && (this.x + step.x < LEVEL_COLS)) {\n                        let terrain = field.layout[this.y + step.y][this.x + step.x];\n                        if (['=', '|', '-'].includes(terrain)) {\n                            if (field.onSolid(this.x, this.y)) {\n                                this.state = this.nextState;\n                                this.nextState = undefined;\n                            } else {\n                                switch (this.state) {\n                                    case State.JUMP_RIGHT:\n                                        this.nextState = State.RIGHT;\n                                        break;\n                                    case State.JUMP_LEFT:\n                                        this.nextState = State.LEFT;\n                                        break;\n                                    case State.JUMP_UP:\n                                        this.nextState = State.UP;\n                                        break;\n                                }\n                                this.state = State.FALLING;\n                            }\n                        } else if (terrain === 'H') {\n                            this.x += step.x;\n                            this.y += step.y;\n                            this.state = State.STOPPED;\n                            this.nextState = undefined;\n                        } else {\n                            this.x += step.x;\n                            this.y += step.y;\n                            this.jumpStep++;\n\n                            if (this.jumpStep >= JUMP_FRAMES[this.state].length) {\n                                this.state = this.nextState;\n                                this.nextState = undefined;\n                            }\n                        }\n                    } else {\n                        if (field.onSolid(this.x, this.y)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        } else {\n                            this.state = State.FALLING;\n                            this.nextState = State.STOPPED;\n                        }\n                    }\n                    break;\n\n                case State.FALLING:\n                    if (field.onSolid(this.x, this.y)) {\n                        this.state = this.nextState || State.STOPPED;\n                    } else {\n                        this.y++;\n                    }\n                    break;\n            }\n\n            // If we were attempting to move somewhere and realized we should be falling instead,\n            // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n            // frame\" from the user's point of view.\n            if (repeat) return this.applyMovement(field);\n        }\n    }\n\n    const DEATH_FRAMES = ['p', 'p', 'b', 'd', 'd', 'q', 'p', 'p', 'b', 'd', 'd', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n    /**\n     * Player\n     */\n    class Player extends Entity {\n        constructor(x, y) {\n            super();\n            this.x = x;\n            this.y = y;\n            this.state = State.STOPPED;\n            this.nextState = State.STOPPED;\n            this.jumpStep = 0;\n            this.deathStep = 0;\n            console.log('player constructed', x, y);\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            let action = Input.lastAction();\n\n            if (action === Input.Action.LEFT) {\n                this.nextState = State.LEFT;\n                Input.consume();\n            } else if (action === Input.Action.RIGHT) {\n                this.nextState = State.RIGHT;\n                Input.consume();\n            } else if (action === Input.Action.UP) {\n                this.nextState = State.UP;\n                Input.consume();\n            } else if (action === Input.Action.DOWN) {\n                this.nextState = State.DOWN;\n                Input.consume();\n            } else if (action === Input.Action.JUMP) {\n                this.nextState = State.START_JUMP;\n                Input.consume();\n            }\n\n            return this.applyMovement(field);\n        }\n\n        draw() {\n            let char = 'g';\n\n            switch (this.state) {\n                case State.RIGHT:\n                case State.JUMP_RIGHT:\n                case State.UP:\n                case State.DOWN:\n                    char = 'p';\n                    break;\n\n                case State.LEFT:\n                case State.JUMP_LEFT:\n                    char = 'q';\n                    break;\n\n                case State.FALLING:\n                    char = 'b';\n                    break;\n\n                case State.DYING:\n                    char = DEATH_FRAMES[this.deathStep];\n                    break;\n\n                case State.DEAD:\n                    char = '_';\n                    break;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n\n        kill() {\n            // Just a convenience method for killing the player.\n            //\n            // Note that \"killing\" the player just puts it in a dying state, we'll play\n            // a little death animation as rocks move about before the player actually dies,\n            // at which point they will lose a life and the level starts over.\n            if (this.state != State.DYING && this.state != State.DEAD) {\n                this.state = State.DYING;\n            }\n        }\n    }\n\n    const DEATH_FRAMES$1 = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\n    class Rock extends Entity {\n        constructor(dispenser) {\n            super();\n            this.x = dispenser.x;\n            this.y = dispenser.y;\n            this.state = State.FALLING;\n            this.nextState = undefined;\n            this.deathStep = 0;\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES$1.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            if (this.state === State.STOPPED) {\n                if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                    this.nextState = State.RIGHT;\n                } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                    this.nextState = State.LEFT;\n                } else {\n                    this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n                }\n            }\n\n            if (this.x === 0 && this.state === State.LEFT) {\n                this.state = State.RIGHT;\n            }\n\n            if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n                this.state = State.LEFT;\n            }\n\n            if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n                this.nextState = State.FALLING;\n            }\n\n            if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n                let r = Math.floor(Math.random() * 4);\n                this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n            }\n\n            if (field.isEater(this.x, this.y)) {\n                this.state = State.DYING;\n                return;\n            }\n\n            this.applyMovement(field);\n        }\n\n        draw() {\n            let char = 'o';\n\n            switch (this.state) {\n                case State.DYING:\n                    char = DEATH_FRAMES$1[this.deathStep];\n                    break;\n                case State.DEAD:\n                    return;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n    }\n\n    var LevelData = [\n    \t{\n    \t\tname: \"Easy Street\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                                       V                 $                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==================================================            \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H          H                             H                     \",\n    \t\t\t\"================H==========H==================   ========H=====================\",\n    \t\t\t\"                &          H                             H          |       |  \",\n    \t\t\t\"                                                         H         Easy Street \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==========H=========  =======================                 \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"======================== ====================== =========H==============       \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"*    p                                                   H                    *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Long Island\",\n    \t\ttime: 45,\n    \t\tmaxRocks: 8,\n    \t\tlayout: [\n    \t\t\t\"                                                                          $    \",\n    \t\t\t\"                                                                   &      H    \",\n    \t\t\t\"    H       |V                                                     V|     H    \",\n    \t\t\t\"====H======================= ========================= ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                    & |                         . .                  H    \",\n    \t\t\t\"========================== ======  =================== ===================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"                                  |                                       H    \",\n    \t\t\t\"    H                             |                 .  .                  H    \",\n    \t\t\t\"====H=====================   ======  ================  ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                      |                                                   \",\n    \t\t\t\"    H                      |                        .   .                 H    \",\n    \t\t\t\"=========================  ========    ==============   ==================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"==============                      |                                     H    \",\n    \t\t\t\" Long Island |   p         *        |                 *                   H    \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Ghost Town\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                            V               V           V               $      \",\n    \t\t\t\"                                                                       $$$     \",\n    \t\t\t\"     p    H                                                    H      $$$$$   H\",\n    \t\t\t\"==========H===                                                =H==============H\",\n    \t\t\t\"          H                                                    H              H\",\n    \t\t\t\"          H                              &                     H              H\",\n    \t\t\t\"     ==============   ====     =    ======    =   ====    =====H=====         H\",\n    \t\t\t\"    G              ^^^    ^^^^^ ^^^^      ^^^^ ^^^    ^^^                     $\",\n    \t\t\t\"    h                                                                 |        \",\n    \t\t\t\"    o     |                     H                             &       |        \",\n    \t\t\t\"    s     ======================H============================== ===========    \",\n    \t\t\t\"    t        &                  H                                              \",\n    \t\t\t\"                                H                                              \",\n    \t\t\t\"              |                 H                 H                   H        \",\n    \t\t\t\"    T         ==================H=================H===================H======= \",\n    \t\t\t\"    o                                             H                   H        \",\n    \t\t\t\"    w                                                                 H        \",\n    \t\t\t\"    n                           ^                                     H        \",\n    \t\t\t\"*                              ^^^                                    H       *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Tunnel Vision\",\n    \t\ttime: 36,\n    \t\trocks: 5,\n    \t\tlayout: [\n    \t\t\t\"                                            V                       V          \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"     H             H                         |                H                \",\n    \t\t\t\"=====H=====--======H==========================     ===----====H===========     \",\n    \t\t\t\"     H             H                |&&                       H                \",\n    \t\t\t\"     H             H                ==================        H                \",\n    \t\t\t\"     H             H                       tunnel  H          H                \",\n    \t\t\t\"     H           =======---===----=================H=         H           H    \",\n    \t\t\t\"     H         |                           vision  H          H           H    \",\n    \t\t\t\"     H         =========---&      -----============H          H           H    \",\n    \t\t\t\"     H           H                                 H |        H           H    \",\n    \t\t\t\"     H           H=========----===----================        H  ==============\",\n    \t\t\t\"                 H                                        &   H                \",\n    \t\t\t\"                 H                                        |   H                \",\n    \t\t\t\"====---====      H                                        |   H                \",\n    \t\t\t\"|         |    ================---===---===================   H                \",\n    \t\t\t\"|   ===   |                                                   H        H    p  \",\n    \t\t\t\"|    $    |                                                   H     ===H=======\",\n    \t\t\t\"|*  $$$  *|   *                *       *                     *H       *H       \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Point of No Return\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 7,\n    \t\tlayout: [\n    \t\t\t\"         $                                                                     \",\n    \t\t\t\"         H                                                   V                 \",\n    \t\t\t\"         H                                                                     \",\n    \t\t\t\"         HHHHHHHHHHHHH     .HHHHHHHHHHHHHH                          H    p     \",\n    \t\t\t\"         &                   V           H                        ==H==========\",\n    \t\t\t\"                                         H                          H          \",\n    \t\t\t\"   H                                     H        .                 H          \",\n    \t\t\t\"===H==============-----------============H====                      H          \",\n    \t\t\t\"   H                                                      H         H          \",\n    \t\t\t\"   H                                                 =====H==============      \",\n    \t\t\t\"   H                                     H                H                    \",\n    \t\t\t\"   H              &..^^^.....^..^ . ^^   H==---------     H                    \",\n    \t\t\t\"   H         ============================H    &           H             H      \",\n    \t\t\t\"   H         ===      ===      ===       H    ---------=================H======\",\n    \t\t\t\"   H                                     H                              H      \",\n    \t\t\t\"   H                          &          H          &                   H      \",\n    \t\t\t\"   ==========-------------------------=======----------===================     \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"^^^*         ^^^^^^^^^^^^^^^^^^^^^^^^^*     *^^^^^^^^^^*Point of No Return*^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Bug City\",\n    \t\ttime: 37,\n    \t\tmaxRocks: 6,\n    \t\tlayout: [\n    \t\t\t\"        Bug City             HHHHHHHH                          V               \",\n    \t\t\t\"                           HHH      HHH                                        \",\n    \t\t\t\"   H                                          >mmmmmmmm                        \",\n    \t\t\t\"   H===============                   ====================          H          \",\n    \t\t\t\"   H              |=====       \\\\  /         V                  =====H==========\",\n    \t\t\t\"   H                            \\\\/                                  H          \",\n    \t\t\t\"   H                                        | $                     H          \",\n    \t\t\t\"   H           H                            | H                     H          \",\n    \t\t\t\"   H       ====H=======          p          |&H    H                H          \",\n    \t\t\t\"   H           H             ======================H           ======          \",\n    \t\t\t\"   H           H      &|                           H                    H      \",\n    \t\t\t\"   H           H      &|                    H      H     }{        =====H====  \",\n    \t\t\t\"===H===&       H       =====================H      H                    H      \",\n    \t\t\t\"               H                            H      H                    H      \",\n    \t\t\t\"               H                            H      &                    H      \",\n    \t\t\t\"         ======H===   =======    H    <>    &                           H      \",\n    \t\t\t\"                                 H==========       =====     =     ============\",\n    \t\t\t\"     }i{                         H                                             \",\n    \t\t\t\"*                                H                                            *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"GangLand\",\n    \t\ttime: 32,\n    \t\tmaxRocks: 6,\n    \t\tlayout: [\n    \t\t\t\"                    =Gang Land=                             V                  \",\n    \t\t\t\"                   ==      _  ==                                      .        \",\n    \t\t\t\"      p    H        |  [] |_| |                  &                    .  H     \",\n    \t\t\t\"===========H        |     |_| |       H         ===   ===================H     \",\n    \t\t\t\"      V    H        =============     H======                            H     \",\n    \t\t\t\"           H                          H                     &            H     \",\n    \t\t\t\"           H                          H                |    |            H     \",\n    \t\t\t\"    H      H        ^^^&&^^^ & ^  ^^^ H           H    |    =============H     \",\n    \t\t\t\"    H======H   =======================H===========H=====          &      H     \",\n    \t\t\t\"    H                                 H           H    |         &&&     H     \",\n    \t\t\t\"    H                                 H           H    |        &&&&&    H     \",\n    \t\t\t\"    H                                 H           H    |    =============H     \",\n    \t\t\t\"              =====------=================        H    |       $     $         \",\n    \t\t\t\"                                         |        H    |      $$$   $$$        \",\n    \t\t\t\"====------===                            |        H    |     $$$$$ $$$$$       \",\n    \t\t\t\"            |       =                    | =============    ============       \",\n    \t\t\t\"            |       $                     ^          &                         \",\n    \t\t\t\"            |^^^^^^^^^^^^^^      $ ^              ======                       \",\n    \t\t\t\"*                   .      &   ^ H*^                    ^  ^       ^^^^^^^^^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t}\n    ];\n\n    const Level = {\n        LEVELS: LevelData,\n        LEVEL_COUNT: LevelData.length,\n\n        load(levelNumber) {\n            console.log(Level.LEVELS);\n            // As the player keeps playing, level numbers will loop around to beginning\n            let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n            if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n            // Perform some sanity checks on the level layout and extract useful info\n            // like player start position and dispenser positions etc.\n\n            let layout = level.layout.map(row => row.split(''));\n            let dispensers = [];\n            let player;\n\n            // Sanity check\n            layout = layout.slice(0, LEVEL_ROWS);\n\n            for (let y = 0; y < LEVEL_ROWS; y++) {\n                // Sanity checks\n                if (!layout[y]) layout[y] = [];\n                layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n                for (let x = 0; x < LEVEL_COLS; x++) {\n                    // Sanity check\n                    if (!layout[y][x]) layout[y][x] = ' ';\n\n                    // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                    // to construct a list of them, but they are permanent parts of the layout, so we can\n                    // leave them as part of the level and draw them normally.\n\n                    if (layout[y][x] === 'V') {\n                        dispensers.push({ x, y });\n                    }\n\n                    // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                    // can pick up the treasures and statues. That's why for these elements, we add them to\n                    // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                    // top of the layout.\n\n                    if (layout[y][x] === 'p') {\n                        layout[y][x] = ' ';\n                        player = { x, y };\n                    }\n\n                    // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                    // layout. The Lad interacts with them, but we can handle that during our movement checks.\n                }\n            }\n\n            return {\n                name: level.name,\n                time: level.time,\n                maxRocks: level.maRrocks,\n                layout,\n                dispensers,\n                player\n            };\n        }\n    };\n\n    /**\n     * `PlayingField` is a class that represents a level that is actively being played on-screen.\n     * A new one is created by the game session any time we start a new level.\n     *\n     * Level-specific stuff (like bonus time, dispensers, rocks, player position, etc.) is all\n     * managed by the playing field.\n     */\n\n    class PlayingField {\n        constructor(levelNumber) {\n            let level = Level.load(levelNumber);\n\n            // Store level-related info\n            this.layout = level.layout;\n            this.dispensers = level.dispensers;\n            this.time = 2000;\n\n            // Initialize player\n            this.player = new Player(level.player.x, level.player.y);\n\n            // Initialize list of rocks (empty)\n            this.rocks = [];\n\n            // Not winning yet (while \"winning\" the player stops moving and we add up the bonus score)\n            this.winning = false;\n        }\n\n        update(moveFrame) {\n            // If we're already winning, keep counting down the bonus time, but\n            // no more movement will happen on this level.\n            if (this.winning) {\n                Game.session.updateScore(SCORE_TREASURE);\n                this.time -= 10;\n                if (this.time < 0) Game.session.startNextLevel();\n                return;\n            }\n\n            // Count down bonus time\n            if (this.time > 0 && moveFrame) this.time--;\n\n            let oldX = this.player.x, oldY = this.player.y;\n\n            // Move player based on user input\n            this.player.update(this, moveFrame);\n\n            // Any time you move OFF of a disappearing floor, it goes away.\n            if (oldX !== this.player.x && oldY === this.player.y) {\n                if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                    this.layout[oldY + 1][oldX] = ' ';\n                }\n            }\n\n            // Check if player should be dead (before moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n            // Move rocks\n            for (let rock of this.rocks) rock.update(this, moveFrame);\n\n            // Check if player should be dead (after moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n            if (moveFrame) {\n                // Collect statues\n                if (this.isStatue(this.player.x, this.player.y)) {\n                    this.layout[this.player.y][this.player.x] = ' ';\n                    Game.session.updateScore(SCORE_STATUE);\n                }\n\n                // Collect treasure (ends the current level)\n                if (this.isTreasure(this.player.x, this.player.y)) {\n                    this.winning = true;\n                    return;\n                }\n\n                // Interact with trampolines\n                if (this.isTrampoline(this.player.x, this.player.y)) {\n                    switch (Math.floor(Math.random() * 5)) {\n                        case 0:\n                            this.player.state = State.LEFT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 1:\n                            this.player.state = State.RIGHT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 2:\n                            this.player.state = State.JUMP_UP;\n                            this.player.nextState = undefined;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 3:\n                            this.player.state = State.JUMP_LEFT;\n                            this.player.nextState = State.LEFT;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 4:\n                            this.player.state = State.JUMP_RIGHT;\n                            this.player.nextState = State.RIGHT;\n                            this.player.jumpStep = 0;\n                            break;\n                    }\n                }\n\n                // Kill dead rocks\n                this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n                // Dispense new rocks\n                if (this.rocks.length < this.maxRocks() && Math.random() > 0.91) {\n                    let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                    this.rocks.push(new Rock(dispenser));\n                }\n\n                // Dying player\n                if (this.player.state === State.DEAD) {\n                    Game.session.lives--;\n                    if (Game.session.lives <= 0) {\n                        // TODO: More fanfare\n                        Game.showMainMenu();\n                    } else {\n                        Game.session.restartLevel();\n                    }\n                }\n            }\n        }\n\n        draw() {\n            // Draw layout\n            Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n            // Draw player\n            this.player.draw();\n\n            // Draw rocks\n            this.rocks.forEach(rock => rock.draw());\n        }\n\n        //\n        // Utility functions - this is an attempt to consolidate logic in one spot and make other\n        // functions (like the update logic in Player) more readable.\n        //\n\n        onSolid(x, y) {\n            return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n        }\n\n        emptySpace(x, y) {\n            if (x < 0 || x >= LEVEL_COLS) {\n                return false;\n            } else {\n                return !['|', '='].includes(this.layout[y][x]);\n            }\n        }\n\n        isLadder(x, y) {\n            return this.layout[y][x] === 'H';\n        }\n\n        isStatue(x, y) {\n            return this.layout[y][x] === '&';\n        }\n\n        isTreasure(x, y) {\n            return this.layout[y][x] === '$';\n        }\n\n        isTrampoline(x, y) {\n            return this.layout[y][x] === '.';\n        }\n\n        isEater(x, y) {\n            return this.layout[y][x] === '*';\n        }\n\n        isFire(x, y) {\n            return this.layout[y][x] === '^';\n        }\n\n        isDisappearingFloor(x, y) {\n            return this.layout[y][x] === '-';\n        }\n\n        canClimbUp(x, y) {\n            if (y < 0) return false;\n            return ['H', '&', '$'].includes(this.layout[y][x]);\n        }\n\n        canClimbDown(x, y) {\n            return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n        }\n\n        checkIfPlayerShouldDie() {\n            // If we're ALREADY dying or dead, let nature run its course\n            if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n            // Landing on fire kills you\n            if (this.isFire(this.player.x, this.player.y)) {\n                this.player.state = State.DYING;\n            }\n\n            // Running out of time kills you\n            if (this.time <= 0) {\n                this.player.state = State.DYING;\n            }\n\n            // Running into a rock kills you, and makes the rock that killed you disappear.\n            // That's not necessary, I just think it looks better. While we play the death\n            // animation we'll continue to move rocks, so another rock might also \"hit\" you,\n            // but it will just pass through your dying character.\n            //\n            // If we're above a rock with 1 or 2 spaces between, we get some points instead.\n            //\n            // A function named `checkIfPlayerShouldDie` is probably not the best place to do\n            // this, but it's convenient because we want to do this twice (just like the death\n            // check).\n            //\n            //                    p                          p\n            // (1)   p     -->            (2)   p     -->\n            //        o          o                o          o\n            //      =====       =====          =====       =====\n            //\n            // In situation (1), there will never be a frame on-screen where the player is directly\n            // above the rock, but we'll still count it because we'll check once after the player moves.\n            // In situation (2), the first check won't count, but the second check after the rocks move\n            // will give the score (and the frame drawn on screen will show the player above the rock).\n            //\n            for (let i = 0; i < this.rocks.length; i++) {\n                if (this.player.x === this.rocks[i].x) {\n                    if (this.player.y === this.rocks[i].y) {\n                        this.player.kill();\n                        this.rocks.splice(i, 1);\n                        break;\n                    } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                        Game.session.updateScore(SCORE_ROCK);\n                    } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                        Game.session.updateScore(SCORE_ROCK);\n                    }\n                }\n            }\n        }\n\n        maxRocks() {\n            // The total number of rocks we can have on screen is based on a global max rocks value,\n            // then increased slightly by the number of dispensers on the level, then increased again\n            // by a hidden difficulty factor (level cycles).\n            return MAX_ROCKS + this.dispensers.length * DISPENSER_MAX_ROCKS + Game.session.hiddenFactor() * HIDDEN_FACTOR_MAX_ROCKS;\n        }\n    }\n\n    /**\n     * `GameSession` is a class that represents... well, a game session! It is created when the\n     * player presses `P` at the main menu, and ends when the player runs out of lives.\n     *\n     * The game session tracks values that persist across levels (like number of lives, score,\n     * the level number, etc.). Most of the actual in-game logic it hands off to `PlayingField`.\n     */\n\n    class GameSession {\n        constructor() {\n            this.score = 0;\n            this.levelNumber = 0;\n            this.levelCycle = 1;\n            this.lives = 5;\n            this.nextLife = NEW_LIFE_SCORE;\n            this.paused = false;\n        }\n\n        update() {\n            // The `Game` controls the overall game loop, which runs at a fixed 60 frames per second.\n            //\n            // However, Ladder has the concept of \"play speed\" which the player can change at the main\n            // menu, and it controls how fast the game runs. To accomplish that, we can do a second\n            // frame gate here. This gate sets a flag called `moveFrame` IF things can move in this frame.\n            //\n            // We do it this way so that animations (like the play death animation, or the end-of-level\n            // score animation) can run at the same speed no matter what the play speed is.\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n            let moveFrame = false;\n\n            if (now - lastFrame >= (this.nextFrame || 0)) {\n                moveFrame = true;\n                this.nextFrame = now + this.moveFrameMillisecondDelay();\n            }\n\n            if (this.paused && [Input.Action.PAUSE, Input.Action.RESUME].includes(Input.lastAction())) {\n                this.paused = false;\n                Input.consume();\n            }\n\n            if (!this.paused && Input.lastAction() === Input.Action.PAUSE) {\n                this.paused = true;\n                Input.consume();\n            }\n\n            if (this.paused) return;\n\n            // If we haven't instantiated the playing field yet, create it now.\n            if (!this.field) this.field = new PlayingField(this.levelNumber);\n\n            // Hand off to the playing field for actual in-game logic\n            this.field.update(moveFrame);\n\n            this.handleCheatCodes();\n        }\n\n        draw() {\n            if (this.field) this.field.draw();\n\n            let stat = [\n                String(this.lives).padStart(2, ' '),\n                String(this.levelNumber + 1).padStart(2, ' '),\n                String(this.score).padStart(6, ' '),\n                this.field ? String(this.field.time).padStart(4, ' ') : ''\n            ];\n            Screen.write(0, 21, `Lads   ${stat[0]}     Level   ${stat[1]}      Score   ${stat[2]}      Bonus time   ${stat[3]}`);\n\n            if (this.paused) {\n                Screen.write(0, 23, 'Paused - type ESCape or RETURN to continue.');\n            }\n        }\n\n        restartLevel() {\n            this.field = undefined;\n        }\n\n        startNextLevel() {\n            this.field = undefined;\n            this.levelNumber++;\n            if (this.levelNumber % Level.LEVEL_COUNT === 0) {\n                this.levelCycle++;\n            }\n        }\n\n        updateScore(scoreType) {\n            switch (scoreType) {\n                case SCORE_ROCK:\n                    this.score += 200;\n                    break;\n                case SCORE_STATUE:\n                    this.score += this.field.time;\n                    break;\n                case SCORE_TREASURE:\n                    // Added repeatedly after winning the level\n                    this.score += 10;\n                    break;\n            }\n\n            if (this.score >= this.nextLife) {\n                this.lives++;\n                this.nextLife += NEW_LIFE_SCORE;\n            }\n        }\n\n        hiddenFactor() {\n            // This \"hidden\" difficulty level increases steadily as the player completes a\n            // level cycle (every time they reach the Easy Street level). This makes the\n            // game slowly harder as you keep playing.\n            return Math.floor(this.levelNumber / Level.LEVEL_COUNT);\n        }\n\n        moveFrameMillisecondDelay() {\n            // Regardless of play speed, the game gets slightly faster every level cycle\n            return Math.floor(PLAY_SPEEDS[Game.playSpeed] - this.hiddenFactor() * HIDDEN_FACTOR_PLAY_SPEED * PLAY_SPEEDS[Game.playSpeed]);\n        }\n\n        handleCheatCodes() {\n            // Cheat codes are useful for testing, and this game is no exception. Of course\n            // THESE cheat codes do not belong here, as they wouldn't be created until 11 years\n            // later, but that won't stop me from using them anywhere I get the chance!\n            //\n            // =================     ===============     ===============   ========  ========\n            // \\\\ . . . . . . .\\\\   //. . . . . . .\\\\   //. . . . . . .\\\\  \\\\. . .\\\\// . . //\n            // ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\\/ . . .||\n            // || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||\n            // ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||\n            // || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\\ . . . . ||\n            // ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\\_ . .|. .||\n            // || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\\ `-_/| . ||\n            // ||_-' ||  .|/    || ||    \\|.  || `-_|| ||_-' ||  .|/    || ||   | \\  / |-_.||\n            // ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \\  / |  `||\n            // ||    `'         || ||         `'    || ||    `'         || ||   | \\  / |   ||\n            // ||            .===' `===.         .==='.`===.         .===' /==. |  \\/  |   ||\n            // ||         .=='   \\_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \\/  |   ||\n            // ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \\/  |   ||\n            // ||   .=='    _-'          `-__\\._-'         `-_./__-'         `' |. /|  |   ||\n            // ||.=='    _-'                                                     `' |  /==.||\n            // =='    _-'                                                            \\/   `==\n            // \\   _-'                                                                `-_   /\n            //  `''                                                                      ``'\n            //\n            let recentKeystrokes = Input.history.map(event => event.key).join('').toUpperCase();\n            if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n                // Changing levels is as simple as setting the desired level number\n                // and then throwing the current playing field away.\n                Input.consume(true);\n                this.levelNumber = parseInt(RegExp.$1, 10);\n                this.field = undefined;\n            } else if (recentKeystrokes.includes('IDDQD')) {\n                Input.consume(true);\n                console.log('god mode');\n            } else if (recentKeystrokes.includes('IDKFA')) {\n                // Immediately end the current level as if we'd touched the treasure.\n                Input.consume(true);\n                if (this.field) this.field.winning = true;\n            } else if (recentKeystrokes.includes('IDKILL')) {\n                Input.consume(true);\n                if (this.field && this.field.player) this.field.player.kill();\n            }\n        }\n    }\n\n    /**\n     * `Game` is a singleton that represents the running game in the browser,\n     * initializes game submodules, and handles the top-level game loop.\n     */\n\n    const Game = {\n        init() {\n            Sprite.loadSpritesheet(async () => {\n                await Viewport.init();\n                await Screen.init();\n                await Sprite.init();\n                await Text.init();\n                await Input.init();\n                await Audio.init();\n\n                window.addEventListener('blur', () => this.lostFocus());\n                window.addEventListener('focus', () => this.gainedFocus());\n\n                this.start();\n            });\n        },\n\n        start() {\n            this.frame = 0;\n            this.playSpeed = 0;\n            this.showMainMenu();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        },\n\n        onFrame() {\n            let fps = 60;\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n\n            // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n            // 60 times per second in most cases. However, it can be higher (the browser may\n            // respect the user's refresh settings, which could be 120Hz or higher for example).\n            //\n            // It's safest to have a check like we do here, where we explicitly limit the number\n            // of update calls to 60 times per second.\n            if (now - lastFrame >= 1000 / fps) {\n                this.frame++;\n                this.update();\n                this.lastFrame = now;\n            }\n\n            Viewport.resize();\n            this.draw();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        },\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            Input.update();\n\n            // perform any per-frame audio updates\n            Audio.update();\n\n            if (this.menu) {\n                this.menu.update();\n            }\n\n            if (this.session) this.session.update();\n        },\n\n        draw() {\n            // Reset canvas transform and scale\n            Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n            // Clear canvas. Note we don't go for pure black but rather a dark gray, to simulate\n            // the relatively bright phosphors on the Kaypro II. (We are going to add scan lines\n            // at the end which will appear to darken the whole screen, so the overall effect\n            // will be a little darker than this color.)\n            Viewport.ctx.fillStyle = '#181818';\n            Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n            // Center the 80x25 character \"screen\" in the viewport\n            Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n            // Hand off control to our submodules to draw whatever they'd like. For all the submodules\n            // below us, \"drawing\" means writing text to the Screen.\n            Screen.clear();\n            if (this.session) this.session.draw();\n            if (this.menu) this.menu.draw();\n\n            // Render the text on the screen to the viewport.\n            Screen.draw(Viewport.ctx);\n\n            // After drawing the \"screen\" (characters), add scan lines on top. Our scan lines are almost\n            // not visible, but move slowly and introduce subtle visual shifts in the characters on screen,\n            // which is the effect we are going for.\n            //\n            // (Technically scan lines should be IN BETWEEN rows of pixels, and what we're actually simulating\n            // here is our eyeballs clocking the screen refresh. We're going for a general feeling here.)\n            Viewport.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n            for (let y = Math.floor(-Viewport.height / 2) - 4; y < Viewport.height + 4; y += 4) {\n                let r = ((this.frame / 5) % 4) + y;\n                Viewport.ctx.fillRect(-Viewport.width, r, Viewport.width * 2, 2);\n            }\n        },\n\n        startSession() {\n            this.menu = undefined;\n            this.session = new GameSession();\n\n            // Hide the github link while in a game session\n            document.getElementsByClassName('github-corner')[0].className = 'github-corner hidden';\n        },\n\n        showMainMenu() {\n            this.menu = new MainMenu();\n            this.session = undefined;\n\n            // Show github link again when returning from a game\n            document.getElementsByClassName('github-corner')[0].className = 'github-corner';\n        },\n\n        showInstructions() {\n            this.menu = new InstructionsMenu();\n            this.session = undefined;\n        },\n\n        lostFocus() {\n            // If we lose focus (the user switched tabs, or tabbed away from the browser),\n            // automatically pause the game session if there is one.\n            if (this.session) this.session.paused = true;\n        },\n\n        gainedFocus() {\n            // Do nothing - we'll let the user hit enter to resume playing.\n        }\n    };\n\n    /**\n     * This is the entry point for the game.\n     */\n\n    Game.init();\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","/**\n * Miscellaneous, individually exported functions that don't fit anywhere else.\n *\n * In many games I'll stick all my random math, geometry, and clipping stuff here,\n * but in this game there's actually not a lot of extra math to do (mostly because\n * we can only move one \"character\" at a time, and there's not any AI to speak of,\n * so no flood fills or other algorithms to consider).\n */\n\nexport function rgba(r, g, b, a) {\n    return `rgba(${r},${g},${b},${a})`;\n}\n\nexport function createCanvas(width, height) {\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    let ctx = canvas.getContext('2d');\n    return { canvas, ctx };\n}\n","'use strict';\n\n/**\n * This module is generated by `gulp buildAssets`.\n */\nexport const SpriteSheet =\n    /* <generated> */\n{ font: [ [ 0, 0, 128, 512 ] ], uri: 'sprites.png' }\n/* </generated> */\n","/**\n * Global constants for our game.\n *\n * I export all constants individually and import just the ones I want in each file that\n * uses them. In theory this helps with tree-shaking and lets you see at a glance which\n * files use which constants, but mostly it works only because this is a small game. If you\n * have hundreds of constants it's probably better to export a single `Constants` object and\n * let them be namespaced.\n */\n\n// Spritesheet URI (produced during gulp build)\nexport const SPRITESHEET_URI = 'sprites.png';\n\n// The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n// pixels, we care about the ASCII display area (80x25).\n//\n// Actually the original was likely an 80x24. We can use either here, whatever looks good in the browser.\nexport const SCREEN_WIDTH = 80;\nexport const SCREEN_HEIGHT = /*25*/ 24;\n\n// The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\nexport const CHAR_WIDTH = 8;\nexport const CHAR_HEIGHT = 16;\nexport const CHARSHEET_WIDTH = 16 * CHAR_WIDTH;\nexport const CHARSHEET_HEIGHT = 32 * CHAR_HEIGHT;\n\n// A screen scale factor. This scale factor multiplies the entire screen size so that\n// we can then introduce text artifacts (like character glow and scan lines), to give it\n// a little of that 1982 feel.\nexport const SCREEN_SCALE = 4;\n\n// The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n// may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\n//\n// Note the extra little padding of a character, which just prevents our text from butting right\n// against the edge of the browser window.\nexport const GAME_WIDTH = (SCREEN_WIDTH + 1) * CHAR_WIDTH * SCREEN_SCALE;\nexport const GAME_HEIGHT = (SCREEN_HEIGHT + 1) * CHAR_HEIGHT * SCREEN_SCALE;\n\n// Fixed level size\nexport const LEVEL_ROWS = 20;\nexport const LEVEL_COLS = 79;\n\n// Play speeds, expressed as frames per second.\n//\n// According to the original, the play speeds had millisecond delays of:\n//   [100ms, 50ms, 25ms, 13ms, 7ms].\n//\n// This would mean the effective FPS was:\n//   [10, 20, 40, 76, 142].\n//\n// I think this is way too high, and might not be accurate (it doesn't count\n// time spent drawing the screen and running the game's logic, which might\n// be a significant number of milliseconds). From memory, each speed was about\n// 50% faster than the previous one, so that's what I've set here.\nexport const PLAY_SPEEDS = [120, 100, 90, 50, 30];\n\n// Maximum number of rocks on screen at once\nexport const MAX_ROCKS = 7;\n\n// Each dispenser on the level increases max rocks by 1\nexport const DISPENSER_MAX_ROCKS = 1;\n\n// Hidden difficulty factor - the game gets 5% faster each level cycle\nexport const HIDDEN_FACTOR_PLAY_SPEED = 0.05;\n\n// Hidden difficulty factor - the maximum number of rocks increases each level cycle\nexport const HIDDEN_FACTOR_MAX_ROCKS = 2;\n\n// Score events (note, these are just identifiers for the types of score increases, not\n// actual score values).\nexport const SCORE_ROCK = 1;\nexport const SCORE_STATUE = 2;\nexport const SCORE_TREASURE = 3;\n\n// 1-Up\nexport const NEW_LIFE_SCORE = 10_000;\n","'use strict';\n\nimport { GAME_WIDTH, GAME_HEIGHT } from './Constants';\n\n/**\n * Viewport\n *\n * Represents the game display (for us, a canvas).\n */\nexport const Viewport = {\n    init() {\n        Viewport.canvas = document.getElementById('canvas');\n        Viewport.ctx = Viewport.canvas.getContext('2d');\n        Viewport.resize(true);\n    },\n\n    // Resize the canvas to give us approximately our desired game display size.\n    //\n    // Rather than attempt to explain it, here's a concrete example:\n    //\n    //     we start with a desired game dimension:   480x270px\n    //          get the actual browser dimensions:  1309x468px\n    //          factor in the display's DPI ratio:  2618x936px\n    //         now calculate the horizontal scale:       5.45x\n    //                     and the vertical scale:       3.46x\n    //            our new offical game scaling is:        5.4x\n    //       and our official viewport dimensions:   484x173px\n    //\n    // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n    // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n    // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n    // UI elements the player cannot see!).\n    resize(force) {\n        let dpi = window.devicePixelRatio,\n            width = Viewport.canvas.clientWidth,\n            height = Viewport.canvas.clientHeight,\n            dpiWidth = width * dpi,\n            dpiHeight = height * dpi;\n\n        if (\n            force ||\n            Viewport.canvas.width !== dpiWidth ||\n            Viewport.canvas.height !== dpiHeight\n        ) {\n            Viewport.canvas.width = dpiWidth;\n            Viewport.canvas.height = dpiHeight;\n\n            Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n            Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n            Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n            Viewport.center = {\n                u: (Viewport.width / 2) | 0,\n                v: (Viewport.height / 2) | 0\n            };\n            Viewport.clientWidth = width;\n            Viewport.clientHeight = height;\n\n            // Note: smoothing flag gets reset on every resize by some browsers, which is why\n            // we do it here.\n            Viewport.ctx.imageSmoothingEnabled = false;\n        }\n\n        // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n        Viewport.canvas.style.cursor = 'not-allowed';\n    }\n};\n","'use strict';\n\nimport { Game } from './Game';\nimport { rgba, createCanvas } from './Util';\nimport { SpriteSheet } from './SpriteSheet-gen';\nimport { Viewport } from './Viewport';\n\n/**\n * Sprite\n *\n * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n * modifying them or constructing using primitives. To save space, we use some techniques\n * like storing only a small slice of an image in the spritesheet, then using code\n * to duplicate it, add some randomness, etc.\n */\nexport const Sprite = {\n    // This is an exception to the rule, loading the spritesheet is a special action that\n    // happens BEFORE everything is initialized.\n    loadSpritesheet(cb) {\n        let image = new Image();\n        image.onload = cb;\n        image.src = SpriteSheet.uri;\n        Sprite.sheet = image;\n    },\n\n    init() {\n        // Base pixel font and icons (see `Text.init` for additional variations)\n        Sprite.font = initBasicSprite(SpriteSheet.font[0]);\n    },\n\n    /**\n     * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n     * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n     * that's appropriate!\n     */\n    drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n    },\n\n    drawViewportSprite(sprite, pos, rotation) {\n        let { u, v } = this.viewportSprite2uv(\n            sprite,\n            pos\n        );\n        if (rotation) {\n            Viewport.ctx.save();\n            Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n            Viewport.ctx.rotate(rotation);\n            Viewport.ctx.drawImage(\n                sprite.img,\n                -sprite.anchor.x,\n                -sprite.anchor.y\n            );\n            Viewport.ctx.restore();\n        } else {\n            Viewport.ctx.drawImage(sprite.img, u, v);\n        }\n    },\n\n    viewportSprite2uv(sprite, pos) {\n        return {\n            u: pos.x - sprite.anchor.x - Game.camera.pos.x + Viewport.center.u,\n            v: pos.y - sprite.anchor.y - Game.camera.pos.y + Viewport.center.v\n        };\n    }\n};\n\n// Sprite utility functions\n\nfunction initBasicSprite(data, anchor) {\n    return initDynamicSprite(loadCacheSlice(...data), anchor);\n}\n\nfunction initDynamicSprite(source, anchor) {\n    let w = source.width,\n        h = source.height;\n\n    return {\n        img: source,\n        anchor: anchor || { x: (w / 2) | 0, y: (h / 2) | 0 }\n    };\n}\n\nfunction loadCacheSlice(x, y, w, h) {\n    const source = Sprite.sheet;\n    const sliceCanvas = createCanvas(w, h);\n    sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n    return sliceCanvas.canvas;\n}\n","/**\n * `Input` is a singleton that helps us map keyboard events in the browser\n * to in-game actions.\n *\n * We generally care about two types of input events:\n *\n *  - An \"action\" is a specific action recognizable by the game, like moving right\n *    or jumping. In theory, if this was a more complicated game, there could be\n *    many ways to cause a specific action (maybe user presses SPACEBAR to jump,\n *    or they click RIGHT MOUSE BUTTON, or they tap A on a gamepad, etc.). For this\n *    reason, it helps to separate processing in-game actions from processing the\n *    raw keyboard events that cause them.\n *\n *  - Actual key presses. There are situations where we need a more broad view of\n *    the user's key presses, for example, if they are typing in their name for a\n *    high score or pressing one of the inputs at the main menu. In this case we\n *    want to know \"did the user tap P?\", as opposed to mapping the keys to actions.\n */\n\n// A list of in-game actions that can be performed by the player\nconst Action = {\n    UP:     11,\n    DOWN:   12,\n    LEFT:   13,\n    RIGHT:  14,\n    JUMP:   15,\n    STOP:   16,\n    PAUSE:  17,\n    RESUME: 18\n};\n\n// A list of key code mappings and what action they perform. Here we hard-code it, but\n// you could easily also have the key mappings controlled by settings and let the user\n// configure it.\nconst KeyMapping = {\n    KeyW:       Action.UP,\n    KeyS:       Action.DOWN,\n    KeyA:       Action.LEFT,\n    KeyD:       Action.RIGHT,\n    ArrowUp:    Action.UP,\n    ArrowDown:  Action.DOWN,\n    ArrowLeft:  Action.LEFT,\n    ArrowRight: Action.RIGHT,\n    Space:      Action.JUMP,\n    Escape:     Action.PAUSE,\n    Enter:      Action.RESUME\n};\n\nexport const Input = {\n    Action,\n    KeyMapping,\n\n    init() {\n        // Input buffer - new keypress events go into this buffer to be handled\n        // during the game's update loop. It's up to the `update()` methods to consume\n        // key presses and remove them from the buffer.\n        this.buffer = [];\n\n        // Input history - history contains recent key press events in order,\n        // removed automatically after a few seconds. This is useful for detecting\n        // inputs like cheat codes, for example.\n        //\n        // (Actually, cheat codes is the only use for this extra history buffer, so\n        // if you didn't support cheat codes you could delete it altogether.)\n        this.history = [];\n\n        window.addEventListener('keydown', event => {\n            let entry = {\n                at: new Date().getTime(),\n                key: event.key,\n                code: event.code,\n                action: Input.KeyMapping[event.code] || Input.Action.STOP\n            };\n            Input.buffer.push(entry);\n            Input.history.push(entry);\n            console.log(entry);\n        });\n    },\n\n    update() {\n        let now = new Date().getTime();\n        this.history = this.history.filter(entry => entry.at > now - 3000);\n    },\n\n    lastKey() {\n        // A shortcut helper for code that cares about what KEY was pressed.\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n    },\n\n    lastAction() {\n        // A shortcut helper for code that cares about what ACTION was taken.\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n    },\n\n    consume(clearHistory) {\n        this.buffer = [];\n\n        // Normally, \"consuming\" all existing buffer input is something that happens\n        // somewhere in the game logic. If we just detected and acted on a cheat code,\n        // though, we want to clear the history too, otherwise we'll just keep behaving\n        // like the user is entering the cheat code every frame.\n        if (clearHistory) this.history = [];\n    }\n}\n","/**\n * `Text` is a singleton responsible for drawing text characters on the viewport. This\n * game uses a custom pixel font, so we need to implement some basic text handling\n * (splitting long lines, measuring character width, etc.) ourselves.\n */\n\nimport { Sprite } from './Sprite';\nimport { rgba, createCanvas } from './Util';\nimport { CHAR_WIDTH, CHAR_HEIGHT, CHARSHEET_WIDTH, SCREEN_SCALE } from './Constants';\nimport { Viewport } from './Viewport';\n\n// In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n// characters are convenient for us. Here we can choose to map unicode characters to positions\n// 0x80+ in the charsheet, making it easy for us to render things like special characters,\n// box drawing characters, etc.\n//\n// Note: I like pasting actual characters instead of codes (\"├\" instead of \"\\u251C\"). If you\n// do this, don't forget to explicitly tell the browser what charset your JS file is, or it\n// won't execute -- see `index.html` for an example.\nconst SUPPORTED_UNICODE_CHARS = [\n    '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n    '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n    '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n].join('');\n\nconst UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n    map[char] = 0x80 + idx;\n    return map;\n}, {});\n\n/**\n * Text\n *\n * Utilities for drawing text using in-game pixel font.\n */\nexport const Text = {\n    init() {\n        // The \"white\" font sheet, right from the sprite.\n        Text.white = { img: Sprite.font.img, scale: 1, border: 0, margin: 0 };\n\n        // Recolored versions of the original font sheet, to use when constructing our glow.\n        //\n        // The color here is #33FF00 which is roughly the glow of the Kaypro II.\n        Text.terminal = recolor(Text.white, rgba(51 + 16, 255, 0 + 16, 1));\n        Text.terminal_shadow = recolor(Text.white, rgba(51, 255, 0, 0.4));\n\n        // \"Glowing\" a bunch of characters on-screen is just too slow when you're doing 5\n        // draw calls for every individual character. To avoid that, we can build a new\n        // sprite sheet that is pre-scaled with the glow built in.\n        Text.glow = bakeFontGlow(Text.terminal, Text.terminal_shadow, SCREEN_SCALE, 2, 2);\n    },\n\n    drawText(ctx, text, u, v, font = Text.terminal) {\n        // The math gymnastics are a little hard to read (apologies). To render the\n        // font asked for correctly, we need to have the font sheet image, the scale,\n        // the border and the margin.\n        //\n        // The \"scale\" informs us what PRESCALING is applied to the font sheet, so\n        // we know how big to render it (we don't do additional scaling here).\n        //\n        // The \"border\" tells us how many PRE-SCALE pixels of border exist in this\n        // image. A border of 2 means a total of 2 pixels (so 1 on every side) were\n        // used. This is pre-scale, so if the scale is 4, that means there are 4 pixels\n        // of \"space\" around each character in the font sheet.\n        //\n        // The \"margin\" tells us how many POST-SCALE pixels of margin exist (in practice\n        // this means, how many pixels of glow surround the character). You want to subtract\n        // this margin when rendering the character so the character body is in the expected\n        // spot on screen.\n        let { img, scale, border, margin } = font;\n\n        if (Array.isArray(text)) {\n            for (let block of text) {\n                Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, font);\n            }\n            return;\n        }\n\n        for (let idx = 0; idx < text.length; idx++) {\n            let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n            let k = (c - 0) * (CHAR_WIDTH + border);\n            let drawable = (c !== 32);\n\n            // We clear the canvas in every frame, and it's a HUGE speed advantage not to draw an\n            // empty image (this check can save 1000+ drawImage calls a frame).\n            if (drawable) {\n                ctx.drawImage(\n                    img,\n                    (k * scale) % img.width,\n                    Math.floor((k * scale) / (img.width)) * (CHAR_HEIGHT + border) * scale,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale,\n                    u + margin,\n                    v + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n            }\n            u += CHAR_WIDTH * scale;\n        }\n    },\n\n    measureWidth(text, scale = 1) {\n        return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n    },\n\n    splitParagraph(text, w, h) {\n        let cu = 0, cv = 0;\n        let next = () => ({ text: '', u: cu, v: cv });\n        let wip = next();\n        let list = [];\n\n        for (let c of text.split('')) {\n            let cWidth = Text.measureWidth(c, 1);\n            if (c === '\\n' || cu + cWidth > w) {\n                let saved = '';\n                if (c !== '\\n' && c !== ' ') {\n                    let space = wip.text.split(' ');\n                    if (space.length > 1) {\n                        saved = space.pop();\n                        wip.text = space.join(' ');\n                    }\n                }\n                if (wip.text.length > 0) list.push(wip);\n                cu = 0;\n                cv += (CHAR_HEIGHT);\n                wip = next();\n                if (saved.length > 0) {\n                    wip.text = saved;\n                    cu += Text.measureWidth(wip.text, 1);\n                }\n            } else {\n                cu += cWidth;\n            }\n            if (c !== '\\n') {\n                wip.text = wip.text + c;\n            }\n        }\n\n        if (wip.text.length > 0) list.push(wip);\n\n        return list.map(line => ({\n            ...line,\n            w: Text.measureWidth(line.text, 1),\n            h: CHAR_HEIGHT\n        }));\n    }\n};\n\n// Text utility functions, for manipulating the font sheet images\n\nfunction recolor(font, color) {\n    let canvas = createCanvas(font.img.width, font.img.height);\n    canvas.ctx.fillStyle = color;\n    canvas.ctx.fillRect(0, 0, font.img.width, font.img.height);\n    canvas.ctx.globalCompositeOperation = 'destination-in';\n    canvas.ctx.drawImage(font.img, 0, 0);\n\n    // Return a new font with the same metadata, but a recolored image\n    return {\n        ...font,\n        img: canvas.canvas\n    };\n}\n\nfunction bakeFontGlow(font, glow, scale, border, margin) {\n    // This function is a little complicated because it has to do several things at once.\n    //\n    // The idea is:\n    //  - Take our original sheet of 8x16 characters\n    //  - Build a NEW sheet, with additional \"border\" around each character, so that there is\n    //    room for us to add a glow around each character without bleeding into our neighbors.\n    //  - We want the glow baked in at an upscaled pixel size.\n    //\n    // What is the upscaled pixel size? Here for example, we are scaling up from 8x16 pixels\n    // to 32x64 pixels for each characters. We then want the GLOW added around this new\n    // 32x64 character, not the original size (this allows us to have a glow more tight than\n    // the original chunky pixels we started with).\n    //\n    // A complication of HTML Canvas is that if you draw from a source canvas into a destination\n    // canvas at a higher scale, you will \"bleed\" neighboring pixels from the source canvas.\n    // To avoid this, we use a second temporary canvas and draw from the source into the temporary\n    // canvas with no upscaling, then we draw from the temporary canvas into the upscaled canvas.\n    //\n    // (This means double the draws, but we only do this step once when the game loads, so it's\n    // not a big deal.)\n    let cols = font.img.width / CHAR_WIDTH, rows = font.img.height / CHAR_HEIGHT;\n\n    let temp = createCanvas(CHAR_WIDTH, CHAR_HEIGHT);\n    let canvas = createCanvas(\n        cols * (CHAR_WIDTH + border) * scale,\n        rows * (CHAR_HEIGHT + border) * scale\n    )\n\n    for (let y = 0; y < rows; y++) {\n        for (let x = 0; x < cols; x++) {\n            // Glow (rendered on all 4 sides)\n            temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n            temp.ctx.drawImage(\n                glow.img,\n                x * CHAR_WIDTH,\n                y * CHAR_HEIGHT,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin,\n                y * (CHAR_HEIGHT + border) * scale,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale,\n                y * (CHAR_HEIGHT + border) * scale + margin,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin * 2,\n                y * (CHAR_HEIGHT + border) * scale + margin,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin,\n                y * (CHAR_HEIGHT + border) * scale + margin * 2,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n\n            // Center character\n            temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n            temp.ctx.drawImage(\n                font.img,\n                x * CHAR_WIDTH,\n                y * CHAR_HEIGHT,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin,\n                y * (CHAR_HEIGHT + border) * scale + margin,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n        }\n    }\n\n    return { img: canvas.canvas, scale, border, margin };\n}\n","// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nexport const zzfx=(...t)=>zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nexport const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e}\n\n// zzfxG() - the sound generator -- returns an array of sample data\nexport const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z}\n\n// zzfxV - global volume\nexport const zzfxV=.3\n\n// zzfxR - global sample rate\nexport const zzfxR=44100\n\n// zzfxX - the common audio context\nexport const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n// destination for zzfx and zzfxm sounds\nzzfx.destination_ = zzfxX.destination;\n","'use strict';\n\nimport { zzfxG, zzfxR } from './zzfx';\n\n/**\n * ZzFX Music Renderer v2.0.2 by Keith Clark\n */\n\n/**\n * @typedef Channel\n * @type {Array.<Number>}\n * @property {Number} 0 - Channel instrument\n * @property {Number} 1 - Channel panning (-1 to +1)\n * @property {Number} 2 - Note\n */\n\n/**\n * @typedef Pattern\n * @type {Array.<Channel>}\n */\n\n/**\n * @typedef Instrument\n * @type {Array.<Number>} ZzFX sound parameters\n */\n\n/**\n * Generate a song\n *\n * @param {Array.<Instrument>} instruments - Array of ZzFX sound paramaters.\n * @param {Array.<Pattern>} patterns - Array of pattern data.\n * @param {Array.<Number>} sequence - Array of pattern indexes.\n * @param {Number} [speed=125] - Playback speed of the song (in BPM).\n * @returns {Array.<Array.<Number>>} Left and right channel sample data.\n */\n\nexport const zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n    let instrumentParameters,\n        i,\n        j,\n        k,\n        note,\n        sample,\n        patternChannel,\n        notFirstBeat,\n        stop,\n        instrument,\n        pitch,\n        attenuation,\n        outSampleOffset,\n        sampleOffset,\n        nextSampleOffset,\n        sampleBuffer = [],\n        leftChannelBuffer = [],\n        rightChannelBuffer = [],\n        channelIndex = 0,\n        panning,\n        hasMore = 1,\n        sampleCache = {},\n        beatLength = ((zzfxR / BPM) * 60) >> 2;\n\n    // for each channel in order until there are no more\n    for (; hasMore; channelIndex++) {\n        // reset current values\n        sampleBuffer = [(hasMore = notFirstBeat = pitch = outSampleOffset = 0)];\n\n        // for each pattern in sequence\n        sequence.map((patternIndex, sequenceIndex) => {\n            // get pattern for current channel, use empty 1 note pattern if none found\n            patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n            // check if there are more channels\n            hasMore |= !!patterns[patternIndex][channelIndex];\n\n            // get next offset, use the length of first channel\n            nextSampleOffset =\n                outSampleOffset +\n                (patterns[patternIndex][0].length - 2 - !notFirstBeat) *\n                    beatLength;\n\n            // for each beat in pattern, plus one extra if end of sequence\n            for (\n                i = 2, k = outSampleOffset;\n                i <\n                patternChannel.length + (sequenceIndex == sequence.length - 1);\n                notFirstBeat = ++i\n            ) {\n                // <channel-note>\n                note = patternChannel[i];\n\n                // stop if different instrument or new note\n                stop = (instrument != (patternChannel[0] || 0)) | note | 0;\n\n                // fill buffer with samples for previous beat, most cpu intensive part\n                for (\n                    j = 0;\n                    j < beatLength && notFirstBeat;\n                    // fade off attenuation at end of beat if stopping note, prevents clicking\n                    j++ > beatLength - 99 && stop\n                        ? (attenuation += (attenuation < 1) / 99)\n                        : 0\n                ) {\n                    // copy sample to stereo buffers with panning\n                    sample =\n                        ((1 - attenuation) * sampleBuffer[sampleOffset++]) /\n                            2 || 0;\n                    leftChannelBuffer[k] =\n                        (leftChannelBuffer[k] || 0) + sample * panning - sample;\n                    rightChannelBuffer[k] =\n                        (rightChannelBuffer[k++] || 0) +\n                        sample * panning +\n                        sample;\n                }\n\n                // set up for next note\n                if (note) {\n                    // set attenuation\n                    attenuation = note % 1;\n                    panning = patternChannel[1] || 0;\n                    if ((note |= 0)) {\n                        // get cached sample\n                        sampleBuffer = sampleCache[\n                            [\n                                (instrument =\n                                    patternChannel[(sampleOffset = 0)] || 0),\n                                note\n                            ]\n                        ] =\n                            sampleCache[[instrument, note]] ||\n                            // add sample to cache\n                            ((instrumentParameters = [\n                                ...instruments[instrument]\n                            ]),\n                            (instrumentParameters[2] *=\n                                2 ** ((note - 12) / 12)),\n                            zzfxG(...instrumentParameters));\n                    }\n                }\n            }\n\n            // update the sample offset\n            outSampleOffset = nextSampleOffset;\n        });\n    }\n\n    return [leftChannelBuffer, rightChannelBuffer];\n};\n","export const ObliqueMystique = [[[1.3,0,23,,,.2,3,5],[1.5,0,4e3,,,.03,2,1.25,,,,,.02,6.8,-.3,,.5],[.7,0,2100,,,.2,3,3,,,-400,,,2],[,0,655,,,.11,2,1.65,,,,,,3.8,-.1,.1]],[[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,],[,.6,,,,,13,,18,,19,,,,,,,,19,,18,,,,16,,,,13,,,,,,,,,,13,,18,,19,,,,,,,,18,19,18,,,,13,14,13,,16,,18,,19,,],[3,-1,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,13,13,13,13]],[[,-.5,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,,,13,,,,14,,,,],[1,.3,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,,,13,,13,,13,,13,,13,,],[2,1,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,13,,,,,,,,,,,,]]],[1,1,0,0,0,0,1,0],,]\n","'use strict';\n\nimport { zzfx, zzfxP, zzfxX } from './lib/zzfx';\nimport { zzfxM } from './lib/zzfxm';\nimport { ObliqueMystique } from './songs/ObliqueMystique';\n\nexport const Audio = {\n    init() {\n        Audio.readyToPlay = false;\n\n        Audio.ctx = zzfxX;\n        Audio.gain_ = Audio.ctx.createGain();\n        Audio.gain_.connect(Audio.ctx.destination);\n        zzfx.destination_ = Audio.gain_;\n\n        Audio.shotgun = [,0.01,140,0.01,0.02,0.45,4,2.42,0.1,-0.1,,,,1.2,,0.3,0.04,0.8,0.02];\n        Audio.page = [,,1233,,.01,.2,1,1.43,,,539,.1,,,,,,.51,.03,.01];\n        Audio.shellReload = [,,68,0.01,,0.14,1,1.53,7.5,0.1,50,0.02,-0.01,-0.2,0.1,0.2,,0.47,0.01];\n        Audio.damage = [,,391,,.19,.01,2,.54,-4,20,,,,,,,.02,.9];\n        Audio.alarm = [,,970,.12,.25,.35,,.39,8.1,,10,.1,.2,,.1,,,.6,.09,.13];\n        // [,,961,.05,.06,1.17,1,4.67,.8,,,,,.8,-0.8,.1,.49,.62,.09];\n        Audio.victory = [,,454,.06,.86,.71,2,.63,-0.7,1.7,-83,.09,.27,.3,.2,,.18,.95,.02,.02];\n        Audio.song = zzfxM(...ObliqueMystique);\n\n        // Save our background music in os13k, for fun!\n        //localStorage[`OS13kMusic,${TITLE} - Oblique Mystique`] = JSON.stringify(ObliqueMystique);\n    },\n\n    update() {\n        if (!Audio.readyToPlay) return;\n\n        if (!Audio.musicPlaying) {\n            //Audio.bgmusicnode = zzfxP(...Audio.song);\n            //Audio.bgmusicnode.loop = true;\n            Audio.musicPlaying = true;\n        }\n    },\n\n    play(sound) {\n        if (!Audio.readyToPlay) return;\n        zzfx(...sound);\n    },\n\n    // It's important we do pausing and unpausing as specific events and not in general update(),\n    // because update() is triggered by the animation frame trigger which does not run if the\n    // page is not visible. (So, if you want the music to fade in the background, for example,\n    // that's not helpful if it won't work because you aren't looking at the page!)\n\n    pause() {\n        Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n    },\n\n    unpause() {\n        Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n    }\n};\n","/**\n * `Screen` is a singleton that represents the virtual 80x25 character screen our game\n * lives in. Components like PlayingField will \"draw\" (write text onto) this virtual\n * screen each frame. Once all the text is written, the text will end up rendered on\n * the viewport (canvas) in the browser.\n */\n\nimport { SCREEN_WIDTH, SCREEN_HEIGHT } from './Constants';\nimport { Viewport } from './Viewport';\nimport { Text } from './Text';\n\nexport const Screen = {\n    init() {\n        this.screen = [];\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            this.screen.push([]);\n        }\n        this.clear();\n    },\n\n    clear() {\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            for (let x = 0; x < SCREEN_WIDTH; x++) {\n                this.screen[y][x] = ' ';\n            }\n        }\n    },\n\n    write(x, y, text) {\n        if (!Array.isArray(text)) text = [text];\n\n        for (let j = 0; j < text.length; j++) {\n            for (let i = 0; i < text[j].length; i++) {\n                this.screen[y + j][x + i] = text[j][i];\n            }\n        }\n    },\n\n    draw(ctx) {\n        let text = this.screen.map(row => row.join('')).join('\\n');\n\n        Text.drawText(\n            ctx,\n            Text.splitParagraph(text, Viewport.width),\n            0, 0,\n            Text.glow\n        );\n    }\n};\n","import { Screen } from './Screen';\nimport { Game } from './Game';\nimport { PLAY_SPEEDS } from './Constants';\nimport { Input } from './Input';\n\nexport class MainMenu {\n    constructor() {\n    }\n\n    update() {\n        switch (Input.lastKey().toUpperCase()) {\n            case 'P':\n                Input.consume();\n                Game.startSession();\n                break;\n            case 'L':\n                Input.consume();\n                Game.playSpeed = (Game.playSpeed + 1) % PLAY_SPEEDS.length;\n                break;\n            case 'I':\n                Input.consume();\n                Game.showInstructions();\n                break;\n            case 'E':\n                Input.consume();\n                Game.showInstructions();\n                break;\n        }\n    }\n\n    draw() {\n        let version = '?';\n        let terminal = '?';\n\n        let highScores = [\n            `1) 6000  Bob`,\n            `2) 6000  Tom`,\n            `3) 4000  Wayne`,\n            ``,\n            ``\n        ];\n\n        Screen.clear();\n        Screen.write(0, 0, [\n            `               LL                     dd       dd`,\n            `               LL                     dd       dd                      tm`,\n            `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n            `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n            ``,\n            `                                       Version:    ${version}`,\n            `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n            `10970 Ashton Ave.  Suite 312           Play speed: ${Game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n            `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n            `                                       Stop = Other`,\n            ``,\n            `P = Play game                          High Scores`,\n            `L = Change level of difficulty         ${highScores[0]}`,\n            `C = Configure Ladder                   ${highScores[1]}`,\n            `I = Instructions                       ${highScores[2]}`,\n            `E = Exit Ladder                        ${highScores[3]}`,\n            `                                       ${highScores[4]}`,\n            ``,\n            `Enter one of the above:`\n        ]);\n    }\n}\n","import { Screen } from './Screen';\nimport { Game } from './Game';\nimport { Input } from './Input';\n\nexport class InstructionsMenu {\n    constructor() {\n    }\n\n    update() {\n        if (Input.lastKey().toUpperCase() !== '') {\n            Input.consume();\n            Game.showMainMenu();\n        }\n    }\n\n    draw() {\n        Screen.clear();\n        Screen.write(0, 0, [\n            `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n            `dark corridors never before seen by human eyes and find hidden`,\n            `treasures and riches.`,\n            ``,\n            `You control Lad by typing the direction buttons and jumping by`,\n            `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n            `You must find and grasp the treasures (shown as $) BEFORE the`,\n            `bonus time runs out.`,\n            ``,\n            `A new Lad will be awarded for every 10,000 points.`,\n            `Extra points are awarded for touching the gold`,\n            `statues (shown as &).  You will receive the bonus time points`,\n            `that are left when you have finished the level.`,\n            ``,\n            `Type an ESCape to pause the Game`,\n            ``,\n            `Remember, there is more than one way to skin a cat. (Chum)`,\n            ``,\n            `Good luck Lad.`,\n            ``,\n            ``,\n            ``,\n            `Type RETURN to return to main menu:`\n        ]);\n    }\n}\n","\n// This is our list of STATES. Each entity starts out in one of these states and can move between\n// them based on events that happen in the Game (Note that some of these are directions, but\n// since an entity keeps moving in the direction it is going unless stopped, directions are\n// states in this Game)\nexport const State = {\n    STOPPED:    1,         // Standing still\n    UP:         2,         // Moving up (player only)\n    LEFT:       3,         // Moving left\n    DOWN:       4,         // Moving down\n    RIGHT:      5,         // Moving right\n    FALLING:    6,         // Falling\n    START_JUMP: 7,         // About to start a jump (player only)\n    JUMP_LEFT:  8,         // Jumping left (player only)\n    JUMP_RIGHT: 9,         // Jumping right (player only)\n    JUMP_UP:    10,        // Jumping straight up (player only)\n    DYING:      11,        // Dying (used as a death animation)\n    DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n};\n\nexport const JUMP_FRAMES = {\n    [State.JUMP_RIGHT]: [\n        { x: 1, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 0 },\n        { x: 1, y: 0 },\n        { x: 1, y: 1 },\n        { x: 1, y: 1 }\n    ],\n    [State.JUMP_LEFT]: [\n        { x: -1, y: -1 },\n        { x: -1, y: -1 },\n        { x: -1, y: 0 },\n        { x: -1, y: 0 },\n        { x: -1, y: 1 },\n        { x: -1, y: 1 }\n    ],\n    [State.JUMP_UP]: [\n        { x: 0, y: -1 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 },\n        { x: 0, y: 1 },\n        { x: 0, y: 1 },\n        { x: 0, y: 0 }\n    ],\n};\n","import { State, JUMP_FRAMES } from './Behavior';\nimport { LEVEL_COLS } from './Constants';\n\nexport class Entity {\n    applyMovement(field) {\n        let repeat = false;\n\n        // This method contains generic \"movement\" application for all entities, including\n        // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n        // work the same for both.\n        //\n        // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n        // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n        if (this.nextState) {\n            switch (this.state) {\n                case State.STOPPED:\n                case State.LEFT:\n                case State.RIGHT:\n                    if ([State.LEFT, State.RIGHT, State.STOPPED].includes(this.nextState)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    }\n                    break;\n\n                case State.UP:\n                case State.DOWN:\n                    // Normal\n                    if ([State.LEFT, State.RIGHT].includes(this.nextState)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    }\n                    break;\n            }\n        }\n\n        if (this.nextState === State.START_JUMP) {\n            // Special case: the user wants to jump!\n            //\n            // If the player is standing on something solid, we initiate a jump based on the current\n            // movement of the player. If not, we (sort of) ignore the request to jump... although\n            // it does subtly change the behavior upon landing.\n            if (field.onSolid(this.x, this.y)) {\n                if (this.state === State.STOPPED || this.state === State.FALLING) {\n                    this.state = State.JUMP_UP;\n                    this.jumpStep = 0;\n                    this.nextState = State.STOPPED;\n                } else if (this.state === State.LEFT || this.state === State.JUMP_LEFT) {\n                    this.state = State.JUMP_LEFT;\n                    this.jumpStep = 0;\n                    this.nextState = State.LEFT;\n                } else if (this.state === State.RIGHT || this.state === State.JUMP_RIGHT) {\n                    this.state = State.JUMP_RIGHT;\n                    this.jumpStep = 0;\n                    this.nextState = State.RIGHT;\n                }\n            } else {\n                if (this.state === State.JUMP_UP || this.state === State.FALLING) {\n                    this.nextState = State.STOPPED;\n                } else if (this.state === State.JUMP_RIGHT) {\n                    this.nextState = State.RIGHT;\n                } else if (this.state === State.JUMP_LEFT) {\n                    this.nextState = State.LEFT;\n                }\n            }\n        } else if (this.nextState === State.UP && field.isLadder(this.x, this.y)) {\n            // Special case: the user wants to go up!\n            //\n            // If the user is on a ladder, we can start ascending. Note that if the user is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap UP a little before reaching the ladder.\n            this.state = State.UP;\n            this.nextState = undefined;\n        } else if (this.nextState === State.DOWN && (field.isLadder(this.x, this.y) || field.isLadder(this.x, this.y + 1))) {\n            // Special case: the player wants to go down!\n            //\n            // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n            this.state = State.DOWN;\n            this.nextState = undefined;\n        }\n\n        switch (this.state) {\n            case State.LEFT:\n                if (!field.onSolid(this.x, this.y)) {\n                    this.nextState = State.LEFT;\n                    this.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(this.x - 1, this.y)) {\n                    this.x--;\n                } else {\n                    this.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.RIGHT:\n                if (!field.onSolid(this.x, this.y)) {\n                    this.nextState = State.RIGHT;\n                    this.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(this.x + 1, this.y)) {\n                    this.x++;\n                } else {\n                    this.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.UP:\n                if (field.canClimbUp(this.x, this.y - 1)) {\n                    this.y--;\n                } else {\n                    this.state = State.STOPPED;\n                }\n                break;\n\n            case State.DOWN:\n                if (field.canClimbDown(this.x, this.y + 1)) {\n                    this.y++;\n                } else {\n                    this.state = State.STOPPED;\n                }\n                break;\n\n            case State.JUMP_RIGHT:\n            case State.JUMP_LEFT:\n            case State.JUMP_UP:\n                let step = JUMP_FRAMES[this.state][this.jumpStep];\n                console.log(['jump', this.state, this.jumpStep, step]);\n                if ((this.x + step.x >= 0) && (this.x + step.x < LEVEL_COLS)) {\n                    let terrain = field.layout[this.y + step.y][this.x + step.x];\n                    if (['=', '|', '-'].includes(terrain)) {\n                        if (field.onSolid(this.x, this.y)) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        } else {\n                            switch (this.state) {\n                                case State.JUMP_RIGHT:\n                                    this.nextState = State.RIGHT;\n                                    break;\n                                case State.JUMP_LEFT:\n                                    this.nextState = State.LEFT;\n                                    break;\n                                case State.JUMP_UP:\n                                    this.nextState = State.UP;\n                                    break;\n                            }\n                            this.state = State.FALLING;\n                        }\n                    } else if (terrain === 'H') {\n                        this.x += step.x;\n                        this.y += step.y;\n                        this.state = State.STOPPED;\n                        this.nextState = undefined;\n                    } else {\n                        this.x += step.x;\n                        this.y += step.y;\n                        this.jumpStep++;\n\n                        if (this.jumpStep >= JUMP_FRAMES[this.state].length) {\n                            this.state = this.nextState;\n                            this.nextState = undefined;\n                        }\n                    }\n                } else {\n                    if (field.onSolid(this.x, this.y)) {\n                        this.state = this.nextState;\n                        this.nextState = undefined;\n                    } else {\n                        this.state = State.FALLING;\n                        this.nextState = State.STOPPED;\n                    }\n                }\n                break;\n\n            case State.FALLING:\n                if (field.onSolid(this.x, this.y)) {\n                    this.state = this.nextState || State.STOPPED;\n                } else {\n                    this.y++;\n                }\n                break;\n        }\n\n        // If we were attempting to move somewhere and realized we should be falling instead,\n        // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n        // frame\" from the user's point of view.\n        if (repeat) return this.applyMovement(field);\n    }\n}\n","'use strict';\n\nimport { Sprite } from './Sprite';\nimport { State, JUMP_FRAMES } from './Behavior';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport { Entity } from './Entity';\nimport { Screen } from './Screen';\nimport { Game } from './Game';\n\nconst DEATH_FRAMES = ['p', 'p', 'b', 'd', 'd', 'q', 'p', 'p', 'b', 'd', 'd', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n/**\n * Player\n */\nexport class Player extends Entity {\n    constructor(x, y) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.state = State.STOPPED;\n        this.nextState = State.STOPPED;\n        this.jumpStep = 0;\n        this.deathStep = 0;\n        console.log('player constructed', x, y);\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        let action = Input.lastAction();\n\n        if (action === Input.Action.LEFT) {\n            this.nextState = State.LEFT;\n            Input.consume();\n        } else if (action === Input.Action.RIGHT) {\n            this.nextState = State.RIGHT;\n            Input.consume();\n        } else if (action === Input.Action.UP) {\n            this.nextState = State.UP;\n            Input.consume();\n        } else if (action === Input.Action.DOWN) {\n            this.nextState = State.DOWN;\n            Input.consume();\n        } else if (action === Input.Action.JUMP) {\n            this.nextState = State.START_JUMP;\n            Input.consume();\n        }\n\n        return this.applyMovement(field);\n    }\n\n    draw() {\n        let char = 'g';\n\n        switch (this.state) {\n            case State.RIGHT:\n            case State.JUMP_RIGHT:\n            case State.UP:\n            case State.DOWN:\n                char = 'p';\n                break;\n\n            case State.LEFT:\n            case State.JUMP_LEFT:\n                char = 'q';\n                break;\n\n            case State.FALLING:\n                char = 'b';\n                break;\n\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n\n            case State.DEAD:\n                char = '_';\n                break;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n\n    kill() {\n        // Just a convenience method for killing the player.\n        //\n        // Note that \"killing\" the player just puts it in a dying state, we'll play\n        // a little death animation as rocks move about before the player actually dies,\n        // at which point they will lose a life and the level starts over.\n        if (this.state != State.DYING && this.state != State.DEAD) {\n            this.state = State.DYING;\n        }\n    }\n}\n","import { Text } from './Text';\nimport { State } from './Behavior';\nimport { LEVEL_COLS } from './Constants';\nimport { Entity } from './Entity';\nimport { Screen } from './Screen';\nimport { Game } from './Game';\n\nconst DEATH_FRAMES = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\nexport class Rock extends Entity {\n    constructor(dispenser) {\n        super();\n        this.x = dispenser.x;\n        this.y = dispenser.y;\n        this.state = State.FALLING;\n        this.nextState = undefined;\n        this.deathStep = 0;\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        if (this.state === State.STOPPED) {\n            if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                this.nextState = State.RIGHT;\n            } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                this.nextState = State.LEFT;\n            } else {\n                this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n            }\n        }\n\n        if (this.x === 0 && this.state === State.LEFT) {\n            this.state = State.RIGHT;\n        }\n\n        if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n            this.state = State.LEFT;\n        }\n\n        if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n            this.nextState = State.FALLING;\n        }\n\n        if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n            let r = Math.floor(Math.random() * 4);\n            this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n        }\n\n        if (field.isEater(this.x, this.y)) {\n            this.state = State.DYING;\n            return;\n        }\n\n        this.applyMovement(field);\n    }\n\n    draw() {\n        let char = 'o';\n\n        switch (this.state) {\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n            case State.DEAD:\n                return;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n}\n","import { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport LevelData from '../levels/levels.json';\n\nexport const Level = {\n    LEVELS: LevelData,\n    LEVEL_COUNT: LevelData.length,\n\n    load(levelNumber) {\n        console.log(Level.LEVELS);\n        // As the player keeps playing, level numbers will loop around to beginning\n        let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n        if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n        // Perform some sanity checks on the level layout and extract useful info\n        // like player start position and dispenser positions etc.\n\n        let layout = level.layout.map(row => row.split(''));\n        let dispensers = [];\n        let player;\n\n        // Sanity check\n        layout = layout.slice(0, LEVEL_ROWS);\n\n        for (let y = 0; y < LEVEL_ROWS; y++) {\n            // Sanity checks\n            if (!layout[y]) layout[y] = [];\n            layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n            for (let x = 0; x < LEVEL_COLS; x++) {\n                // Sanity check\n                if (!layout[y][x]) layout[y][x] = ' ';\n\n                // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                // to construct a list of them, but they are permanent parts of the layout, so we can\n                // leave them as part of the level and draw them normally.\n\n                if (layout[y][x] === 'V') {\n                    dispensers.push({ x, y });\n                }\n\n                // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                // can pick up the treasures and statues. That's why for these elements, we add them to\n                // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                // top of the layout.\n\n                if (layout[y][x] === 'p') {\n                    layout[y][x] = ' ';\n                    player = { x, y };\n                }\n\n                // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                // layout. The Lad interacts with them, but we can handle that during our movement checks.\n            }\n        }\n\n        return {\n            name: level.name,\n            time: level.time,\n            maxRocks: level.maRrocks,\n            layout,\n            dispensers,\n            player\n        };\n    }\n};\n","/**\n * `PlayingField` is a class that represents a level that is actively being played on-screen.\n * A new one is created by the game session any time we start a new level.\n *\n * Level-specific stuff (like bonus time, dispensers, rocks, player position, etc.) is all\n * managed by the playing field.\n */\n\nimport { LEVEL_COLS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE, MAX_ROCKS, DISPENSER_MAX_ROCKS, HIDDEN_FACTOR_MAX_ROCKS } from './Constants';\nimport { Game } from './Game';\nimport { Player } from './Player';\nimport { Rock } from './Rock';\nimport { State } from './Behavior';\nimport { Screen } from './Screen';\nimport { Level } from './Level';\n\nexport class PlayingField {\n    constructor(levelNumber) {\n        let level = Level.load(levelNumber);\n\n        // Store level-related info\n        this.layout = level.layout;\n        this.dispensers = level.dispensers;\n        this.time = 2000;\n\n        // Initialize player\n        this.player = new Player(level.player.x, level.player.y);\n\n        // Initialize list of rocks (empty)\n        this.rocks = [];\n\n        // Not winning yet (while \"winning\" the player stops moving and we add up the bonus score)\n        this.winning = false;\n    }\n\n    update(moveFrame) {\n        // If we're already winning, keep counting down the bonus time, but\n        // no more movement will happen on this level.\n        if (this.winning) {\n            Game.session.updateScore(SCORE_TREASURE);\n            this.time -= 10;\n            if (this.time < 0) Game.session.startNextLevel();\n            return;\n        }\n\n        // Count down bonus time\n        if (this.time > 0 && moveFrame) this.time--;\n\n        let oldX = this.player.x, oldY = this.player.y;\n\n        // Move player based on user input\n        this.player.update(this, moveFrame);\n\n        // Any time you move OFF of a disappearing floor, it goes away.\n        if (oldX !== this.player.x && oldY === this.player.y) {\n            if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                this.layout[oldY + 1][oldX] = ' ';\n            }\n        }\n\n        // Check if player should be dead (before moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n        // Move rocks\n        for (let rock of this.rocks) rock.update(this, moveFrame);\n\n        // Check if player should be dead (after moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n        if (moveFrame) {\n            // Collect statues\n            if (this.isStatue(this.player.x, this.player.y)) {\n                this.layout[this.player.y][this.player.x] = ' ';\n                Game.session.updateScore(SCORE_STATUE);\n            }\n\n            // Collect treasure (ends the current level)\n            if (this.isTreasure(this.player.x, this.player.y)) {\n                this.winning = true;\n                return;\n            }\n\n            // Interact with trampolines\n            if (this.isTrampoline(this.player.x, this.player.y)) {\n                switch (Math.floor(Math.random() * 5)) {\n                    case 0:\n                        this.player.state = State.LEFT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 1:\n                        this.player.state = State.RIGHT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 2:\n                        this.player.state = State.JUMP_UP;\n                        this.player.nextState = undefined;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 3:\n                        this.player.state = State.JUMP_LEFT;\n                        this.player.nextState = State.LEFT;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 4:\n                        this.player.state = State.JUMP_RIGHT;\n                        this.player.nextState = State.RIGHT;\n                        this.player.jumpStep = 0;\n                        break;\n                }\n            }\n\n            // Kill dead rocks\n            this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n            // Dispense new rocks\n            if (this.rocks.length < this.maxRocks() && Math.random() > 0.91) {\n                let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                this.rocks.push(new Rock(dispenser));\n            }\n\n            // Dying player\n            if (this.player.state === State.DEAD) {\n                Game.session.lives--;\n                if (Game.session.lives <= 0) {\n                    // TODO: More fanfare\n                    Game.showMainMenu();\n                } else {\n                    Game.session.restartLevel();\n                }\n            }\n        }\n    }\n\n    draw() {\n        // Draw layout\n        Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n        // Draw player\n        this.player.draw();\n\n        // Draw rocks\n        this.rocks.forEach(rock => rock.draw());\n    }\n\n    //\n    // Utility functions - this is an attempt to consolidate logic in one spot and make other\n    // functions (like the update logic in Player) more readable.\n    //\n\n    onSolid(x, y) {\n        return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n    }\n\n    emptySpace(x, y) {\n        if (x < 0 || x >= LEVEL_COLS) {\n            return false;\n        } else {\n            return !['|', '='].includes(this.layout[y][x]);\n        }\n    }\n\n    isLadder(x, y) {\n        return this.layout[y][x] === 'H';\n    }\n\n    isStatue(x, y) {\n        return this.layout[y][x] === '&';\n    }\n\n    isTreasure(x, y) {\n        return this.layout[y][x] === '$';\n    }\n\n    isTrampoline(x, y) {\n        return this.layout[y][x] === '.';\n    }\n\n    isEater(x, y) {\n        return this.layout[y][x] === '*';\n    }\n\n    isFire(x, y) {\n        return this.layout[y][x] === '^';\n    }\n\n    isDisappearingFloor(x, y) {\n        return this.layout[y][x] === '-';\n    }\n\n    canClimbUp(x, y) {\n        if (y < 0) return false;\n        return ['H', '&', '$'].includes(this.layout[y][x]);\n    }\n\n    canClimbDown(x, y) {\n        return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n    }\n\n    checkIfPlayerShouldDie() {\n        // If we're ALREADY dying or dead, let nature run its course\n        if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n        // Landing on fire kills you\n        if (this.isFire(this.player.x, this.player.y)) {\n            this.player.state = State.DYING;\n        }\n\n        // Running out of time kills you\n        if (this.time <= 0) {\n            this.player.state = State.DYING;\n        }\n\n        // Running into a rock kills you, and makes the rock that killed you disappear.\n        // That's not necessary, I just think it looks better. While we play the death\n        // animation we'll continue to move rocks, so another rock might also \"hit\" you,\n        // but it will just pass through your dying character.\n        //\n        // If we're above a rock with 1 or 2 spaces between, we get some points instead.\n        //\n        // A function named `checkIfPlayerShouldDie` is probably not the best place to do\n        // this, but it's convenient because we want to do this twice (just like the death\n        // check).\n        //\n        //                    p                          p\n        // (1)   p     -->            (2)   p     -->\n        //        o          o                o          o\n        //      =====       =====          =====       =====\n        //\n        // In situation (1), there will never be a frame on-screen where the player is directly\n        // above the rock, but we'll still count it because we'll check once after the player moves.\n        // In situation (2), the first check won't count, but the second check after the rocks move\n        // will give the score (and the frame drawn on screen will show the player above the rock).\n        //\n        for (let i = 0; i < this.rocks.length; i++) {\n            if (this.player.x === this.rocks[i].x) {\n                if (this.player.y === this.rocks[i].y) {\n                    this.player.kill();\n                    this.rocks.splice(i, 1);\n                    break;\n                } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                    Game.session.updateScore(SCORE_ROCK);\n                } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                    Game.session.updateScore(SCORE_ROCK);\n                }\n            }\n        }\n    }\n\n    maxRocks() {\n        // The total number of rocks we can have on screen is based on a global max rocks value,\n        // then increased slightly by the number of dispensers on the level, then increased again\n        // by a hidden difficulty factor (level cycles).\n        return MAX_ROCKS + this.dispensers.length * DISPENSER_MAX_ROCKS + Game.session.hiddenFactor() * HIDDEN_FACTOR_MAX_ROCKS;\n    }\n}\n","/**\n * `GameSession` is a class that represents... well, a game session! It is created when the\n * player presses `P` at the main menu, and ends when the player runs out of lives.\n *\n * The game session tracks values that persist across levels (like number of lives, score,\n * the level number, etc.). Most of the actual in-game logic it hands off to `PlayingField`.\n */\n\nimport { PLAY_SPEEDS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE, HIDDEN_FACTOR_PLAY_SPEED, NEW_LIFE_SCORE } from './Constants';\nimport { Game } from './Game';\nimport { PlayingField } from './PlayingField';\nimport { Level } from './Level';\nimport { Screen } from './Screen';\nimport { Input } from './Input';\n\nexport class GameSession {\n    constructor() {\n        this.score = 0;\n        this.levelNumber = 0;\n        this.levelCycle = 1;\n        this.lives = 5;\n        this.nextLife = NEW_LIFE_SCORE;\n        this.paused = false;\n    }\n\n    update() {\n        // The `Game` controls the overall game loop, which runs at a fixed 60 frames per second.\n        //\n        // However, Ladder has the concept of \"play speed\" which the player can change at the main\n        // menu, and it controls how fast the game runs. To accomplish that, we can do a second\n        // frame gate here. This gate sets a flag called `moveFrame` IF things can move in this frame.\n        //\n        // We do it this way so that animations (like the play death animation, or the end-of-level\n        // score animation) can run at the same speed no matter what the play speed is.\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n        let moveFrame = false;\n\n        if (now - lastFrame >= (this.nextFrame || 0)) {\n            moveFrame = true;\n            this.nextFrame = now + this.moveFrameMillisecondDelay();\n        }\n\n        if (this.paused && [Input.Action.PAUSE, Input.Action.RESUME].includes(Input.lastAction())) {\n            this.paused = false;\n            Input.consume();\n        }\n\n        if (!this.paused && Input.lastAction() === Input.Action.PAUSE) {\n            this.paused = true;\n            Input.consume();\n        }\n\n        if (this.paused) return;\n\n        // If we haven't instantiated the playing field yet, create it now.\n        if (!this.field) this.field = new PlayingField(this.levelNumber);\n\n        // Hand off to the playing field for actual in-game logic\n        this.field.update(moveFrame);\n\n        this.handleCheatCodes();\n    }\n\n    draw() {\n        if (this.field) this.field.draw();\n\n        let stat = [\n            String(this.lives).padStart(2, ' '),\n            String(this.levelNumber + 1).padStart(2, ' '),\n            String(this.score).padStart(6, ' '),\n            this.field ? String(this.field.time).padStart(4, ' ') : ''\n        ];\n        Screen.write(0, 21, `Lads   ${stat[0]}     Level   ${stat[1]}      Score   ${stat[2]}      Bonus time   ${stat[3]}`);\n\n        if (this.paused) {\n            Screen.write(0, 23, 'Paused - type ESCape or RETURN to continue.');\n        }\n    }\n\n    restartLevel() {\n        this.field = undefined;\n    }\n\n    startNextLevel() {\n        this.field = undefined;\n        this.levelNumber++;\n        if (this.levelNumber % Level.LEVEL_COUNT === 0) {\n            this.levelCycle++;\n        }\n    }\n\n    updateScore(scoreType) {\n        switch (scoreType) {\n            case SCORE_ROCK:\n                this.score += 200;\n                break;\n            case SCORE_STATUE:\n                this.score += this.field.time;\n                break;\n            case SCORE_TREASURE:\n                // Added repeatedly after winning the level\n                this.score += 10;\n                break;\n        }\n\n        if (this.score >= this.nextLife) {\n            this.lives++;\n            this.nextLife += NEW_LIFE_SCORE;\n        }\n    }\n\n    hiddenFactor() {\n        // This \"hidden\" difficulty level increases steadily as the player completes a\n        // level cycle (every time they reach the Easy Street level). This makes the\n        // game slowly harder as you keep playing.\n        return Math.floor(this.levelNumber / Level.LEVEL_COUNT);\n    }\n\n    moveFrameMillisecondDelay() {\n        // Regardless of play speed, the game gets slightly faster every level cycle\n        return Math.floor(PLAY_SPEEDS[Game.playSpeed] - this.hiddenFactor() * HIDDEN_FACTOR_PLAY_SPEED * PLAY_SPEEDS[Game.playSpeed]);\n    }\n\n    handleCheatCodes() {\n        // Cheat codes are useful for testing, and this game is no exception. Of course\n        // THESE cheat codes do not belong here, as they wouldn't be created until 11 years\n        // later, but that won't stop me from using them anywhere I get the chance!\n        //\n        // =================     ===============     ===============   ========  ========\n        // \\\\ . . . . . . .\\\\   //. . . . . . .\\\\   //. . . . . . .\\\\  \\\\. . .\\\\// . . //\n        // ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\\/ . . .||\n        // || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||\n        // ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||\n        // || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\\ . . . . ||\n        // ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\\_ . .|. .||\n        // || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\\ `-_/| . ||\n        // ||_-' ||  .|/    || ||    \\|.  || `-_|| ||_-' ||  .|/    || ||   | \\  / |-_.||\n        // ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \\  / |  `||\n        // ||    `'         || ||         `'    || ||    `'         || ||   | \\  / |   ||\n        // ||            .===' `===.         .==='.`===.         .===' /==. |  \\/  |   ||\n        // ||         .=='   \\_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \\/  |   ||\n        // ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \\/  |   ||\n        // ||   .=='    _-'          `-__\\._-'         `-_./__-'         `' |. /|  |   ||\n        // ||.=='    _-'                                                     `' |  /==.||\n        // =='    _-'                                                            \\/   `==\n        // \\   _-'                                                                `-_   /\n        //  `''                                                                      ``'\n        //\n        let recentKeystrokes = Input.history.map(event => event.key).join('').toUpperCase();\n        if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n            // Changing levels is as simple as setting the desired level number\n            // and then throwing the current playing field away.\n            Input.consume(true);\n            this.levelNumber = parseInt(RegExp.$1, 10);\n            this.field = undefined;\n        } else if (recentKeystrokes.includes('IDDQD')) {\n            Input.consume(true);\n            console.log('god mode');\n        } else if (recentKeystrokes.includes('IDKFA')) {\n            // Immediately end the current level as if we'd touched the treasure.\n            Input.consume(true);\n            if (this.field) this.field.winning = true;\n        } else if (recentKeystrokes.includes('IDKILL')) {\n            Input.consume(true);\n            if (this.field && this.field.player) this.field.player.kill();\n        }\n    }\n}\n","/**\n * `Game` is a singleton that represents the running game in the browser,\n * initializes game submodules, and handles the top-level game loop.\n */\n\nimport { Sprite } from './Sprite';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { Viewport } from './Viewport';\nimport { GAME_WIDTH, GAME_HEIGHT, PLAY_SPEEDS } from './Constants';\nimport { Audio } from './Audio';\nimport { Screen } from './Screen';\nimport { MainMenu } from './MainMenu';\nimport { InstructionsMenu } from './InstructionsMenu';\nimport { GameSession } from './GameSession';\n\nexport const Game = {\n    init() {\n        Sprite.loadSpritesheet(async () => {\n            await Viewport.init();\n            await Screen.init();\n            await Sprite.init();\n            await Text.init();\n            await Input.init();\n            await Audio.init();\n\n            window.addEventListener('blur', () => this.lostFocus());\n            window.addEventListener('focus', () => this.gainedFocus());\n\n            this.start();\n        });\n    },\n\n    start() {\n        this.frame = 0;\n        this.playSpeed = 0;\n        this.showMainMenu();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    },\n\n    onFrame() {\n        let fps = 60;\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n\n        // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n        // 60 times per second in most cases. However, it can be higher (the browser may\n        // respect the user's refresh settings, which could be 120Hz or higher for example).\n        //\n        // It's safest to have a check like we do here, where we explicitly limit the number\n        // of update calls to 60 times per second.\n        if (now - lastFrame >= 1000 / fps) {\n            this.frame++;\n            this.update();\n            this.lastFrame = now;\n        }\n\n        Viewport.resize();\n        this.draw();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    },\n\n    update() {\n        // Pull in frame by frame button pushes / keypresses / mouse clicks\n        Input.update();\n\n        // perform any per-frame audio updates\n        Audio.update();\n\n        if (this.menu) {\n            this.menu.update();\n        }\n\n        if (this.session) this.session.update();\n    },\n\n    draw() {\n        // Reset canvas transform and scale\n        Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n        // Clear canvas. Note we don't go for pure black but rather a dark gray, to simulate\n        // the relatively bright phosphors on the Kaypro II. (We are going to add scan lines\n        // at the end which will appear to darken the whole screen, so the overall effect\n        // will be a little darker than this color.)\n        Viewport.ctx.fillStyle = '#181818';\n        Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n        // Center the 80x25 character \"screen\" in the viewport\n        Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n        // Hand off control to our submodules to draw whatever they'd like. For all the submodules\n        // below us, \"drawing\" means writing text to the Screen.\n        Screen.clear();\n        if (this.session) this.session.draw();\n        if (this.menu) this.menu.draw();\n\n        // Render the text on the screen to the viewport.\n        Screen.draw(Viewport.ctx);\n\n        // After drawing the \"screen\" (characters), add scan lines on top. Our scan lines are almost\n        // not visible, but move slowly and introduce subtle visual shifts in the characters on screen,\n        // which is the effect we are going for.\n        //\n        // (Technically scan lines should be IN BETWEEN rows of pixels, and what we're actually simulating\n        // here is our eyeballs clocking the screen refresh. We're going for a general feeling here.)\n        Viewport.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        for (let y = Math.floor(-Viewport.height / 2) - 4; y < Viewport.height + 4; y += 4) {\n            let r = ((this.frame / 5) % 4) + y;\n            Viewport.ctx.fillRect(-Viewport.width, r, Viewport.width * 2, 2);\n        }\n    },\n\n    startSession() {\n        this.menu = undefined;\n        this.session = new GameSession();\n\n        // Hide the github link while in a game session\n        document.getElementsByClassName('github-corner')[0].className = 'github-corner hidden';\n    },\n\n    showMainMenu() {\n        this.menu = new MainMenu();\n        this.session = undefined;\n\n        // Show github link again when returning from a game\n        document.getElementsByClassName('github-corner')[0].className = 'github-corner';\n    },\n\n    showInstructions() {\n        this.menu = new InstructionsMenu();\n        this.session = undefined;\n    },\n\n    lostFocus() {\n        // If we lose focus (the user switched tabs, or tabbed away from the browser),\n        // automatically pause the game session if there is one.\n        if (this.session) this.session.paused = true;\n    },\n\n    gainedFocus() {\n        // Do nothing - we'll let the user hit enter to resume playing.\n    }\n};\n","/**\n * This is the entry point for the game.\n */\nimport { Game } from './Game';\n\nGame.init();\n"]}