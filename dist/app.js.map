{"version":3,"sources":["app.js","../src/js/Util.js","../src/js/SpriteSheet-gen.js","../src/js/Constants.js","../src/js/Viewport.js","../src/js/Sprite.js","../src/js/lib/zzfx.js","../src/js/Audio.js","../src/js/Input.js","../src/js/Text.js","../src/js/Screen.js","../src/js/MainMenu.js","../src/js/InstructionsMenu.js","../src/js/Entity.js","../src/js/Player.js","../src/js/Rock.js","../src/js/Level.js","../src/js/PlayingField.js","../src/js/GameSession.js","../src/js/Game.js","../src/js/index.js"],"names":["rgba","r","g","b","a","createCanvas","width","height","canvas","document","createElement","ctx","getContext","SpriteSheet","PLAY_SPEEDS","Viewport","[object Object]","getElementById","resize","force","dpi","window","devicePixelRatio","clientWidth","clientHeight","dpiWidth","dpiHeight","scale","Math","min","ceil","center","u","v","imageSmoothingEnabled","style","cursor","Sprite","cb","image","Image","onload","src","sheet","data","anchor","font","source","w","h","img","x","y","initDynamicSprite","sliceCanvas","drawImage","loadCacheSlice","sprite","pos","rotation","this","viewportSprite2uv","save","translate","rotate","restore","Game","camera","zzfx","t","zzfxP","zzfxG","e","zzfxX","createBufferSource","f","createBuffer","length","zzfxR","map","d","i","getChannelData","set","buffer","connect","destination_","start","q","k","c","F","z","A","l","B","G","m","C","p","PI","H","I","D","random","Z","E","n","J","K","sin","max","tan","abs","round","zzfxV","top","AudioContext","webkitAudioContext","destination","Audio","readyToPlay","gain_","createGain","begin","jump","score","dying","soundThrottle","Map","soundDelays","musicPlaying","sound","now","Date","getTime","allowed","get","delay","gain","linearRampToValueAtTime","currentTime","Action","UP","DOWN","LEFT","RIGHT","JUMP","STOP","PAUSE","RESUME","Input","KeyMapping","KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space","Escape","Enter","history","addEventListener","event","entry","at","key","code","action","push","console","log","filter","undefined","clearHistory","UNICODE_CHAR_MAP","join","split","reduce","char","idx","Text","white","border","margin","terminal","recolor","terminal_shadow","glow","cols","rows","temp","clearRect","bakeFontGlow","text","Array","isArray","block","drawText","charCodeAt","floor","measureWidth","sum","cu","cv","next","wip","list","cWidth","saved","space","pop","line","color","fillStyle","fillRect","globalCompositeOperation","Screen","screen","clear","j","row","splitParagraph","MainMenu","lastKey","toUpperCase","consume","startSession","playSpeed","showInstructions","highScores","write","InstructionsMenu","showMainMenu","State","STOPPED","FALLING","START_JUMP","JUMP_LEFT","JUMP_RIGHT","JUMP_UP","DYING","DEAD","JUMP_FRAMES","applyEntityMovement","entity","field","repeat","nextState","state","includes","onSolid","jumpStep","play","isLadder","emptySpace","canClimbUp","canClimbDown","step","terrain","layout","DEATH_FRAMES","Player","queued","deathStep","moveFrame","lastAction","Rock","dispenser","LEVEL_COLS","isEater","LevelData","name","time","maxRocks","Level","LEVELS","LEVEL_COUNT","levelNumber","level","Error","player","dispensers","slice","PlayingField","load","rocks","winning","session","updateScore","startNextLevel","oldX","oldY","update","isDisappearingFloor","checkIfPlayerShouldDie","rock","isStatue","isTreasure","isTrampoline","lives","restartLevel","draw","forEach","isFire","kill","splice","hiddenFactor","GameSession","levelCycle","nextLife","paused","lastFrame","nextFrame","moveFrameMillisecondDelay","handleCheatCodes","stat","String","padStart","scoreType","recentKeystrokes","match","parseInt","RegExp","$1","loadSpritesheet","async","init","lostFocus","gainedFocus","frame","requestAnimationFrame","onFrame","menu","setTransform","getElementsByClassName","className"],"mappings":"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,KAAK+K,MAAsB,EAAhB/K,KAAK4E,UACxB5C,KAAK+L,UAAY,CAACd,MAAM5F,KAAM4F,MAAM3F,MAAO2F,MAAM7F,KAAM6F,MAAM7F,MAAM/I,GAGvE,IAAIwP,MAAMwB,QAAQrN,KAAKT,EAAGS,KAAKR,GAK/B,OAAOmM,oBAAoB3L,KAAM6L,OAJ7B7L,KAAKgM,MAAQf,MAAMO,OAO3BpO,OACI,IAAIsK,KAAO,IAEX,OAAQ1H,KAAKgM,OACT,KAAKf,MAAMO,MACP9D,KAAOkF,eAAa5M,KAAK+M,WACzB,MACJ,KAAK9B,MAAMQ,KACP,OAGRzB,OAAOc,MAAM9K,KAAKT,EAAGS,KAAKR,EAAGkI,Of8tCjC,IAAI4F,UAAY,CACf,CACCC,KAAM,cACNZ,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCY,KAAM,cACNZ,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCY,KAAM,aACNZ,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCY,KAAM,gBACNZ,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCY,KAAM,qBACNC,KAAM,GACNC,SAAU,EACVd,OAAQ,CACP,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,kFACA,oFAGF,CACCY,KAAM,WACNZ,OAAQ,CACP,kFACA,kFACA,kF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","file":"app.js","sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * Miscellaneous, individually exported functions that don't fit anywhere else.\n     *\n     * In many games I'll stick all my random math, geometry, and clipping stuff here,\n     * but in this game there's actually not a lot of extra math to do (mostly because\n     * we can only move one \"character\" at a time, and there's not any AI to speak of,\n     * so no flood fills or other algorithms to consider).\n     */\n\n    function rgba(r, g, b, a) {\n        return `rgba(${r},${g},${b},${a})`;\n    }\n\n    function createCanvas(width, height) {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        return { canvas, ctx };\n    }\n\n    /**\n     * This module is generated by `gulp buildAssets`.\n     */\n    const SpriteSheet =\n        /* <generated> */\n    { font: [ [ 0, 0, 128, 512 ] ], uri: 'sprites.png' };\n    /* </generated> */\n\n    /**\n     * Global constants for our game.\n     *\n     * I export all constants individually and import just the ones I want in each file that\n     * uses them. In theory this helps with tree-shaking and lets you see at a glance which\n     * files use which constants, but mostly it works only because this is a small game. If you\n     * have hundreds of constants it's probably better to export a single `Constants` object and\n     * let them be namespaced.\n     */\n\n    // The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n    // pixels, we care about the ASCII display area (80x25).\n    //\n    // Actually the original was likely an 80x24. We can use either here, whatever looks good in the browser.\n    const SCREEN_WIDTH = 80;\n    const SCREEN_HEIGHT = /*25*/ 24;\n\n    // The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\n    const CHAR_WIDTH = 8;\n    const CHAR_HEIGHT = 16;\n\n    // A screen scale factor. This scale factor multiplies the entire screen size so that\n    // we can then introduce text artifacts (like character glow and scan lines), to give it\n    // a little of that 1982 feel.\n    const SCREEN_SCALE = 4;\n\n    // The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n    // may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\n    //\n    // Note the extra little padding of a character, which just prevents our text from butting right\n    // against the edge of the browser window.\n    const GAME_WIDTH = (SCREEN_WIDTH + 1) * CHAR_WIDTH * SCREEN_SCALE;\n    const GAME_HEIGHT = (SCREEN_HEIGHT + 1) * CHAR_HEIGHT * SCREEN_SCALE;\n\n    // Fixed level size\n    const LEVEL_ROWS = 20;\n    const LEVEL_COLS = 79;\n\n    // Play speeds, expressed as frames per second.\n    //\n    // According to the original, the play speeds had millisecond delays of:\n    //   [100ms, 50ms, 25ms, 13ms, 7ms].\n    //\n    // This would mean the effective FPS was:\n    //   [10, 20, 40, 76, 142].\n    //\n    // I think this is way too high, and might not be accurate (it doesn't count\n    // time spent drawing the screen and running the game's logic, which might\n    // be a significant number of milliseconds). From memory, each speed was about\n    // 50% faster than the previous one, so that's what I've set here.\n    const PLAY_SPEEDS = [120, 100, 90, 50, 30];\n\n    // Maximum number of rocks on screen at once\n    const MAX_ROCKS = 7;\n\n    // Each dispenser on the level increases max rocks by 1\n    const DISPENSER_MAX_ROCKS = 1;\n\n    // Hidden difficulty factor - the game gets 5% faster each level cycle\n    const HIDDEN_FACTOR_PLAY_SPEED = 0.05;\n\n    // Hidden difficulty factor - the maximum number of rocks increases each level cycle\n    const HIDDEN_FACTOR_MAX_ROCKS = 2;\n\n    // Score events (note, these are just identifiers for the types of score increases, not\n    // actual score values).\n    const SCORE_ROCK = 1;\n    const SCORE_STATUE = 2;\n    const SCORE_TREASURE = 3;\n\n    // 1-Up\n    const NEW_LIFE_SCORE = 10_000;\n\n    /**\n     * Viewport\n     *\n     * Represents the game display (for us, a canvas).\n     */\n    const Viewport = {\n        init() {\n            Viewport.canvas = document.getElementById('canvas');\n            Viewport.ctx = Viewport.canvas.getContext('2d');\n            Viewport.resize(true);\n        },\n\n        // Resize the canvas to give us approximately our desired game display size.\n        //\n        // Rather than attempt to explain it, here's a concrete example:\n        //\n        //     we start with a desired game dimension:   480x270px\n        //          get the actual browser dimensions:  1309x468px\n        //          factor in the display's DPI ratio:  2618x936px\n        //         now calculate the horizontal scale:       5.45x\n        //                     and the vertical scale:       3.46x\n        //            our new offical game scaling is:        5.4x\n        //       and our official viewport dimensions:   484x173px\n        //\n        // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n        // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n        // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n        // UI elements the player cannot see!).\n        resize(force) {\n            let dpi = window.devicePixelRatio,\n                width = Viewport.canvas.clientWidth,\n                height = Viewport.canvas.clientHeight,\n                dpiWidth = width * dpi,\n                dpiHeight = height * dpi;\n\n            if (\n                force ||\n                Viewport.canvas.width !== dpiWidth ||\n                Viewport.canvas.height !== dpiHeight\n            ) {\n                Viewport.canvas.width = dpiWidth;\n                Viewport.canvas.height = dpiHeight;\n\n                Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n                Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n                Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n                Viewport.center = {\n                    u: (Viewport.width / 2) | 0,\n                    v: (Viewport.height / 2) | 0\n                };\n                Viewport.clientWidth = width;\n                Viewport.clientHeight = height;\n\n                // Note: smoothing flag gets reset on every resize by some browsers, which is why\n                // we do it here.\n                Viewport.ctx.imageSmoothingEnabled = false;\n            }\n\n            // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n            Viewport.canvas.style.cursor = 'not-allowed';\n        }\n    };\n\n    /**\n     * Sprite\n     *\n     * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n     * modifying them or constructing using primitives. To save space, we use some techniques\n     * like storing only a small slice of an image in the spritesheet, then using code\n     * to duplicate it, add some randomness, etc.\n     */\n    const Sprite = {\n        // This is an exception to the rule, loading the spritesheet is a special action that\n        // happens BEFORE everything is initialized.\n        loadSpritesheet(cb) {\n            let image = new Image();\n            image.onload = cb;\n            image.src = SpriteSheet.uri;\n            Sprite.sheet = image;\n        },\n\n        init() {\n            // Base pixel font and icons (see `Text.init` for additional variations)\n            Sprite.font = initBasicSprite(SpriteSheet.font[0]);\n        },\n\n        /**\n         * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n         * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n         * that's appropriate!\n         */\n        drawSprite(ctx, sprite, u, v) {\n            ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n        },\n\n        drawViewportSprite(sprite, pos, rotation) {\n            let { u, v } = this.viewportSprite2uv(\n                sprite,\n                pos\n            );\n            if (rotation) {\n                Viewport.ctx.save();\n                Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n                Viewport.ctx.rotate(rotation);\n                Viewport.ctx.drawImage(\n                    sprite.img,\n                    -sprite.anchor.x,\n                    -sprite.anchor.y\n                );\n                Viewport.ctx.restore();\n            } else {\n                Viewport.ctx.drawImage(sprite.img, u, v);\n            }\n        },\n\n        viewportSprite2uv(sprite, pos) {\n            return {\n                u: pos.x - sprite.anchor.x - Game.camera.pos.x + Viewport.center.u,\n                v: pos.y - sprite.anchor.y - Game.camera.pos.y + Viewport.center.v\n            };\n        }\n    };\n\n    // Sprite utility functions\n\n    function initBasicSprite(data, anchor) {\n        return initDynamicSprite(loadCacheSlice(...data), anchor);\n    }\n\n    function initDynamicSprite(source, anchor) {\n        let w = source.width,\n            h = source.height;\n\n        return {\n            img: source,\n            anchor: anchor || { x: (w / 2) | 0, y: (h / 2) | 0 }\n        };\n    }\n\n    function loadCacheSlice(x, y, w, h) {\n        const source = Sprite.sheet;\n        const sliceCanvas = createCanvas(w, h);\n        sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n        return sliceCanvas.canvas;\n    }\n\n    // zzfx() - the universal entry point -- returns a AudioBufferSourceNode\n    const zzfx=(...t)=>zzfxP(zzfxG(...t));\n\n    // zzfxP() - the sound player -- returns a AudioBufferSourceNode\n    const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e};\n\n    // zzfxG() - the sound generator -- returns an array of sample data\n    const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z};\n\n    // zzfxV - global volume\n    const zzfxV=.3;\n\n    // zzfxR - global sample rate\n    const zzfxR=44100;\n\n    // zzfxX - the common audio context\n    const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n    // destination for zzfx and zzfxm sounds\n    zzfx.destination_ = zzfxX.destination;\n\n    /**\n     * `Audio` is a singleton that controls sound effects within the game.\n     *\n     * The original game was only capable of the built-in \"BEEP\" sound in\n     * the terminal, and used it for score bumps (playing it repeatedly\n     * if you win a level, similar to the way we do in this version).\n     *\n     * We have a little more flexibility here and we're using very simple\n     * sounds built using zzfx. For examples like these check out the zzfx\n     * project, especially the soundboard at:\n     *\n     *     https://codepen.io/KilledByAPixel/details/BaowKzv\n     */\n\n    const Audio = {\n        init() {\n            Audio.readyToPlay = false;\n\n            Audio.ctx = zzfxX;\n            Audio.gain_ = Audio.ctx.createGain();\n            Audio.gain_.connect(Audio.ctx.destination);\n            zzfx.destination_ = Audio.gain_;\n\n            // Sounds\n            Audio.begin = [,,539,0,.04,.29,1,1.92,,,567,.02,.02,,,,.04];\n            Audio.jump = [,.1,75,.03,.08,.17,1,1.88,7.83,,,,,.4];\n            Audio.score = [.7,.08,1675,,.06,.16,1,1.82,,,837,.06];\n            Audio.dying = [,,925,.04,.3,.6,1,.3,,6.27,-184,.09,.17];\n\n            // Sound throttling - for sounds that might play too often, we\n            // can setup a throttle so X milliseconds must pass before playing\n            // that particular sound again.\n            Audio.soundThrottle = new Map();\n            Audio.soundDelays = new Map();\n            Audio.soundDelays.set(Audio.score, 160);\n        },\n\n        update() {\n            if (!Audio.readyToPlay) return;\n\n            if (!Audio.musicPlaying) {\n                //Audio.bgmusicnode = zzfxP(...Audio.song);\n                //Audio.bgmusicnode.loop = true;\n                Audio.musicPlaying = true;\n            }\n        },\n\n        play(sound) {\n            if (!Audio.readyToPlay) return;\n\n            let now = new Date().getTime();\n            let allowed = Audio.soundThrottle.get(sound) || 0;\n            let delay = Audio.soundDelays.get(sound) || 0;\n\n            if (now >= allowed) {\n                zzfx(...sound);\n                Audio.soundThrottle.set(sound, now + delay);\n            }\n        },\n\n        // It's important we do pausing and unpausing as specific events and not in general update(),\n        // because update() is triggered by the animation frame trigger which does not run if the\n        // page is not visible. (So, if you want the music to fade in the background, for example,\n        // that's not helpful if it won't work because you aren't looking at the page!)\n\n        pause() {\n            Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n        },\n\n        unpause() {\n            Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n        }\n    };\n\n    /**\n     * `Input` is a singleton that helps us map keyboard events in the browser\n     * to in-game actions.\n     *\n     * We generally care about two types of input events:\n     *\n     *  - An \"action\" is a specific action recognizable by the game, like moving right\n     *    or jumping. In theory, if this was a more complicated game, there could be\n     *    many ways to cause a specific action (maybe user presses SPACEBAR to jump,\n     *    or they click RIGHT MOUSE BUTTON, or they tap A on a gamepad, etc.). For this\n     *    reason, it helps to separate processing in-game actions from processing the\n     *    raw keyboard events that cause them.\n     *\n     *  - Actual key presses. There are situations where we need a more broad view of\n     *    the user's key presses, for example, if they are typing in their name for a\n     *    high score or pressing one of the inputs at the main menu. In this case we\n     *    want to know \"did the user tap P?\", as opposed to mapping the keys to actions.\n     */\n\n    // A list of in-game actions that can be performed by the player\n    const Action = {\n        UP:     11,\n        DOWN:   12,\n        LEFT:   13,\n        RIGHT:  14,\n        JUMP:   15,\n        STOP:   16,\n        PAUSE:  17,\n        RESUME: 18\n    };\n\n    // A list of key code mappings and what action they perform. Here we hard-code it, but\n    // you could easily also have the key mappings controlled by settings and let the user\n    // configure it.\n    const KeyMapping = {\n        KeyW:       Action.UP,\n        KeyS:       Action.DOWN,\n        KeyA:       Action.LEFT,\n        KeyD:       Action.RIGHT,\n        ArrowUp:    Action.UP,\n        ArrowDown:  Action.DOWN,\n        ArrowLeft:  Action.LEFT,\n        ArrowRight: Action.RIGHT,\n        Space:      Action.JUMP,\n        Escape:     Action.PAUSE,\n        Enter:      Action.RESUME\n    };\n\n    const Input = {\n        Action,\n        KeyMapping,\n\n        init() {\n            // Input buffer - new keypress events go into this buffer to be handled\n            // during the game's update loop. It's up to the `update()` methods to consume\n            // key presses and remove them from the buffer.\n            this.buffer = [];\n\n            // Input history - history contains recent key press events in order,\n            // removed automatically after a few seconds. This is useful for detecting\n            // inputs like cheat codes, for example.\n            //\n            // (Actually, cheat codes is the only use for this extra history buffer, so\n            // if you didn't support cheat codes you could delete it altogether.)\n            this.history = [];\n\n            window.addEventListener('keydown', event => {\n                let entry = {\n                    at: new Date().getTime(),\n                    key: event.key,\n                    code: event.code,\n                    action: Input.KeyMapping[event.code] || Input.Action.STOP\n                };\n                Input.buffer.push(entry);\n                Input.history.push(entry);\n                console.log(entry);\n\n                // Hack to ensure we initialize audio after user interacts with the game. Sometimes\n                // the browser will just ignore attempts to play audio if the user has not interacted\n                // with the page yet, but some browsers/versions will actually error out (either\n                // stopping the game itself, or preventing later audio playing). So it's better to\n                // plan for it explicitly.\n                Audio.readyToPlay = true;\n            });\n        },\n\n        update() {\n            let now = new Date().getTime();\n            this.history = this.history.filter(entry => entry.at > now - 3000);\n        },\n\n        lastKey() {\n            // A shortcut helper for code that cares about what KEY was pressed.\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n        },\n\n        lastAction() {\n            // A shortcut helper for code that cares about what ACTION was taken.\n            return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n        },\n\n        consume(clearHistory) {\n            this.buffer = [];\n\n            // Normally, \"consuming\" all existing buffer input is something that happens\n            // somewhere in the game logic. If we just detected and acted on a cheat code,\n            // though, we want to clear the history too, otherwise we'll just keep behaving\n            // like the user is entering the cheat code every frame.\n            if (clearHistory) this.history = [];\n        }\n    };\n\n    /**\n     * `Text` is a singleton responsible for drawing text characters on the viewport. This\n     * game uses a custom pixel font, so we need to implement some basic text handling\n     * (splitting long lines, measuring character width, etc.) ourselves.\n     */\n\n    // In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n    // characters are convenient for us. Here we can choose to map unicode characters to positions\n    // 0x80+ in the charsheet, making it easy for us to render things like special characters,\n    // box drawing characters, etc.\n    //\n    // Note: I like pasting actual characters instead of codes (\"├\" instead of \"\\u251C\"). If you\n    // do this, don't forget to explicitly tell the browser what charset your JS file is, or it\n    // won't execute -- see `index.html` for an example.\n    const SUPPORTED_UNICODE_CHARS = [\n        '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n        '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n        '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n    ].join('');\n\n    const UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n        map[char] = 0x80 + idx;\n        return map;\n    }, {});\n\n    /**\n     * Text\n     *\n     * Utilities for drawing text using in-game pixel font.\n     */\n    const Text = {\n        init() {\n            // The \"white\" font sheet, right from the sprite.\n            Text.white = { img: Sprite.font.img, scale: 1, border: 0, margin: 0 };\n\n            // Recolored versions of the original font sheet, to use when constructing our glow.\n            //\n            // The color here is #33FF00 which is roughly the glow of the Kaypro II.\n            Text.terminal = recolor(Text.white, rgba(51 + 16, 255, 0 + 16, 1));\n            Text.terminal_shadow = recolor(Text.white, rgba(51, 255, 0, 0.4));\n\n            // \"Glowing\" a bunch of characters on-screen is just too slow when you're doing 5\n            // draw calls for every individual character. To avoid that, we can build a new\n            // sprite sheet that is pre-scaled with the glow built in.\n            Text.glow = bakeFontGlow(Text.terminal, Text.terminal_shadow, SCREEN_SCALE, 2, 2);\n        },\n\n        drawText(ctx, text, u, v, font = Text.terminal) {\n            // The math gymnastics are a little hard to read (apologies). To render the\n            // font asked for correctly, we need to have the font sheet image, the scale,\n            // the border and the margin.\n            //\n            // The \"scale\" informs us what PRESCALING is applied to the font sheet, so\n            // we know how big to render it (we don't do additional scaling here).\n            //\n            // The \"border\" tells us how many PRE-SCALE pixels of border exist in this\n            // image. A border of 2 means a total of 2 pixels (so 1 on every side) were\n            // used. This is pre-scale, so if the scale is 4, that means there are 4 pixels\n            // of \"space\" around each character in the font sheet.\n            //\n            // The \"margin\" tells us how many POST-SCALE pixels of margin exist (in practice\n            // this means, how many pixels of glow surround the character). You want to subtract\n            // this margin when rendering the character so the character body is in the expected\n            // spot on screen.\n            let { img, scale, border, margin } = font;\n\n            if (Array.isArray(text)) {\n                for (let block of text) {\n                    Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, font);\n                }\n                return;\n            }\n\n            for (let idx = 0; idx < text.length; idx++) {\n                let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n                let k = (c - 0) * (CHAR_WIDTH + border);\n                let drawable = (c !== 32);\n\n                // We clear the canvas in every frame, and it's a HUGE speed advantage not to draw an\n                // empty image (this check can save 1000+ drawImage calls a frame).\n                if (drawable) {\n                    ctx.drawImage(\n                        img,\n                        (k * scale) % img.width,\n                        Math.floor((k * scale) / (img.width)) * (CHAR_HEIGHT + border) * scale,\n                        CHAR_WIDTH * scale,\n                        CHAR_HEIGHT * scale,\n                        u + margin,\n                        v + margin,\n                        CHAR_WIDTH * scale,\n                        CHAR_HEIGHT * scale\n                    );\n                }\n                u += CHAR_WIDTH * scale;\n            }\n        },\n\n        measureWidth(text, scale = 1) {\n            return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n        },\n\n        splitParagraph(text, w, h) {\n            let cu = 0, cv = 0;\n            let next = () => ({ text: '', u: cu, v: cv });\n            let wip = next();\n            let list = [];\n\n            for (let c of text.split('')) {\n                let cWidth = Text.measureWidth(c, 1);\n                if (c === '\\n' || cu + cWidth > w) {\n                    let saved = '';\n                    if (c !== '\\n' && c !== ' ') {\n                        let space = wip.text.split(' ');\n                        if (space.length > 1) {\n                            saved = space.pop();\n                            wip.text = space.join(' ');\n                        }\n                    }\n                    if (wip.text.length > 0) list.push(wip);\n                    cu = 0;\n                    cv += (CHAR_HEIGHT);\n                    wip = next();\n                    if (saved.length > 0) {\n                        wip.text = saved;\n                        cu += Text.measureWidth(wip.text, 1);\n                    }\n                } else {\n                    cu += cWidth;\n                }\n                if (c !== '\\n') {\n                    wip.text = wip.text + c;\n                }\n            }\n\n            if (wip.text.length > 0) list.push(wip);\n\n            return list.map(line => ({\n                ...line,\n                w: Text.measureWidth(line.text, 1),\n                h: CHAR_HEIGHT\n            }));\n        }\n    };\n\n    // Text utility functions, for manipulating the font sheet images\n\n    function recolor(font, color) {\n        let canvas = createCanvas(font.img.width, font.img.height);\n        canvas.ctx.fillStyle = color;\n        canvas.ctx.fillRect(0, 0, font.img.width, font.img.height);\n        canvas.ctx.globalCompositeOperation = 'destination-in';\n        canvas.ctx.drawImage(font.img, 0, 0);\n\n        // Return a new font with the same metadata, but a recolored image\n        return {\n            ...font,\n            img: canvas.canvas\n        };\n    }\n\n    function bakeFontGlow(font, glow, scale, border, margin) {\n        // This function is a little complicated because it has to do several things at once.\n        //\n        // The idea is:\n        //  - Take our original sheet of 8x16 characters\n        //  - Build a NEW sheet, with additional \"border\" around each character, so that there is\n        //    room for us to add a glow around each character without bleeding into our neighbors.\n        //  - We want the glow baked in at an upscaled pixel size.\n        //\n        // What is the upscaled pixel size? Here for example, we are scaling up from 8x16 pixels\n        // to 32x64 pixels for each characters. We then want the GLOW added around this new\n        // 32x64 character, not the original size (this allows us to have a glow more tight than\n        // the original chunky pixels we started with).\n        //\n        // A complication of HTML Canvas is that if you draw from a source canvas into a destination\n        // canvas at a higher scale, you will \"bleed\" neighboring pixels from the source canvas.\n        // To avoid this, we use a second temporary canvas and draw from the source into the temporary\n        // canvas with no upscaling, then we draw from the temporary canvas into the upscaled canvas.\n        //\n        // (This means double the draws, but we only do this step once when the game loads, so it's\n        // not a big deal.)\n        let cols = font.img.width / CHAR_WIDTH, rows = font.img.height / CHAR_HEIGHT;\n\n        let temp = createCanvas(CHAR_WIDTH, CHAR_HEIGHT);\n        let canvas = createCanvas(\n            cols * (CHAR_WIDTH + border) * scale,\n            rows * (CHAR_HEIGHT + border) * scale\n        );\n\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                // Glow (rendered on all 4 sides)\n                temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n                temp.ctx.drawImage(\n                    glow.img,\n                    x * CHAR_WIDTH,\n                    y * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin,\n                    y * (CHAR_HEIGHT + border) * scale,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale,\n                    y * (CHAR_HEIGHT + border) * scale + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin * 2,\n                    y * (CHAR_HEIGHT + border) * scale + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin,\n                    y * (CHAR_HEIGHT + border) * scale + margin * 2,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n\n                // Center character\n                temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n                temp.ctx.drawImage(\n                    font.img,\n                    x * CHAR_WIDTH,\n                    y * CHAR_HEIGHT,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT\n                );\n                canvas.ctx.drawImage(\n                    temp.canvas,\n                    0, 0,\n                    CHAR_WIDTH,\n                    CHAR_HEIGHT,\n                    x * (CHAR_WIDTH + border) * scale + margin,\n                    y * (CHAR_HEIGHT + border) * scale + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n            }\n        }\n\n        return { img: canvas.canvas, scale, border, margin };\n    }\n\n    /**\n     * `Screen` is a singleton that represents the virtual 80x25 character screen our game\n     * lives in. Components like PlayingField will \"draw\" (write text onto) this virtual\n     * screen each frame. Once all the text is written, the text will end up rendered on\n     * the viewport (canvas) in the browser.\n     */\n\n    const Screen = {\n        init() {\n            this.screen = [];\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                this.screen.push([]);\n            }\n            this.clear();\n        },\n\n        clear() {\n            for (let y = 0; y < SCREEN_HEIGHT; y++) {\n                for (let x = 0; x < SCREEN_WIDTH; x++) {\n                    this.screen[y][x] = ' ';\n                }\n            }\n        },\n\n        write(x, y, text) {\n            if (!Array.isArray(text)) text = [text];\n\n            for (let j = 0; j < text.length; j++) {\n                for (let i = 0; i < text[j].length; i++) {\n                    this.screen[y + j][x + i] = text[j][i];\n                }\n            }\n        },\n\n        draw(ctx) {\n            let text = this.screen.map(row => row.join('')).join('\\n');\n\n            Text.drawText(\n                ctx,\n                Text.splitParagraph(text, Viewport.width),\n                0, 0,\n                Text.glow\n            );\n        }\n    };\n\n    var GameVersion = \"0.4.0\";\n\n    /**\n     * `MainMenu` is a class that represents a screen the user can view. Instances of\n     * MainMenu are constructed whenever we want the user to go to the main menu, and\n     * thrown away when we're done.\n     */\n\n    class MainMenu {\n        update() {\n            switch (Input.lastKey().toUpperCase()) {\n                case 'P':\n                    Input.consume();\n                    Game.startSession();\n                    break;\n                case 'L':\n                    Input.consume();\n                    Game.playSpeed = (Game.playSpeed + 1) % PLAY_SPEEDS.length;\n                    break;\n                case 'I':\n                    Input.consume();\n                    Game.showInstructions();\n                    break;\n                case 'E':\n                    Input.consume();\n                    Game.showInstructions();\n                    break;\n            }\n        }\n\n        draw() {\n            let terminal = 'Quiche MkII';\n\n            let highScores = [\n                `1) 6000  Bob`,\n                `2) 6000  Tom`,\n                `3) 4000  Wayne`,\n                ``,\n                ``\n            ];\n\n            Screen.clear();\n            Screen.write(0, 0, [\n                `               LL                     dd       dd`,\n                `               LL                     dd       dd                      tm`,\n                `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n                `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n                `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n                ``,\n                `                                       Version:    ${GameVersion}`,\n                `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n                `10970 Ashton Ave.  Suite 312           Play speed: ${Game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n                `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n                `                                       Stop = Other`,\n                ``,\n                `P = Play game                          High Scores`,\n                `L = Change level of difficulty         ${highScores[0]}`,\n                `C = Configure Ladder                   ${highScores[1]}`,\n                `I = Instructions                       ${highScores[2]}`,\n                `E = Exit Ladder                        ${highScores[3]}`,\n                `                                       ${highScores[4]}`,\n                ``,\n                `Enter one of the above:`\n            ]);\n        }\n    }\n\n    class InstructionsMenu {\n        constructor() {\n        }\n\n        update() {\n            if (Input.lastKey().toUpperCase() !== '') {\n                Input.consume();\n                Game.showMainMenu();\n            }\n        }\n\n        draw() {\n            Screen.clear();\n            Screen.write(0, 0, [\n                `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n                `dark corridors never before seen by human eyes and find hidden`,\n                `treasures and riches.`,\n                ``,\n                `You control Lad by typing the direction buttons and jumping by`,\n                `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n                `You must find and grasp the treasures (shown as $) BEFORE the`,\n                `bonus time runs out.`,\n                ``,\n                `A new Lad will be awarded for every 10,000 points.`,\n                `Extra points are awarded for touching the gold`,\n                `statues (shown as &).  You will receive the bonus time points`,\n                `that are left when you have finished the level.`,\n                ``,\n                `Type an ESCape to pause the Game`,\n                ``,\n                `Remember, there is more than one way to skin a cat. (Chum)`,\n                ``,\n                `Good luck Lad.`,\n                ``,\n                ``,\n                ``,\n                `Type RETURN to return to main menu:`\n            ]);\n        }\n    }\n\n    /**\n     * A collection of states and functions related to entities.\n     */\n\n    // A list of states usable by entities. Some states only apply to players (rocks can't jump).\n    //\n    // Many of these are actually DIRECTIONS, but since this game has \"pac man movement\", a\n    // direction is a state -- the player will keep moving in the tapped direction until the player\n    // enters a new input.\n    const State = {\n        STOPPED:    1,         // Standing still\n        UP:         2,         // Moving up (player only)\n        LEFT:       3,         // Moving left\n        DOWN:       4,         // Moving down\n        RIGHT:      5,         // Moving right\n        FALLING:    6,         // Falling\n        START_JUMP: 7,         // About to start a jump (player only)\n        JUMP_LEFT:  8,         // Jumping left (player only)\n        JUMP_RIGHT: 9,         // Jumping right (player only)\n        JUMP_UP:    10,        // Jumping straight up (player only)\n        DYING:      11,        // Dying (used as a death animation)\n        DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n    };\n\n    // This constant controls the \"shape\" of the left, right, and straight-up jumps by\n    // the player. Note that the straight-up jump gets 1 frame less of airtime than\n    // the left and right jumps.\n    const JUMP_FRAMES = {\n        [State.JUMP_RIGHT]: [\n            { x: 1, y: -1 },\n            { x: 1, y: -1 },\n            { x: 1, y: 0 },\n            { x: 1, y: 0 },\n            { x: 1, y: 1 },\n            { x: 1, y: 1 }\n        ],\n        [State.JUMP_LEFT]: [\n            { x: -1, y: -1 },\n            { x: -1, y: -1 },\n            { x: -1, y: 0 },\n            { x: -1, y: 0 },\n            { x: -1, y: 1 },\n            { x: -1, y: 1 }\n        ],\n        [State.JUMP_UP]: [\n            { x: 0, y: -1 },\n            { x: 0, y: -1 },\n            { x: 0, y: 0 },\n            { x: 0, y: 1 },\n            { x: 0, y: 1 },\n            { x: 0, y: 0 }\n        ]\n    };\n\n    function applyEntityMovement(entity, field) {\n        let repeat = false;\n\n        // This method contains generic \"movement\" application for all entities, including\n        // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n        // work the same for both.\n        //\n        // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n        // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n        if (entity.nextState) {\n            switch (entity.state) {\n                case State.STOPPED:\n                case State.LEFT:\n                case State.RIGHT:\n                    if ([State.LEFT, State.RIGHT, State.STOPPED].includes(entity.nextState)) {\n                        entity.state = entity.nextState;\n                        entity.nextState = undefined;\n                    }\n                    break;\n\n                case State.UP:\n                case State.DOWN:\n                    // Normal\n                    if ([State.LEFT, State.RIGHT].includes(entity.nextState)) {\n                        entity.state = entity.nextState;\n                        entity.nextState = undefined;\n                    }\n                    break;\n\n                case State.JUMP_LEFT:\n                case State.JUMP_RIGHT:\n                case State.JUMP_UP:\n                    if (entity.nextState === State.RIGHT && entity.state != State.JUMP_RIGHT) {\n                        entity.state = State.JUMP_RIGHT;\n                        entity.nextState = State.RIGHT;\n                    }\n                    if (entity.nextState === State.LEFT && entity.state != State.JUMP_LEFT) {\n                        entity.state = State.JUMP_LEFT;\n                        entity.nextState = State.LEFT;\n                    }\n                    if (entity.nextState === State.DOWN) {\n                        entity.state = State.FALLING;\n                        entity.nextState = undefined;\n                    }\n                    if (entity.nextState === State.UP) ;\n                    break;\n            }\n        }\n\n        if (entity.nextState === State.START_JUMP) {\n            // Special case: the user wants to jump!\n            //\n            // If the player is standing on something solid, we initiate a jump based on the current\n            // movement of the player.\n            if (field.onSolid(entity.x, entity.y)) {\n                if (entity.state === State.STOPPED || entity.state === State.FALLING) {\n                    entity.state = State.JUMP_UP;\n                    entity.jumpStep = 0;\n                    entity.nextState = State.STOPPED;\n                } else if (entity.state === State.LEFT || entity.state === State.JUMP_LEFT) {\n                    entity.state = State.JUMP_LEFT;\n                    entity.jumpStep = 0;\n                    entity.nextState = State.LEFT;\n                } else if (entity.state === State.RIGHT || entity.state === State.JUMP_RIGHT) {\n                    entity.state = State.JUMP_RIGHT;\n                    entity.jumpStep = 0;\n                    entity.nextState = State.RIGHT;\n                }\n                Audio.play(Audio.jump);\n            }\n        } else if (entity.nextState === State.UP && field.isLadder(entity.x, entity.y)) {\n            // Special case: the user wants to go up!\n            //\n            // If the user is on a ladder, we can start ascending. Note that if the user is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap UP a little before reaching the ladder.\n            entity.state = State.UP;\n            entity.nextState = undefined;\n        } else if (entity.nextState === State.DOWN && (field.isLadder(entity.x, entity.y) || field.isLadder(entity.x, entity.y + 1))) {\n            // Special case: the player wants to go down!\n            //\n            // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n            // on a ladder we ignore their input, which is intentional -- this allows queued\n            // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n            entity.state = State.DOWN;\n            entity.nextState = undefined;\n        }\n\n        switch (entity.state) {\n            case State.LEFT:\n                if (!field.onSolid(entity.x, entity.y)) {\n                    entity.nextState = State.LEFT;\n                    entity.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(entity.x - 1, entity.y)) {\n                    entity.x--;\n                } else {\n                    entity.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.RIGHT:\n                if (!field.onSolid(entity.x, entity.y)) {\n                    entity.nextState = State.RIGHT;\n                    entity.state = State.FALLING;\n                    repeat = true;\n                    break;\n                }\n                if (field.emptySpace(entity.x + 1, entity.y)) {\n                    entity.x++;\n                } else {\n                    entity.nextState = State.STOPPED;\n                }\n                break;\n\n            case State.UP:\n                if (field.canClimbUp(entity.x, entity.y - 1)) {\n                    entity.y--;\n                } else {\n                    entity.state = State.STOPPED;\n                }\n                break;\n\n            case State.DOWN:\n                if (field.canClimbDown(entity.x, entity.y + 1)) {\n                    entity.y++;\n                } else {\n                    entity.state = State.STOPPED;\n                }\n                break;\n\n            case State.JUMP_RIGHT:\n            case State.JUMP_LEFT:\n            case State.JUMP_UP:\n                let step = JUMP_FRAMES[entity.state][entity.jumpStep];\n                if ((entity.x + step.x >= 0) && (entity.x + step.x < LEVEL_COLS)) {\n                    let terrain = field.layout[entity.y + step.y][entity.x + step.x];\n                    if (['=', '|', '-'].includes(terrain)) {\n                        if (field.onSolid(entity.x, entity.y)) {\n                            entity.state = entity.nextState;\n                            entity.nextState = undefined;\n                        } else {\n                            switch (entity.state) {\n                                case State.JUMP_RIGHT:\n                                    entity.nextState = State.RIGHT;\n                                    break;\n                                case State.JUMP_LEFT:\n                                    entity.nextState = State.LEFT;\n                                    break;\n                                case State.JUMP_UP:\n                                    entity.nextState = State.UP;\n                                    break;\n                            }\n                            entity.state = State.FALLING;\n                        }\n                    } else if (terrain === 'H') {\n                        entity.x += step.x;\n                        entity.y += step.y;\n\n                        if (entity.nextState === State.UP) {\n                            entity.state = State.UP;\n                        } else {\n                            entity.state = State.STOPPED;\n                        }\n                        entity.nextState = undefined;\n                    } else {\n                        entity.x += step.x;\n                        entity.y += step.y;\n                        entity.jumpStep++;\n\n                        if (entity.jumpStep >= JUMP_FRAMES[entity.state].length) {\n                            switch (entity.state) {\n                                case State.JUMP_RIGHT:\n                                    entity.state = State.RIGHT;\n                                    break;\n                                case State.JUMP_LEFT:\n                                    entity.state = State.LEFT;\n                                    break;\n                                case State.JUMP_UP:\n                                    entity.state = State.UP;\n                                    break;\n                            }\n                        }\n                    }\n                } else {\n                    if (field.onSolid(entity.x, entity.y)) {\n                        entity.state = entity.nextState;\n                        entity.nextState = undefined;\n                    } else {\n                        entity.state = State.FALLING;\n                        entity.nextState = State.STOPPED;\n                    }\n                }\n                break;\n\n            case State.FALLING:\n                if (field.onSolid(entity.x, entity.y)) {\n                    entity.state = entity.nextState || State.STOPPED;\n                } else {\n                    entity.y++;\n                }\n                break;\n        }\n\n        // If we were attempting to move somewhere and realized we should be falling instead,\n        // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n        // frame\" from the user's point of view.\n        if (repeat) return applyEntityMovement(entity, field);\n    }\n\n    const DEATH_FRAMES = ['p', 'p', 'b', 'b', 'd', 'd', 'q', 'q', 'p', 'p', 'b', 'b', 'd', 'd', 'q', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n    /**\n     * Player\n     */\n    class Player {\n        constructor(x, y) {\n            this.x = x;\n            this.y = y;\n            this.state = State.STOPPED;\n            this.nextState = State.STOPPED;\n            this.queued = [];\n            this.jumpStep = 0;\n            this.deathStep = 0;\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            let action = Input.lastAction();\n\n            if (action === Input.Action.LEFT) {\n                this.nextState = State.LEFT;\n                Input.consume();\n            } else if (action === Input.Action.RIGHT) {\n                this.nextState = State.RIGHT;\n                Input.consume();\n            } else if (action === Input.Action.UP) {\n                this.nextState = State.UP;\n                Input.consume();\n            } else if (action === Input.Action.DOWN) {\n                this.nextState = State.DOWN;\n                Input.consume();\n            } else if (action === Input.Action.JUMP) {\n                this.nextState = State.START_JUMP;\n                Input.consume();\n            }\n\n            return applyEntityMovement(this, field);\n        }\n\n        draw() {\n            let char = 'g';\n\n            switch (this.state) {\n                case State.RIGHT:\n                case State.JUMP_RIGHT:\n                case State.UP:\n                case State.DOWN:\n                    char = 'p';\n                    break;\n\n                case State.LEFT:\n                case State.JUMP_LEFT:\n                    char = 'q';\n                    break;\n\n                case State.FALLING:\n                    char = 'b';\n                    break;\n\n                case State.DYING:\n                    char = DEATH_FRAMES[this.deathStep];\n                    break;\n\n                case State.DEAD:\n                    char = '_';\n                    break;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n\n        kill() {\n            // Just a convenience method for killing the player.\n            //\n            // Note that \"killing\" the player just puts it in a dying state, we'll play\n            // a little death animation as rocks move about before the player actually dies,\n            // at which point they will lose a life and the level starts over.\n            if (this.state != State.DYING && this.state != State.DEAD) {\n                this.state = State.DYING;\n                Audio.play(Audio.dying);\n            }\n        }\n    }\n\n    /**\n     * `Rock` is a class representing the Der rocks, which fall through the level\n     * and kill the player if touched.\n     */\n\n    const DEATH_FRAMES$1 = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\n    class Rock {\n        constructor(dispenser) {\n            this.x = dispenser.x;\n            this.y = dispenser.y;\n            this.state = State.FALLING;\n            this.nextState = undefined;\n            this.deathStep = 0;\n        }\n\n        update(field, moveFrame) {\n            if (this.state === State.DYING) {\n                this.deathStep++;\n                if (this.deathStep >= DEATH_FRAMES$1.length) this.state = State.DEAD;\n            }\n\n            if (this.state === State.DYING || this.state === State.DEAD) return;\n\n            if (!moveFrame) return;\n\n            if (this.state === State.STOPPED) {\n                if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                    this.nextState = State.RIGHT;\n                } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                    this.nextState = State.LEFT;\n                } else {\n                    this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n                }\n            }\n\n            if (this.x === 0 && this.state === State.LEFT) {\n                this.state = State.RIGHT;\n            }\n\n            if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n                this.state = State.LEFT;\n            }\n\n            if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n                this.nextState = State.FALLING;\n            }\n\n            if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n                let r = Math.floor(Math.random() * 4);\n                this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n            }\n\n            if (field.isEater(this.x, this.y)) {\n                this.state = State.DYING;\n                return;\n            }\n\n            return applyEntityMovement(this, field);\n        }\n\n        draw() {\n            let char = 'o';\n\n            switch (this.state) {\n                case State.DYING:\n                    char = DEATH_FRAMES$1[this.deathStep];\n                    break;\n                case State.DEAD:\n                    return;\n            }\n\n            Screen.write(this.x, this.y, char);\n        }\n    }\n\n    var LevelData = [\n    \t{\n    \t\tname: \"Easy Street\",\n    \t\tlayout: [\n    \t\t\t\"                                       V                 $                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==================================================            \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H          H                             H                     \",\n    \t\t\t\"================H==========H==================   ========H=====================\",\n    \t\t\t\"                &          H                             H          |       |  \",\n    \t\t\t\"                                                         H         Easy Street \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"       =========H==========H=========  =======================                 \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                                              \",\n    \t\t\t\"                H                                        H                     \",\n    \t\t\t\"======================== ====================== =========H==============       \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"                                                         H                     \",\n    \t\t\t\"*    p                                                   H                    *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Long Island\",\n    \t\tlayout: [\n    \t\t\t\"                                                                          $    \",\n    \t\t\t\"                                                                   &      H    \",\n    \t\t\t\"    H       |V                                                     V|     H    \",\n    \t\t\t\"====H======================= ========================= ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                    & |                         . .                  H    \",\n    \t\t\t\"========================== ======  =================== ===================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"                                  |                                       H    \",\n    \t\t\t\"    H                             |                 .  .                  H    \",\n    \t\t\t\"====H=====================   ======  ================  ======================  \",\n    \t\t\t\"    H                                                                          \",\n    \t\t\t\"    H                      |                                                   \",\n    \t\t\t\"    H                      |                        .   .                 H    \",\n    \t\t\t\"=========================  ========    ==============   ==================H==  \",\n    \t\t\t\"                                                                          H    \",\n    \t\t\t\"==============                      |                                     H    \",\n    \t\t\t\" Long Island |   p         *        |                 *                   H    \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Ghost Town\",\n    \t\tlayout: [\n    \t\t\t\"                            V               V           V               $      \",\n    \t\t\t\"                                                                       $$$     \",\n    \t\t\t\"     p    H                                                    H      $$$$$   H\",\n    \t\t\t\"==========H===                                                =H==============H\",\n    \t\t\t\"          H                                                    H              H\",\n    \t\t\t\"          H                              &                     H              H\",\n    \t\t\t\"     ==============   ====     =    ======    =   ====    =====H=====         H\",\n    \t\t\t\"    G              ^^^    ^^^^^ ^^^^      ^^^^ ^^^    ^^^                     $\",\n    \t\t\t\"    h                                                                 |        \",\n    \t\t\t\"    o     |                     H                             &       |        \",\n    \t\t\t\"    s     ======================H============================== ===========    \",\n    \t\t\t\"    t        &                  H                                              \",\n    \t\t\t\"                                H                                              \",\n    \t\t\t\"              |                 H                 H                   H        \",\n    \t\t\t\"    T         ==================H=================H===================H======= \",\n    \t\t\t\"    o                                             H                   H        \",\n    \t\t\t\"    w                                                                 H        \",\n    \t\t\t\"    n                           ^                                     H        \",\n    \t\t\t\"*                              ^^^                                    H       *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Tunnel Vision\",\n    \t\tlayout: [\n    \t\t\t\"                                            V                       V          \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"     H             H                         |                H                \",\n    \t\t\t\"=====H=====--======H==========================     ===----====H===========     \",\n    \t\t\t\"     H             H                |&&                       H                \",\n    \t\t\t\"     H             H                ==================        H                \",\n    \t\t\t\"     H             H                       tunnel  H          H                \",\n    \t\t\t\"     H           =======---===----=================H=         H           H    \",\n    \t\t\t\"     H         |                           vision  H          H           H    \",\n    \t\t\t\"     H         =========---&      -----============H          H           H    \",\n    \t\t\t\"     H           H                                 H |        H           H    \",\n    \t\t\t\"     H           H=========----===----================        H  ==============\",\n    \t\t\t\"                 H                                        &   H                \",\n    \t\t\t\"                 H                                        |   H                \",\n    \t\t\t\"====---====      H                                        |   H                \",\n    \t\t\t\"|         |    ================---===---===================   H                \",\n    \t\t\t\"|   ===   |                                                   H        H    p  \",\n    \t\t\t\"|    $    |                                                   H     ===H=======\",\n    \t\t\t\"|*  $$$  *|   *                *       *                     *H       *H       \",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Point of No Return\",\n    \t\ttime: 35,\n    \t\tmaxRocks: 7,\n    \t\tlayout: [\n    \t\t\t\"         $                                                                     \",\n    \t\t\t\"         H                                                   V                 \",\n    \t\t\t\"         H                                                                     \",\n    \t\t\t\"         HHHHHHHHHHHHH     .HHHHHHHHHHHHHH                          H    p     \",\n    \t\t\t\"         &                   V           H                        ==H==========\",\n    \t\t\t\"                                         H                          H          \",\n    \t\t\t\"   H                                     H        .                 H          \",\n    \t\t\t\"===H==============-----------============H====                      H          \",\n    \t\t\t\"   H                                                      H         H          \",\n    \t\t\t\"   H                                                 =====H==============      \",\n    \t\t\t\"   H                                     H                H                    \",\n    \t\t\t\"   H              &..^^^.....^..^ . ^^   H==---------     H                    \",\n    \t\t\t\"   H         ============================H    &           H             H      \",\n    \t\t\t\"   H         ===      ===      ===       H    ---------=================H======\",\n    \t\t\t\"   H                                     H                              H      \",\n    \t\t\t\"   H                          &          H          &                   H      \",\n    \t\t\t\"   ==========-------------------------=======----------===================     \",\n    \t\t\t\"                                                                               \",\n    \t\t\t\"^^^*         ^^^^^^^^^^^^^^^^^^^^^^^^^*     *^^^^^^^^^^*Point of No Return*^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"Bug City\",\n    \t\tlayout: [\n    \t\t\t\"        Bug City             HHHHHHHH                          V               \",\n    \t\t\t\"                           HHH      HHH                                        \",\n    \t\t\t\"   H                                          >mmmmmmmm                        \",\n    \t\t\t\"   H===============                   ====================          H          \",\n    \t\t\t\"   H              |=====       \\\\  /         V                  =====H==========\",\n    \t\t\t\"   H                            \\\\/                                  H          \",\n    \t\t\t\"   H                                        | $                     H          \",\n    \t\t\t\"   H           H                            | H                     H          \",\n    \t\t\t\"   H       ====H=======          p          |&H    H                H          \",\n    \t\t\t\"   H           H             ======================H           ======          \",\n    \t\t\t\"   H           H      &|                           H                    H      \",\n    \t\t\t\"   H           H      &|                    H      H     }{        =====H====  \",\n    \t\t\t\"===H===&       H       =====================H      H                    H      \",\n    \t\t\t\"               H                            H      H                    H      \",\n    \t\t\t\"               H                            H      &                    H      \",\n    \t\t\t\"         ======H===   =======    H    <>    &                           H      \",\n    \t\t\t\"                                 H==========       =====     =     ============\",\n    \t\t\t\"     }i{                         H                                             \",\n    \t\t\t\"*                                H                                            *\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t},\n    \t{\n    \t\tname: \"GangLand\",\n    \t\tlayout: [\n    \t\t\t\"                    =Gang Land=                             V                  \",\n    \t\t\t\"                   ==      _  ==                                      .        \",\n    \t\t\t\"      p    H        |  [] |_| |                  &                    .  H     \",\n    \t\t\t\"===========H        |     |_| |       H         ===   ===================H     \",\n    \t\t\t\"      V    H        =============     H======                            H     \",\n    \t\t\t\"           H                          H                     &            H     \",\n    \t\t\t\"           H                          H                |    |            H     \",\n    \t\t\t\"    H      H        ^^^&&^^^ & ^  ^^^ H           H    |    =============H     \",\n    \t\t\t\"    H======H   =======================H===========H=====          &      H     \",\n    \t\t\t\"    H                                 H           H    |         &&&     H     \",\n    \t\t\t\"    H                                 H           H    |        &&&&&    H     \",\n    \t\t\t\"    H                                 H           H    |    =============H     \",\n    \t\t\t\"              =====------=================        H    |       $     $         \",\n    \t\t\t\"                                         |        H    |      $$$   $$$        \",\n    \t\t\t\"====------===                            |        H    |     $$$$$ $$$$$       \",\n    \t\t\t\"            |       =                    | =============    ============       \",\n    \t\t\t\"            |       $                     ^          &                         \",\n    \t\t\t\"            |^^^^^^^^^^^^^^      $ ^              ======                       \",\n    \t\t\t\"*                   .      &   ^ H*^                    ^  ^       ^^^^^^^^^^^^\",\n    \t\t\t\"===============================================================================\"\n    \t\t]\n    \t}\n    ];\n\n    /**\n     * `Level` is a singleton that handles logic related to loading levels. A \"level\"\n     * is a bundle of data (like layout, dispensers, player position, etc.). When you\n     * load a level, that data is used to initialize a new \"playing field\" -- this is\n     * what the player moves around on and interacts with.\n     *\n     * (Naming things is hard, so it helps to make a decision and then stick to it\n     * throughout your codebase. In this case, the decision is that a \"level\" is a\n     * static block of data about a level the user COULD play, whereas a level being\n     * actively played is called a playing field.)\n     */\n\n    const Level = {\n        LEVELS: LevelData,\n        LEVEL_COUNT: LevelData.length,\n\n        load(levelNumber) {\n            // In the original Ladder, \"level 7\" was the last level, and continuing to\n            // play looped you around to the beginning again (level 8 is Easy Street\n            // again and so on, and so is level 15, etc.).\n            let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n            if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n            // Perform some sanity checks on the level layout and extract useful info\n            // like player start position and dispenser positions etc.\n\n            let layout = level.layout.map(row => row.split(''));\n            let dispensers = [];\n            let player;\n\n            // Sanity check\n            layout = layout.slice(0, LEVEL_ROWS);\n\n            for (let y = 0; y < LEVEL_ROWS; y++) {\n                // Sanity checks\n                if (!layout[y]) layout[y] = [];\n                layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n                for (let x = 0; x < LEVEL_COLS; x++) {\n                    // Sanity check\n                    if (!layout[y][x]) layout[y][x] = ' ';\n\n                    // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                    // to construct a list of them, but they are permanent parts of the layout, so we can\n                    // leave them as part of the level and draw them normally.\n\n                    if (layout[y][x] === 'V') {\n                        dispensers.push({ x, y });\n                    }\n\n                    // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                    // can pick up the treasures and statues. That's why for these elements, we add them to\n                    // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                    // top of the layout.\n\n                    if (layout[y][x] === 'p') {\n                        layout[y][x] = ' ';\n                        player = { x, y };\n                    }\n\n                    // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                    // layout. The Lad interacts with them, but we can handle that during our movement checks.\n                }\n            }\n\n            return {\n                name: level.name,\n                layout,\n                dispensers,\n                player\n            };\n        }\n    };\n\n    /**\n     * `PlayingField` is a class that represents a level that is actively being played on-screen.\n     * A new one is created by the game session any time we start a new level.\n     *\n     * Level-specific stuff (like bonus time, dispensers, rocks, player position, etc.) is all\n     * managed by the playing field.\n     */\n\n    class PlayingField {\n        constructor(levelNumber) {\n            let level = Level.load(levelNumber);\n\n            // Store level-related info\n            this.layout = level.layout;\n            this.dispensers = level.dispensers;\n            this.time = 2000;\n\n            // Initialize player\n            this.player = new Player(level.player.x, level.player.y);\n\n            // Initialize list of rocks (empty)\n            this.rocks = [];\n\n            // Not winning yet (while \"winning\" the player stops moving and we add up the bonus score)\n            this.winning = false;\n\n            Audio.play(Audio.begin);\n        }\n\n        update(moveFrame) {\n            // If we're already winning, keep counting down the bonus time, but\n            // no more movement will happen on this level.\n            if (this.winning) {\n                Game.session.updateScore(SCORE_TREASURE);\n                this.time -= 10;\n                if (this.time < 0) Game.session.startNextLevel();\n                return;\n            }\n\n            // Count down bonus time\n            if (this.time > 0 && moveFrame) this.time--;\n\n            let oldX = this.player.x, oldY = this.player.y;\n\n            // Move player based on user input\n            this.player.update(this, moveFrame);\n\n            // Any time you move OFF of a disappearing floor, it goes away.\n            if (oldX !== this.player.x && oldY === this.player.y) {\n                if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                    this.layout[oldY + 1][oldX] = ' ';\n                }\n            }\n\n            // Check if player should be dead (before moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n            // Move rocks\n            for (let rock of this.rocks) rock.update(this, moveFrame);\n\n            // Check if player should be dead (after moving rocks)\n            if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n            if (moveFrame) {\n                // Collect statues\n                if (this.isStatue(this.player.x, this.player.y)) {\n                    this.layout[this.player.y][this.player.x] = ' ';\n                    Game.session.updateScore(SCORE_STATUE);\n                }\n\n                // Collect treasure (ends the current level)\n                if (this.isTreasure(this.player.x, this.player.y)) {\n                    this.winning = true;\n                    return;\n                }\n\n                // Interact with trampolines\n                if (this.isTrampoline(this.player.x, this.player.y)) {\n                    switch (Math.floor(Math.random() * 5)) {\n                        case 0:\n                            this.player.state = State.LEFT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 1:\n                            this.player.state = State.RIGHT;\n                            this.player.nextState = undefined;\n                            break;\n                        case 2:\n                            this.player.state = State.JUMP_UP;\n                            this.player.nextState = undefined;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 3:\n                            this.player.state = State.JUMP_LEFT;\n                            this.player.nextState = State.LEFT;\n                            this.player.jumpStep = 0;\n                            break;\n                        case 4:\n                            this.player.state = State.JUMP_RIGHT;\n                            this.player.nextState = State.RIGHT;\n                            this.player.jumpStep = 0;\n                            break;\n                    }\n                }\n\n                // Kill dead rocks\n                this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n                // Dispense new rocks\n                if (this.rocks.length < this.maxRocks() && Math.random() > 0.91) {\n                    let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                    this.rocks.push(new Rock(dispenser));\n                }\n\n                // Dying player\n                if (this.player.state === State.DEAD) {\n                    Game.session.lives--;\n                    if (Game.session.lives <= 0) {\n                        // TODO: More fanfare\n                        Game.showMainMenu();\n                    } else {\n                        Game.session.restartLevel();\n                    }\n                }\n            }\n        }\n\n        draw() {\n            // Draw layout\n            Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n            // Draw player\n            this.player.draw();\n\n            // Draw rocks\n            this.rocks.forEach(rock => rock.draw());\n        }\n\n        //\n        // Utility functions - this is an attempt to consolidate logic in one spot and make other\n        // functions (like the update logic in Player) more readable.\n        //\n\n        onSolid(x, y) {\n            return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n        }\n\n        emptySpace(x, y) {\n            if (x < 0 || x >= LEVEL_COLS) {\n                return false;\n            } else {\n                return !['|', '='].includes(this.layout[y][x]);\n            }\n        }\n\n        isLadder(x, y) {\n            return this.layout[y][x] === 'H';\n        }\n\n        isStatue(x, y) {\n            return this.layout[y][x] === '&';\n        }\n\n        isTreasure(x, y) {\n            return this.layout[y][x] === '$';\n        }\n\n        isTrampoline(x, y) {\n            return this.layout[y][x] === '.';\n        }\n\n        isEater(x, y) {\n            return this.layout[y][x] === '*';\n        }\n\n        isFire(x, y) {\n            return this.layout[y][x] === '^';\n        }\n\n        isDisappearingFloor(x, y) {\n            return this.layout[y][x] === '-';\n        }\n\n        canClimbUp(x, y) {\n            if (y < 0) return false;\n            return ['H', '&', '$'].includes(this.layout[y][x]);\n        }\n\n        canClimbDown(x, y) {\n            return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n        }\n\n        checkIfPlayerShouldDie() {\n            // If we're ALREADY dying or dead, let nature run its course\n            if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n            // Landing on fire kills you\n            if (this.isFire(this.player.x, this.player.y)) {\n                this.player.kill();\n            }\n\n            // Running out of time kills you\n            if (this.time <= 0) {\n                this.player.kill();\n            }\n\n            // Running into a rock kills you, and makes the rock that killed you disappear.\n            // That's not necessary, I just think it looks better. While we play the death\n            // animation we'll continue to move rocks, so another rock might also \"hit\" you,\n            // but it will just pass through your dying character.\n            //\n            // If we're above a rock with 1 or 2 spaces between, we get some points instead.\n            //\n            // A function named `checkIfPlayerShouldDie` is probably not the best place to do\n            // this, but it's convenient because we want to do this twice (just like the death\n            // check).\n            //\n            //                    p                          p\n            // (1)   p     -->            (2)   p     -->\n            //        o          o                o          o\n            //      =====       =====          =====       =====\n            //\n            // In situation (1), there will never be a frame on-screen where the player is directly\n            // above the rock, but we'll still count it because we'll check once after the player moves.\n            // In situation (2), the first check won't count, but the second check after the rocks move\n            // will give the score (and the frame drawn on screen will show the player above the rock).\n            //\n            for (let i = 0; i < this.rocks.length; i++) {\n                if (this.player.x === this.rocks[i].x) {\n                    if (this.player.y === this.rocks[i].y) {\n                        this.player.kill();\n                        this.rocks.splice(i, 1);\n                        break;\n                    } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                        Game.session.updateScore(SCORE_ROCK);\n                    } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                        Game.session.updateScore(SCORE_ROCK);\n                    }\n                }\n            }\n        }\n\n        maxRocks() {\n            // The total number of rocks we can have on screen is based on a global max rocks value,\n            // then increased slightly by the number of dispensers on the level, then increased again\n            // by a hidden difficulty factor (level cycles).\n            return MAX_ROCKS + this.dispensers.length * DISPENSER_MAX_ROCKS + Game.session.hiddenFactor() * HIDDEN_FACTOR_MAX_ROCKS;\n        }\n    }\n\n    /**\n     * `GameSession` is a class that represents... well, a game session! It is created when the\n     * player presses `P` at the main menu, and ends when the player runs out of lives.\n     *\n     * The game session tracks values that persist across levels (like number of lives, score,\n     * the level number, etc.). Most of the actual in-game logic it hands off to `PlayingField`.\n     */\n\n    class GameSession {\n        constructor() {\n            this.score = 0;\n            this.levelNumber = 0;\n            this.levelCycle = 1;\n            this.lives = 5;\n            this.nextLife = NEW_LIFE_SCORE;\n            this.paused = false;\n        }\n\n        update() {\n            // The `Game` controls the overall game loop, which runs at a fixed 60 frames per second.\n            //\n            // However, Ladder has the concept of \"play speed\" which the player can change at the main\n            // menu, and it controls how fast the game runs. To accomplish that, we can do a second\n            // frame gate here. This gate sets a flag called `moveFrame` IF things can move in this frame.\n            //\n            // We do it this way so that animations (like the play death animation, or the end-of-level\n            // score animation) can run at the same speed no matter what the play speed is.\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n            let moveFrame = false;\n\n            if (now - lastFrame >= (this.nextFrame || 0)) {\n                moveFrame = true;\n                this.nextFrame = now + this.moveFrameMillisecondDelay();\n            }\n\n            if (this.paused && [Input.Action.PAUSE, Input.Action.RESUME].includes(Input.lastAction())) {\n                this.paused = false;\n                Input.consume();\n            }\n\n            if (!this.paused && Input.lastAction() === Input.Action.PAUSE) {\n                this.paused = true;\n                Input.consume();\n            }\n\n            if (this.paused) return;\n\n            // If we haven't instantiated the playing field yet, create it now.\n            if (!this.field) this.field = new PlayingField(this.levelNumber);\n\n            // Hand off to the playing field for actual in-game logic\n            this.field.update(moveFrame);\n\n            this.handleCheatCodes();\n        }\n\n        draw() {\n            if (this.field) this.field.draw();\n\n            let stat = [\n                String(this.lives).padStart(2, ' '),\n                String(this.levelNumber + 1).padStart(2, ' '),\n                String(this.score).padStart(6, ' '),\n                this.field ? String(this.field.time).padStart(4, ' ') : ''\n            ];\n            Screen.write(0, 21, `Lads   ${stat[0]}     Level   ${stat[1]}      Score   ${stat[2]}      Bonus time   ${stat[3]}`);\n\n            if (this.paused) {\n                Screen.write(0, 23, 'Paused - type ESCape or RETURN to continue.');\n            }\n        }\n\n        restartLevel() {\n            this.field = undefined;\n        }\n\n        startNextLevel() {\n            this.field = undefined;\n            this.levelNumber++;\n            if (this.levelNumber % Level.LEVEL_COUNT === 0) {\n                this.levelCycle++;\n            }\n        }\n\n        updateScore(scoreType) {\n            switch (scoreType) {\n                case SCORE_ROCK:\n                    this.score += 200;\n                    break;\n                case SCORE_STATUE:\n                    this.score += this.field.time;\n                    break;\n                case SCORE_TREASURE:\n                    // Added repeatedly after winning the level\n                    this.score += 10;\n                    break;\n            }\n            Audio.play(Audio.score);\n\n            if (this.score >= this.nextLife) {\n                this.lives++;\n                this.nextLife += NEW_LIFE_SCORE;\n            }\n        }\n\n        hiddenFactor() {\n            // This \"hidden\" difficulty level increases steadily as the player completes a\n            // level cycle (every time they reach the Easy Street level). This makes the\n            // game slowly harder as you keep playing.\n            return Math.floor(this.levelNumber / Level.LEVEL_COUNT);\n        }\n\n        moveFrameMillisecondDelay() {\n            // Regardless of play speed, the game gets slightly faster every level cycle\n            return Math.floor(PLAY_SPEEDS[Game.playSpeed] - this.hiddenFactor() * HIDDEN_FACTOR_PLAY_SPEED * PLAY_SPEEDS[Game.playSpeed]);\n        }\n\n        handleCheatCodes() {\n            // Cheat codes are useful for testing, and this game is no exception. Of course\n            // THESE cheat codes do not belong here, as they wouldn't be created until 11 years\n            // later, but that won't stop me from using them anywhere I get the chance!\n            //\n            // =================     ===============     ===============   ========  ========\n            // \\\\ . . . . . . .\\\\   //. . . . . . .\\\\   //. . . . . . .\\\\  \\\\. . .\\\\// . . //\n            // ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\\/ . . .||\n            // || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||\n            // ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||\n            // || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\\ . . . . ||\n            // ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\\_ . .|. .||\n            // || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\\ `-_/| . ||\n            // ||_-' ||  .|/    || ||    \\|.  || `-_|| ||_-' ||  .|/    || ||   | \\  / |-_.||\n            // ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \\  / |  `||\n            // ||    `'         || ||         `'    || ||    `'         || ||   | \\  / |   ||\n            // ||            .===' `===.         .==='.`===.         .===' /==. |  \\/  |   ||\n            // ||         .=='   \\_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \\/  |   ||\n            // ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \\/  |   ||\n            // ||   .=='    _-'          `-__\\._-'         `-_./__-'         `' |. /|  |   ||\n            // ||.=='    _-'                                                     `' |  /==.||\n            // =='    _-'                                                            \\/   `==\n            // \\   _-'                                                                `-_   /\n            //  `''                                                                      ``'\n            //\n            let recentKeystrokes = Input.history.map(event => event.key).join('').toUpperCase();\n            if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n                // Changing levels is as simple as setting the desired level number\n                // and then throwing the current playing field away.\n                Input.consume(true);\n                this.levelNumber = parseInt(RegExp.$1, 10);\n                this.field = undefined;\n            } else if (recentKeystrokes.includes('IDDQD')) {\n                Input.consume(true);\n                console.log('god mode');\n            } else if (recentKeystrokes.includes('IDKFA')) {\n                // Immediately end the current level as if we'd touched the treasure.\n                Input.consume(true);\n                if (this.field) this.field.winning = true;\n            } else if (recentKeystrokes.includes('IDKILL')) {\n                Input.consume(true);\n                if (this.field && this.field.player) this.field.player.kill();\n            }\n        }\n    }\n\n    /**\n     * `Game` is a singleton that represents the running game in the browser,\n     * initializes game submodules, and handles the top-level game loop.\n     */\n\n    const Game = {\n        init() {\n            Sprite.loadSpritesheet(async () => {\n                await Viewport.init();\n                await Screen.init();\n                await Sprite.init();\n                await Text.init();\n                await Input.init();\n                await Audio.init();\n\n                window.addEventListener('blur', () => this.lostFocus());\n                window.addEventListener('focus', () => this.gainedFocus());\n\n                this.start();\n            });\n        },\n\n        start() {\n            this.frame = 0;\n            this.playSpeed = 2;\n            this.showMainMenu();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        },\n\n        onFrame() {\n            let fps = 60;\n            let now = new Date().getTime();\n            let lastFrame = this.lastFrame || 0;\n\n            // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n            // 60 times per second in most cases. However, it can be higher (the browser may\n            // respect the user's refresh settings, which could be 120Hz or higher for example).\n            //\n            // It's safest to have a check like we do here, where we explicitly limit the number\n            // of update calls to 60 times per second.\n            if (now - lastFrame >= 1000 / fps) {\n                this.frame++;\n                this.update();\n                this.lastFrame = now;\n            }\n\n            Viewport.resize();\n            this.draw();\n\n            window.requestAnimationFrame(() => this.onFrame());\n        },\n\n        update() {\n            // Pull in frame by frame button pushes / keypresses / mouse clicks\n            Input.update();\n\n            // perform any per-frame audio updates\n            Audio.update();\n\n            if (this.menu) {\n                this.menu.update();\n            }\n\n            if (this.session) this.session.update();\n        },\n\n        draw() {\n            // Reset canvas transform and scale\n            Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n            // Clear canvas. Note we don't go for pure black but rather a dark gray, to simulate\n            // the relatively bright phosphors on the Kaypro II. (We are going to add scan lines\n            // at the end which will appear to darken the whole screen, so the overall effect\n            // will be a little darker than this color.)\n            Viewport.ctx.fillStyle = '#181818';\n            Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n            // Center the 80x25 character \"screen\" in the viewport\n            Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n            // Hand off control to our submodules to draw whatever they'd like. For all the submodules\n            // below us, \"drawing\" means writing text to the Screen.\n            Screen.clear();\n            if (this.session) this.session.draw();\n            if (this.menu) this.menu.draw();\n\n            // Render the text on the screen to the viewport.\n            Screen.draw(Viewport.ctx);\n\n            // After drawing the \"screen\" (characters), add scan lines on top. Our scan lines are almost\n            // not visible, but move slowly and introduce subtle visual shifts in the characters on screen,\n            // which is the effect we are going for.\n            //\n            // (Technically scan lines should be IN BETWEEN rows of pixels, and what we're actually simulating\n            // here is our eyeballs clocking the screen refresh. We're going for a general feeling here.)\n            Viewport.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n            for (let y = Math.floor(-Viewport.height / 2) - 4; y < Viewport.height + 4; y += 4) {\n                let r = ((this.frame / 5) % 4) + y;\n                Viewport.ctx.fillRect(-Viewport.width, r, Viewport.width * 2, 2);\n            }\n        },\n\n        startSession() {\n            this.menu = undefined;\n            this.session = new GameSession();\n\n            // Hide the github link while in a game session\n            document.getElementsByClassName('github-corner')[0].className = 'github-corner hidden';\n        },\n\n        showMainMenu() {\n            this.menu = new MainMenu();\n            this.session = undefined;\n\n            // Show github link again when returning from a game\n            document.getElementsByClassName('github-corner')[0].className = 'github-corner';\n        },\n\n        showInstructions() {\n            this.menu = new InstructionsMenu();\n            this.session = undefined;\n        },\n\n        lostFocus() {\n            // If we lose focus (the user switched tabs, or tabbed away from the browser),\n            // automatically pause the game session if there is one.\n            if (this.session) this.session.paused = true;\n        },\n\n        gainedFocus() {\n            // Do nothing - we'll let the user hit enter to resume playing.\n        }\n    };\n\n    /**\n     * This is the entry point for the game.\n     */\n\n    Game.init();\n\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","/**\n * Miscellaneous, individually exported functions that don't fit anywhere else.\n *\n * In many games I'll stick all my random math, geometry, and clipping stuff here,\n * but in this game there's actually not a lot of extra math to do (mostly because\n * we can only move one \"character\" at a time, and there's not any AI to speak of,\n * so no flood fills or other algorithms to consider).\n */\n\nexport function rgba(r, g, b, a) {\n    return `rgba(${r},${g},${b},${a})`;\n}\n\nexport function createCanvas(width, height) {\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    let ctx = canvas.getContext('2d');\n    return { canvas, ctx };\n}\n","'use strict';\n\n/**\n * This module is generated by `gulp buildAssets`.\n */\nexport const SpriteSheet =\n    /* <generated> */\n{ font: [ [ 0, 0, 128, 512 ] ], uri: 'sprites.png' }\n/* </generated> */\n","/**\n * Global constants for our game.\n *\n * I export all constants individually and import just the ones I want in each file that\n * uses them. In theory this helps with tree-shaking and lets you see at a glance which\n * files use which constants, but mostly it works only because this is a small game. If you\n * have hundreds of constants it's probably better to export a single `Constants` object and\n * let them be namespaced.\n */\n\n// Spritesheet URI (produced during gulp build)\nexport const SPRITESHEET_URI = 'sprites.png';\n\n// The \"screen area\". This is an ASCII game and so most of the game logic doesn't care about browser\n// pixels, we care about the ASCII display area (80x25).\n//\n// Actually the original was likely an 80x24. We can use either here, whatever looks good in the browser.\nexport const SCREEN_WIDTH = 80;\nexport const SCREEN_HEIGHT = /*25*/ 24;\n\n// The size of our on-screen characters (given dimensions above, this is 80 cols by 25 rows).\nexport const CHAR_WIDTH = 8;\nexport const CHAR_HEIGHT = 16;\nexport const CHARSHEET_WIDTH = 16 * CHAR_WIDTH;\nexport const CHARSHEET_HEIGHT = 32 * CHAR_HEIGHT;\n\n// A screen scale factor. This scale factor multiplies the entire screen size so that\n// we can then introduce text artifacts (like character glow and scan lines), to give it\n// a little of that 1982 feel.\nexport const SCREEN_SCALE = 4;\n\n// The playable area. Note that this is the desired dimensions, but the actual on-screen dimensions\n// may be larger to maintain aspect ratio (see `Viewport.width` & `Viewport.height`).\n//\n// Note the extra little padding of a character, which just prevents our text from butting right\n// against the edge of the browser window.\nexport const GAME_WIDTH = (SCREEN_WIDTH + 1) * CHAR_WIDTH * SCREEN_SCALE;\nexport const GAME_HEIGHT = (SCREEN_HEIGHT + 1) * CHAR_HEIGHT * SCREEN_SCALE;\n\n// Fixed level size\nexport const LEVEL_ROWS = 20;\nexport const LEVEL_COLS = 79;\n\n// Play speeds, expressed as frames per second.\n//\n// According to the original, the play speeds had millisecond delays of:\n//   [100ms, 50ms, 25ms, 13ms, 7ms].\n//\n// This would mean the effective FPS was:\n//   [10, 20, 40, 76, 142].\n//\n// I think this is way too high, and might not be accurate (it doesn't count\n// time spent drawing the screen and running the game's logic, which might\n// be a significant number of milliseconds). From memory, each speed was about\n// 50% faster than the previous one, so that's what I've set here.\nexport const PLAY_SPEEDS = [120, 100, 90, 50, 30];\n\n// Maximum number of rocks on screen at once\nexport const MAX_ROCKS = 7;\n\n// Each dispenser on the level increases max rocks by 1\nexport const DISPENSER_MAX_ROCKS = 1;\n\n// Hidden difficulty factor - the game gets 5% faster each level cycle\nexport const HIDDEN_FACTOR_PLAY_SPEED = 0.05;\n\n// Hidden difficulty factor - the maximum number of rocks increases each level cycle\nexport const HIDDEN_FACTOR_MAX_ROCKS = 2;\n\n// Score events (note, these are just identifiers for the types of score increases, not\n// actual score values).\nexport const SCORE_ROCK = 1;\nexport const SCORE_STATUE = 2;\nexport const SCORE_TREASURE = 3;\n\n// 1-Up\nexport const NEW_LIFE_SCORE = 10_000;\n","'use strict';\n\nimport { GAME_WIDTH, GAME_HEIGHT } from './Constants';\n\n/**\n * Viewport\n *\n * Represents the game display (for us, a canvas).\n */\nexport const Viewport = {\n    init() {\n        Viewport.canvas = document.getElementById('canvas');\n        Viewport.ctx = Viewport.canvas.getContext('2d');\n        Viewport.resize(true);\n    },\n\n    // Resize the canvas to give us approximately our desired game display size.\n    //\n    // Rather than attempt to explain it, here's a concrete example:\n    //\n    //     we start with a desired game dimension:   480x270px\n    //          get the actual browser dimensions:  1309x468px\n    //          factor in the display's DPI ratio:  2618x936px\n    //         now calculate the horizontal scale:       5.45x\n    //                     and the vertical scale:       3.46x\n    //            our new offical game scaling is:        5.4x\n    //       and our official viewport dimensions:   484x173px\n    //\n    // This approach emphasizes correct aspect ratio and maintains full-window rendering, at\n    // the potential cost of limiting visibility of the game itself in either the X or Y axis.\n    // If you use this approach, make sure your GUI can \"float\" (otherwise there may be whole\n    // UI elements the player cannot see!).\n    resize(force) {\n        let dpi = window.devicePixelRatio,\n            width = Viewport.canvas.clientWidth,\n            height = Viewport.canvas.clientHeight,\n            dpiWidth = width * dpi,\n            dpiHeight = height * dpi;\n\n        if (\n            force ||\n            Viewport.canvas.width !== dpiWidth ||\n            Viewport.canvas.height !== dpiHeight\n        ) {\n            Viewport.canvas.width = dpiWidth;\n            Viewport.canvas.height = dpiHeight;\n\n            Viewport.scale = ((Math.min(dpiWidth / GAME_WIDTH, dpiHeight / GAME_HEIGHT) * 10) | 0) / 10;\n            Viewport.width = Math.ceil(dpiWidth / Viewport.scale);\n            Viewport.height = Math.ceil(dpiHeight / Viewport.scale);\n            Viewport.center = {\n                u: (Viewport.width / 2) | 0,\n                v: (Viewport.height / 2) | 0\n            };\n            Viewport.clientWidth = width;\n            Viewport.clientHeight = height;\n\n            // Note: smoothing flag gets reset on every resize by some browsers, which is why\n            // we do it here.\n            Viewport.ctx.imageSmoothingEnabled = false;\n        }\n\n        // We do this every frame, not just on resize, due to browser sometimes \"forgetting\".\n        Viewport.canvas.style.cursor = 'not-allowed';\n    }\n};\n","'use strict';\n\nimport { Game } from './Game';\nimport { rgba, createCanvas } from './Util';\nimport { SpriteSheet } from './SpriteSheet-gen';\nimport { Viewport } from './Viewport';\n\n/**\n * Sprite\n *\n * Encapsulates loading sprite slices from the spritesheet, organizing them, and\n * modifying them or constructing using primitives. To save space, we use some techniques\n * like storing only a small slice of an image in the spritesheet, then using code\n * to duplicate it, add some randomness, etc.\n */\nexport const Sprite = {\n    // This is an exception to the rule, loading the spritesheet is a special action that\n    // happens BEFORE everything is initialized.\n    loadSpritesheet(cb) {\n        let image = new Image();\n        image.onload = cb;\n        image.src = SpriteSheet.uri;\n        Sprite.sheet = image;\n    },\n\n    init() {\n        // Base pixel font and icons (see `Text.init` for additional variations)\n        Sprite.font = initBasicSprite(SpriteSheet.font[0]);\n    },\n\n    /**\n     * A small helper that draws a sprite onto a canvas, respecting the anchor point of\n     * the sprite. Note that the canvas should be PRE-TRANSLATED and PRE-ROTATED, if\n     * that's appropriate!\n     */\n    drawSprite(ctx, sprite, u, v) {\n        ctx.drawImage(sprite.img, u - sprite.anchor.x, v - sprite.anchor.y);\n    },\n\n    drawViewportSprite(sprite, pos, rotation) {\n        let { u, v } = this.viewportSprite2uv(\n            sprite,\n            pos\n        );\n        if (rotation) {\n            Viewport.ctx.save();\n            Viewport.ctx.translate(u + sprite.anchor.x, v + sprite.anchor.y);\n            Viewport.ctx.rotate(rotation);\n            Viewport.ctx.drawImage(\n                sprite.img,\n                -sprite.anchor.x,\n                -sprite.anchor.y\n            );\n            Viewport.ctx.restore();\n        } else {\n            Viewport.ctx.drawImage(sprite.img, u, v);\n        }\n    },\n\n    viewportSprite2uv(sprite, pos) {\n        return {\n            u: pos.x - sprite.anchor.x - Game.camera.pos.x + Viewport.center.u,\n            v: pos.y - sprite.anchor.y - Game.camera.pos.y + Viewport.center.v\n        };\n    }\n};\n\n// Sprite utility functions\n\nfunction initBasicSprite(data, anchor) {\n    return initDynamicSprite(loadCacheSlice(...data), anchor);\n}\n\nfunction initDynamicSprite(source, anchor) {\n    let w = source.width,\n        h = source.height;\n\n    return {\n        img: source,\n        anchor: anchor || { x: (w / 2) | 0, y: (h / 2) | 0 }\n    };\n}\n\nfunction loadCacheSlice(x, y, w, h) {\n    const source = Sprite.sheet;\n    const sliceCanvas = createCanvas(w, h);\n    sliceCanvas.ctx.drawImage(source, x, y, w, h, 0, 0, w, h);\n    return sliceCanvas.canvas;\n}\n","// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nexport const zzfx=(...t)=>zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nexport const zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfx.destination_),e.start();return e}\n\n// zzfxG() - the sound generator -- returns an array of sample data\nexport const zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z}\n\n// zzfxV - global volume\nexport const zzfxV=.3\n\n// zzfxR - global sample rate\nexport const zzfxR=44100\n\n// zzfxX - the common audio context\nexport const zzfxX=new(top.AudioContext||webkitAudioContext);\n\n// destination for zzfx and zzfxm sounds\nzzfx.destination_ = zzfxX.destination;\n","/**\n * `Audio` is a singleton that controls sound effects within the game.\n *\n * The original game was only capable of the built-in \"BEEP\" sound in\n * the terminal, and used it for score bumps (playing it repeatedly\n * if you win a level, similar to the way we do in this version).\n *\n * We have a little more flexibility here and we're using very simple\n * sounds built using zzfx. For examples like these check out the zzfx\n * project, especially the soundboard at:\n *\n *     https://codepen.io/KilledByAPixel/details/BaowKzv\n */\n\nimport { zzfx, zzfxP, zzfxX } from './lib/zzfx';\nimport { zzfxM } from './lib/zzfxm';\n\nexport const Audio = {\n    init() {\n        Audio.readyToPlay = false;\n\n        Audio.ctx = zzfxX;\n        Audio.gain_ = Audio.ctx.createGain();\n        Audio.gain_.connect(Audio.ctx.destination);\n        zzfx.destination_ = Audio.gain_;\n\n        // Sounds\n        Audio.begin = [,,539,0,.04,.29,1,1.92,,,567,.02,.02,,,,.04];\n        Audio.jump = [,.1,75,.03,.08,.17,1,1.88,7.83,,,,,.4];\n        Audio.score = [.7,.08,1675,,.06,.16,1,1.82,,,837,.06];\n        Audio.dying = [,,925,.04,.3,.6,1,.3,,6.27,-184,.09,.17];\n\n        // Sound throttling - for sounds that might play too often, we\n        // can setup a throttle so X milliseconds must pass before playing\n        // that particular sound again.\n        Audio.soundThrottle = new Map();\n        Audio.soundDelays = new Map();\n        Audio.soundDelays.set(Audio.score, 160);\n    },\n\n    update() {\n        if (!Audio.readyToPlay) return;\n\n        if (!Audio.musicPlaying) {\n            //Audio.bgmusicnode = zzfxP(...Audio.song);\n            //Audio.bgmusicnode.loop = true;\n            Audio.musicPlaying = true;\n        }\n    },\n\n    play(sound) {\n        if (!Audio.readyToPlay) return;\n\n        let now = new Date().getTime();\n        let allowed = Audio.soundThrottle.get(sound) || 0;\n        let delay = Audio.soundDelays.get(sound) || 0;\n\n        if (now >= allowed) {\n            zzfx(...sound);\n            Audio.soundThrottle.set(sound, now + delay);\n        }\n    },\n\n    // It's important we do pausing and unpausing as specific events and not in general update(),\n    // because update() is triggered by the animation frame trigger which does not run if the\n    // page is not visible. (So, if you want the music to fade in the background, for example,\n    // that's not helpful if it won't work because you aren't looking at the page!)\n\n    pause() {\n        Audio.gain_.gain.linearRampToValueAtTime(0, Audio.ctx.currentTime + 1);\n    },\n\n    unpause() {\n        Audio.gain_.gain.linearRampToValueAtTime(1, Audio.ctx.currentTime + 1);\n    }\n};\n","/**\n * `Input` is a singleton that helps us map keyboard events in the browser\n * to in-game actions.\n *\n * We generally care about two types of input events:\n *\n *  - An \"action\" is a specific action recognizable by the game, like moving right\n *    or jumping. In theory, if this was a more complicated game, there could be\n *    many ways to cause a specific action (maybe user presses SPACEBAR to jump,\n *    or they click RIGHT MOUSE BUTTON, or they tap A on a gamepad, etc.). For this\n *    reason, it helps to separate processing in-game actions from processing the\n *    raw keyboard events that cause them.\n *\n *  - Actual key presses. There are situations where we need a more broad view of\n *    the user's key presses, for example, if they are typing in their name for a\n *    high score or pressing one of the inputs at the main menu. In this case we\n *    want to know \"did the user tap P?\", as opposed to mapping the keys to actions.\n */\n\nimport { Audio } from './Audio';\n\n// A list of in-game actions that can be performed by the player\nconst Action = {\n    UP:     11,\n    DOWN:   12,\n    LEFT:   13,\n    RIGHT:  14,\n    JUMP:   15,\n    STOP:   16,\n    PAUSE:  17,\n    RESUME: 18\n};\n\n// A list of key code mappings and what action they perform. Here we hard-code it, but\n// you could easily also have the key mappings controlled by settings and let the user\n// configure it.\nconst KeyMapping = {\n    KeyW:       Action.UP,\n    KeyS:       Action.DOWN,\n    KeyA:       Action.LEFT,\n    KeyD:       Action.RIGHT,\n    ArrowUp:    Action.UP,\n    ArrowDown:  Action.DOWN,\n    ArrowLeft:  Action.LEFT,\n    ArrowRight: Action.RIGHT,\n    Space:      Action.JUMP,\n    Escape:     Action.PAUSE,\n    Enter:      Action.RESUME\n};\n\nexport const Input = {\n    Action,\n    KeyMapping,\n\n    init() {\n        // Input buffer - new keypress events go into this buffer to be handled\n        // during the game's update loop. It's up to the `update()` methods to consume\n        // key presses and remove them from the buffer.\n        this.buffer = [];\n\n        // Input history - history contains recent key press events in order,\n        // removed automatically after a few seconds. This is useful for detecting\n        // inputs like cheat codes, for example.\n        //\n        // (Actually, cheat codes is the only use for this extra history buffer, so\n        // if you didn't support cheat codes you could delete it altogether.)\n        this.history = [];\n\n        window.addEventListener('keydown', event => {\n            let entry = {\n                at: new Date().getTime(),\n                key: event.key,\n                code: event.code,\n                action: Input.KeyMapping[event.code] || Input.Action.STOP\n            };\n            Input.buffer.push(entry);\n            Input.history.push(entry);\n            console.log(entry);\n\n            // Hack to ensure we initialize audio after user interacts with the game. Sometimes\n            // the browser will just ignore attempts to play audio if the user has not interacted\n            // with the page yet, but some browsers/versions will actually error out (either\n            // stopping the game itself, or preventing later audio playing). So it's better to\n            // plan for it explicitly.\n            Audio.readyToPlay = true;\n        });\n    },\n\n    update() {\n        let now = new Date().getTime();\n        this.history = this.history.filter(entry => entry.at > now - 3000);\n    },\n\n    lastKey() {\n        // A shortcut helper for code that cares about what KEY was pressed.\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].key : '';\n    },\n\n    lastAction() {\n        // A shortcut helper for code that cares about what ACTION was taken.\n        return this.buffer.length > 0 ? this.buffer[this.buffer.length - 1].action : undefined;\n    },\n\n    consume(clearHistory) {\n        this.buffer = [];\n\n        // Normally, \"consuming\" all existing buffer input is something that happens\n        // somewhere in the game logic. If we just detected and acted on a cheat code,\n        // though, we want to clear the history too, otherwise we'll just keep behaving\n        // like the user is entering the cheat code every frame.\n        if (clearHistory) this.history = [];\n    }\n}\n","/**\n * `Text` is a singleton responsible for drawing text characters on the viewport. This\n * game uses a custom pixel font, so we need to implement some basic text handling\n * (splitting long lines, measuring character width, etc.) ourselves.\n */\n\nimport { Sprite } from './Sprite';\nimport { rgba, createCanvas } from './Util';\nimport { CHAR_WIDTH, CHAR_HEIGHT, CHARSHEET_WIDTH, SCREEN_SCALE } from './Constants';\n\n// In our character sheet, chars 0x00-0x7F are standard ASCII, below that we put whatever\n// characters are convenient for us. Here we can choose to map unicode characters to positions\n// 0x80+ in the charsheet, making it easy for us to render things like special characters,\n// box drawing characters, etc.\n//\n// Note: I like pasting actual characters instead of codes (\"├\" instead of \"\\u251C\"). If you\n// do this, don't forget to explicitly tell the browser what charset your JS file is, or it\n// won't execute -- see `index.html` for an example.\nconst SUPPORTED_UNICODE_CHARS = [\n    '─│┌┐└┘├┤┬┴┼╳╳╳╳╳',\n    '═║╔╗╚╝╠╣╦╩╬╳╳╳╳╳',\n    '↑↓←→╳╳╳╳╳╳╳╳╳╳╳╳'\n].join('');\n\nconst UNICODE_CHAR_MAP = SUPPORTED_UNICODE_CHARS.split('').reduce((map, char, idx) => {\n    map[char] = 0x80 + idx;\n    return map;\n}, {});\n\n/**\n * Text\n *\n * Utilities for drawing text using in-game pixel font.\n */\nexport const Text = {\n    init() {\n        // The \"white\" font sheet, right from the sprite.\n        Text.white = { img: Sprite.font.img, scale: 1, border: 0, margin: 0 };\n\n        // Recolored versions of the original font sheet, to use when constructing our glow.\n        //\n        // The color here is #33FF00 which is roughly the glow of the Kaypro II.\n        Text.terminal = recolor(Text.white, rgba(51 + 16, 255, 0 + 16, 1));\n        Text.terminal_shadow = recolor(Text.white, rgba(51, 255, 0, 0.4));\n\n        // \"Glowing\" a bunch of characters on-screen is just too slow when you're doing 5\n        // draw calls for every individual character. To avoid that, we can build a new\n        // sprite sheet that is pre-scaled with the glow built in.\n        Text.glow = bakeFontGlow(Text.terminal, Text.terminal_shadow, SCREEN_SCALE, 2, 2);\n    },\n\n    drawText(ctx, text, u, v, font = Text.terminal) {\n        // The math gymnastics are a little hard to read (apologies). To render the\n        // font asked for correctly, we need to have the font sheet image, the scale,\n        // the border and the margin.\n        //\n        // The \"scale\" informs us what PRESCALING is applied to the font sheet, so\n        // we know how big to render it (we don't do additional scaling here).\n        //\n        // The \"border\" tells us how many PRE-SCALE pixels of border exist in this\n        // image. A border of 2 means a total of 2 pixels (so 1 on every side) were\n        // used. This is pre-scale, so if the scale is 4, that means there are 4 pixels\n        // of \"space\" around each character in the font sheet.\n        //\n        // The \"margin\" tells us how many POST-SCALE pixels of margin exist (in practice\n        // this means, how many pixels of glow surround the character). You want to subtract\n        // this margin when rendering the character so the character body is in the expected\n        // spot on screen.\n        let { img, scale, border, margin } = font;\n\n        if (Array.isArray(text)) {\n            for (let block of text) {\n                Text.drawText(ctx, block.text, u + block.u * scale, v + block.v * scale, font);\n            }\n            return;\n        }\n\n        for (let idx = 0; idx < text.length; idx++) {\n            let c = UNICODE_CHAR_MAP[text[idx]] || text.charCodeAt(idx);\n            let k = (c - 0) * (CHAR_WIDTH + border);\n            let drawable = (c !== 32);\n\n            // We clear the canvas in every frame, and it's a HUGE speed advantage not to draw an\n            // empty image (this check can save 1000+ drawImage calls a frame).\n            if (drawable) {\n                ctx.drawImage(\n                    img,\n                    (k * scale) % img.width,\n                    Math.floor((k * scale) / (img.width)) * (CHAR_HEIGHT + border) * scale,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale,\n                    u + margin,\n                    v + margin,\n                    CHAR_WIDTH * scale,\n                    CHAR_HEIGHT * scale\n                );\n            }\n            u += CHAR_WIDTH * scale;\n        }\n    },\n\n    measureWidth(text, scale = 1) {\n        return text.split('').reduce((sum, c) => sum + CHAR_WIDTH, 0) * scale;\n    },\n\n    splitParagraph(text, w, h) {\n        let cu = 0, cv = 0;\n        let next = () => ({ text: '', u: cu, v: cv });\n        let wip = next();\n        let list = [];\n\n        for (let c of text.split('')) {\n            let cWidth = Text.measureWidth(c, 1);\n            if (c === '\\n' || cu + cWidth > w) {\n                let saved = '';\n                if (c !== '\\n' && c !== ' ') {\n                    let space = wip.text.split(' ');\n                    if (space.length > 1) {\n                        saved = space.pop();\n                        wip.text = space.join(' ');\n                    }\n                }\n                if (wip.text.length > 0) list.push(wip);\n                cu = 0;\n                cv += (CHAR_HEIGHT);\n                wip = next();\n                if (saved.length > 0) {\n                    wip.text = saved;\n                    cu += Text.measureWidth(wip.text, 1);\n                }\n            } else {\n                cu += cWidth;\n            }\n            if (c !== '\\n') {\n                wip.text = wip.text + c;\n            }\n        }\n\n        if (wip.text.length > 0) list.push(wip);\n\n        return list.map(line => ({\n            ...line,\n            w: Text.measureWidth(line.text, 1),\n            h: CHAR_HEIGHT\n        }));\n    }\n};\n\n// Text utility functions, for manipulating the font sheet images\n\nfunction recolor(font, color) {\n    let canvas = createCanvas(font.img.width, font.img.height);\n    canvas.ctx.fillStyle = color;\n    canvas.ctx.fillRect(0, 0, font.img.width, font.img.height);\n    canvas.ctx.globalCompositeOperation = 'destination-in';\n    canvas.ctx.drawImage(font.img, 0, 0);\n\n    // Return a new font with the same metadata, but a recolored image\n    return {\n        ...font,\n        img: canvas.canvas\n    };\n}\n\nfunction bakeFontGlow(font, glow, scale, border, margin) {\n    // This function is a little complicated because it has to do several things at once.\n    //\n    // The idea is:\n    //  - Take our original sheet of 8x16 characters\n    //  - Build a NEW sheet, with additional \"border\" around each character, so that there is\n    //    room for us to add a glow around each character without bleeding into our neighbors.\n    //  - We want the glow baked in at an upscaled pixel size.\n    //\n    // What is the upscaled pixel size? Here for example, we are scaling up from 8x16 pixels\n    // to 32x64 pixels for each characters. We then want the GLOW added around this new\n    // 32x64 character, not the original size (this allows us to have a glow more tight than\n    // the original chunky pixels we started with).\n    //\n    // A complication of HTML Canvas is that if you draw from a source canvas into a destination\n    // canvas at a higher scale, you will \"bleed\" neighboring pixels from the source canvas.\n    // To avoid this, we use a second temporary canvas and draw from the source into the temporary\n    // canvas with no upscaling, then we draw from the temporary canvas into the upscaled canvas.\n    //\n    // (This means double the draws, but we only do this step once when the game loads, so it's\n    // not a big deal.)\n    let cols = font.img.width / CHAR_WIDTH, rows = font.img.height / CHAR_HEIGHT;\n\n    let temp = createCanvas(CHAR_WIDTH, CHAR_HEIGHT);\n    let canvas = createCanvas(\n        cols * (CHAR_WIDTH + border) * scale,\n        rows * (CHAR_HEIGHT + border) * scale\n    )\n\n    for (let y = 0; y < rows; y++) {\n        for (let x = 0; x < cols; x++) {\n            // Glow (rendered on all 4 sides)\n            temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n            temp.ctx.drawImage(\n                glow.img,\n                x * CHAR_WIDTH,\n                y * CHAR_HEIGHT,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin,\n                y * (CHAR_HEIGHT + border) * scale,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale,\n                y * (CHAR_HEIGHT + border) * scale + margin,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin * 2,\n                y * (CHAR_HEIGHT + border) * scale + margin,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin,\n                y * (CHAR_HEIGHT + border) * scale + margin * 2,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n\n            // Center character\n            temp.ctx.clearRect(0, 0, CHAR_WIDTH, CHAR_HEIGHT);\n            temp.ctx.drawImage(\n                font.img,\n                x * CHAR_WIDTH,\n                y * CHAR_HEIGHT,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT\n            );\n            canvas.ctx.drawImage(\n                temp.canvas,\n                0, 0,\n                CHAR_WIDTH,\n                CHAR_HEIGHT,\n                x * (CHAR_WIDTH + border) * scale + margin,\n                y * (CHAR_HEIGHT + border) * scale + margin,\n                CHAR_WIDTH * scale,\n                CHAR_HEIGHT * scale\n            );\n        }\n    }\n\n    return { img: canvas.canvas, scale, border, margin };\n}\n","/**\n * `Screen` is a singleton that represents the virtual 80x25 character screen our game\n * lives in. Components like PlayingField will \"draw\" (write text onto) this virtual\n * screen each frame. Once all the text is written, the text will end up rendered on\n * the viewport (canvas) in the browser.\n */\n\nimport { SCREEN_WIDTH, SCREEN_HEIGHT } from './Constants';\nimport { Viewport } from './Viewport';\nimport { Text } from './Text';\n\nexport const Screen = {\n    init() {\n        this.screen = [];\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            this.screen.push([]);\n        }\n        this.clear();\n    },\n\n    clear() {\n        for (let y = 0; y < SCREEN_HEIGHT; y++) {\n            for (let x = 0; x < SCREEN_WIDTH; x++) {\n                this.screen[y][x] = ' ';\n            }\n        }\n    },\n\n    write(x, y, text) {\n        if (!Array.isArray(text)) text = [text];\n\n        for (let j = 0; j < text.length; j++) {\n            for (let i = 0; i < text[j].length; i++) {\n                this.screen[y + j][x + i] = text[j][i];\n            }\n        }\n    },\n\n    draw(ctx) {\n        let text = this.screen.map(row => row.join('')).join('\\n');\n\n        Text.drawText(\n            ctx,\n            Text.splitParagraph(text, Viewport.width),\n            0, 0,\n            Text.glow\n        );\n    }\n};\n","/**\n * `MainMenu` is a class that represents a screen the user can view. Instances of\n * MainMenu are constructed whenever we want the user to go to the main menu, and\n * thrown away when we're done.\n */\n\nimport { PLAY_SPEEDS } from './Constants';\nimport { GameVersion } from './GameVersion-gen.json';\nimport { Screen } from './Screen';\nimport { Game } from './Game';\nimport { Input } from './Input';\n\nexport class MainMenu {\n    update() {\n        switch (Input.lastKey().toUpperCase()) {\n            case 'P':\n                Input.consume();\n                Game.startSession();\n                break;\n            case 'L':\n                Input.consume();\n                Game.playSpeed = (Game.playSpeed + 1) % PLAY_SPEEDS.length;\n                break;\n            case 'I':\n                Input.consume();\n                Game.showInstructions();\n                break;\n            case 'E':\n                Input.consume();\n                Game.showInstructions();\n                break;\n        }\n    }\n\n    draw() {\n        let terminal = 'Quiche MkII';\n\n        let highScores = [\n            `1) 6000  Bob`,\n            `2) 6000  Tom`,\n            `3) 4000  Wayne`,\n            ``,\n            ``\n        ];\n\n        Screen.clear();\n        Screen.write(0, 0, [\n            `               LL                     dd       dd`,\n            `               LL                     dd       dd                      tm`,\n            `               LL         aaaa     ddddd    ddddd    eeee   rrrrrrr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee  ee  rr    rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   eeeeee  rr`,\n            `               LL        aa  aa   dd  dd   dd  dd   ee      rr`,\n            `               LLLLLLLL   aaa aa   ddd dd   ddd dd   eeee   rr`,\n            ``,\n            `                                       Version:    ${GameVersion}`,\n            `(c) 1982, 1983 Yahoo Software          Terminal:   ${terminal}`,\n            `10970 Ashton Ave.  Suite 312           Play speed: ${Game.playSpeed + 1} / ${PLAY_SPEEDS.length}`,\n            `Los Angeles, Ca  90024                 Move = ↑↓←→/WASD, Jump = Space,`,\n            `                                       Stop = Other`,\n            ``,\n            `P = Play game                          High Scores`,\n            `L = Change level of difficulty         ${highScores[0]}`,\n            `C = Configure Ladder                   ${highScores[1]}`,\n            `I = Instructions                       ${highScores[2]}`,\n            `E = Exit Ladder                        ${highScores[3]}`,\n            `                                       ${highScores[4]}`,\n            ``,\n            `Enter one of the above:`\n        ]);\n    }\n}\n","import { Screen } from './Screen';\nimport { Game } from './Game';\nimport { Input } from './Input';\n\nexport class InstructionsMenu {\n    constructor() {\n    }\n\n    update() {\n        if (Input.lastKey().toUpperCase() !== '') {\n            Input.consume();\n            Game.showMainMenu();\n        }\n    }\n\n    draw() {\n        Screen.clear();\n        Screen.write(0, 0, [\n            `You are a Lad trapped in a maze.  Your mission is is to explore the`,\n            `dark corridors never before seen by human eyes and find hidden`,\n            `treasures and riches.`,\n            ``,\n            `You control Lad by typing the direction buttons and jumping by`,\n            `typing SPACE.  But beware of the falling rocks called Der rocks.`,\n            `You must find and grasp the treasures (shown as $) BEFORE the`,\n            `bonus time runs out.`,\n            ``,\n            `A new Lad will be awarded for every 10,000 points.`,\n            `Extra points are awarded for touching the gold`,\n            `statues (shown as &).  You will receive the bonus time points`,\n            `that are left when you have finished the level.`,\n            ``,\n            `Type an ESCape to pause the Game`,\n            ``,\n            `Remember, there is more than one way to skin a cat. (Chum)`,\n            ``,\n            `Good luck Lad.`,\n            ``,\n            ``,\n            ``,\n            `Type RETURN to return to main menu:`\n        ]);\n    }\n}\n","/**\n * A collection of states and functions related to entities.\n */\n\nimport { LEVEL_COLS } from './Constants';\nimport { Audio } from './Audio';\n\n// A list of states usable by entities. Some states only apply to players (rocks can't jump).\n//\n// Many of these are actually DIRECTIONS, but since this game has \"pac man movement\", a\n// direction is a state -- the player will keep moving in the tapped direction until the player\n// enters a new input.\nexport const State = {\n    STOPPED:    1,         // Standing still\n    UP:         2,         // Moving up (player only)\n    LEFT:       3,         // Moving left\n    DOWN:       4,         // Moving down\n    RIGHT:      5,         // Moving right\n    FALLING:    6,         // Falling\n    START_JUMP: 7,         // About to start a jump (player only)\n    JUMP_LEFT:  8,         // Jumping left (player only)\n    JUMP_RIGHT: 9,         // Jumping right (player only)\n    JUMP_UP:    10,        // Jumping straight up (player only)\n    DYING:      11,        // Dying (used as a death animation)\n    DEAD:       12         // Dead (for player, restart level; for rock, disappear)\n};\n\n// This constant controls the \"shape\" of the left, right, and straight-up jumps by\n// the player. Note that the straight-up jump gets 1 frame less of airtime than\n// the left and right jumps.\nexport const JUMP_FRAMES = {\n    [State.JUMP_RIGHT]: [\n        { x: 1, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 0 },\n        { x: 1, y: 0 },\n        { x: 1, y: 1 },\n        { x: 1, y: 1 }\n    ],\n    [State.JUMP_LEFT]: [\n        { x: -1, y: -1 },\n        { x: -1, y: -1 },\n        { x: -1, y: 0 },\n        { x: -1, y: 0 },\n        { x: -1, y: 1 },\n        { x: -1, y: 1 }\n    ],\n    [State.JUMP_UP]: [\n        { x: 0, y: -1 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 },\n        { x: 0, y: 1 },\n        { x: 0, y: 1 },\n        { x: 0, y: 0 }\n    ]\n};\n\nexport function applyEntityMovement(entity, field) {\n    let repeat = false;\n\n    // This method contains generic \"movement\" application for all entities, including\n    // Lad (player) and Der Rocks (enemies). Things like falling, moving left/right, etc.,\n    // work the same for both.\n    //\n    // (There's a bunch of jump logic in here too, and moving UP, which really only applies\n    // to players, but that's OK -- Der Rocks just won't attempt those actions.)\n\n    if (entity.nextState) {\n        switch (entity.state) {\n            case State.STOPPED:\n            case State.LEFT:\n            case State.RIGHT:\n                if ([State.LEFT, State.RIGHT, State.STOPPED].includes(entity.nextState)) {\n                    entity.state = entity.nextState;\n                    entity.nextState = undefined;\n                }\n                break;\n\n            case State.UP:\n            case State.DOWN:\n                // Normal\n                if ([State.LEFT, State.RIGHT].includes(entity.nextState)) {\n                    entity.state = entity.nextState;\n                    entity.nextState = undefined;\n                }\n                break;\n\n            case State.JUMP_LEFT:\n            case State.JUMP_RIGHT:\n            case State.JUMP_UP:\n                if (entity.nextState === State.RIGHT && entity.state != State.JUMP_RIGHT) {\n                    entity.state = State.JUMP_RIGHT;\n                    entity.nextState = State.RIGHT;\n                }\n                if (entity.nextState === State.LEFT && entity.state != State.JUMP_LEFT) {\n                    entity.state = State.JUMP_LEFT;\n                    entity.nextState = State.LEFT;\n                }\n                if (entity.nextState === State.DOWN) {\n                    entity.state = State.FALLING;\n                    entity.nextState = undefined;\n                }\n                if (entity.nextState === State.UP) {\n                    // Special case: leave UP in the queue for later\n                }\n                break;\n        }\n    }\n\n    if (entity.nextState === State.START_JUMP) {\n        // Special case: the user wants to jump!\n        //\n        // If the player is standing on something solid, we initiate a jump based on the current\n        // movement of the player.\n        if (field.onSolid(entity.x, entity.y)) {\n            if (entity.state === State.STOPPED || entity.state === State.FALLING) {\n                entity.state = State.JUMP_UP;\n                entity.jumpStep = 0;\n                entity.nextState = State.STOPPED;\n            } else if (entity.state === State.LEFT || entity.state === State.JUMP_LEFT) {\n                entity.state = State.JUMP_LEFT;\n                entity.jumpStep = 0;\n                entity.nextState = State.LEFT;\n            } else if (entity.state === State.RIGHT || entity.state === State.JUMP_RIGHT) {\n                entity.state = State.JUMP_RIGHT;\n                entity.jumpStep = 0;\n                entity.nextState = State.RIGHT;\n            }\n            Audio.play(Audio.jump);\n        } else {\n            // Special case: leave START_JUMP in the queue for later.\n            //\n            // This lets the user tap jump a few frames before hitting the ground to\n            // chain-jump, especially at higher speeds bouncing off 1-wide platforms.\n        }\n    } else if (entity.nextState === State.UP && field.isLadder(entity.x, entity.y)) {\n        // Special case: the user wants to go up!\n        //\n        // If the user is on a ladder, we can start ascending. Note that if the user is not\n        // on a ladder we ignore their input, which is intentional -- this allows queued\n        // (pacman) input, where we can tap UP a little before reaching the ladder.\n        entity.state = State.UP;\n        entity.nextState = undefined;\n    } else if (entity.nextState === State.DOWN && (field.isLadder(entity.x, entity.y) || field.isLadder(entity.x, entity.y + 1))) {\n        // Special case: the player wants to go down!\n        //\n        // If the player is on (or above) a ladder, we can start descending. Note that if the player is not\n        // on a ladder we ignore their input, which is intentional -- this allows queued\n        // (pacman) input, where we can tap DOWN a little before reaching the ladder.\n        entity.state = State.DOWN;\n        entity.nextState = undefined;\n    }\n\n    switch (entity.state) {\n        case State.LEFT:\n            if (!field.onSolid(entity.x, entity.y)) {\n                entity.nextState = State.LEFT;\n                entity.state = State.FALLING;\n                repeat = true;\n                break;\n            }\n            if (field.emptySpace(entity.x - 1, entity.y)) {\n                entity.x--;\n            } else {\n                entity.nextState = State.STOPPED;\n            }\n            break;\n\n        case State.RIGHT:\n            if (!field.onSolid(entity.x, entity.y)) {\n                entity.nextState = State.RIGHT;\n                entity.state = State.FALLING;\n                repeat = true;\n                break;\n            }\n            if (field.emptySpace(entity.x + 1, entity.y)) {\n                entity.x++;\n            } else {\n                entity.nextState = State.STOPPED;\n            }\n            break;\n\n        case State.UP:\n            if (field.canClimbUp(entity.x, entity.y - 1)) {\n                entity.y--;\n            } else {\n                entity.state = State.STOPPED;\n            }\n            break;\n\n        case State.DOWN:\n            if (field.canClimbDown(entity.x, entity.y + 1)) {\n                entity.y++;\n            } else {\n                entity.state = State.STOPPED;\n            }\n            break;\n\n        case State.JUMP_RIGHT:\n        case State.JUMP_LEFT:\n        case State.JUMP_UP:\n            let step = JUMP_FRAMES[entity.state][entity.jumpStep];\n            if ((entity.x + step.x >= 0) && (entity.x + step.x < LEVEL_COLS)) {\n                let terrain = field.layout[entity.y + step.y][entity.x + step.x];\n                if (['=', '|', '-'].includes(terrain)) {\n                    if (field.onSolid(entity.x, entity.y)) {\n                        entity.state = entity.nextState;\n                        entity.nextState = undefined;\n                    } else {\n                        switch (entity.state) {\n                            case State.JUMP_RIGHT:\n                                entity.nextState = State.RIGHT;\n                                break;\n                            case State.JUMP_LEFT:\n                                entity.nextState = State.LEFT;\n                                break;\n                            case State.JUMP_UP:\n                                entity.nextState = State.UP;\n                                break;\n                        }\n                        entity.state = State.FALLING;\n                    }\n                } else if (terrain === 'H') {\n                    entity.x += step.x;\n                    entity.y += step.y;\n\n                    if (entity.nextState === State.UP) {\n                        entity.state = State.UP;\n                    } else {\n                        entity.state = State.STOPPED;\n                    }\n                    entity.nextState = undefined;\n                } else {\n                    entity.x += step.x;\n                    entity.y += step.y;\n                    entity.jumpStep++;\n\n                    if (entity.jumpStep >= JUMP_FRAMES[entity.state].length) {\n                        switch (entity.state) {\n                            case State.JUMP_RIGHT:\n                                entity.state = State.RIGHT;\n                                break;\n                            case State.JUMP_LEFT:\n                                entity.state = State.LEFT;\n                                break;\n                            case State.JUMP_UP:\n                                entity.state = State.UP;\n                                break;\n                        }\n                    }\n                }\n            } else {\n                if (field.onSolid(entity.x, entity.y)) {\n                    entity.state = entity.nextState;\n                    entity.nextState = undefined;\n                } else {\n                    entity.state = State.FALLING;\n                    entity.nextState = State.STOPPED;\n                }\n            }\n            break;\n\n        case State.FALLING:\n            if (field.onSolid(entity.x, entity.y)) {\n                entity.state = entity.nextState || State.STOPPED;\n            } else {\n                entity.y++;\n            }\n            break;\n    }\n\n    // If we were attempting to move somewhere and realized we should be falling instead,\n    // we want to re-run the entire algorithm once. This avoids what boils down to a \"skipped\n    // frame\" from the user's point of view.\n    if (repeat) return applyEntityMovement(entity, field);\n}\n","'use strict';\n\nimport { State, applyEntityMovement } from './Entity';\nimport { Input } from './Input';\nimport { Screen } from './Screen';\nimport { Audio } from './Audio';\n\nconst DEATH_FRAMES = ['p', 'p', 'b', 'b', 'd', 'd', 'q', 'q', 'p', 'p', 'b', 'b', 'd', 'd', 'q', 'q', '-', '-', '_', '_', '_', '_', '_'];\n\n/**\n * Player\n */\nexport class Player {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.state = State.STOPPED;\n        this.nextState = State.STOPPED;\n        this.queued = [];\n        this.jumpStep = 0;\n        this.deathStep = 0;\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        let action = Input.lastAction();\n\n        if (action === Input.Action.LEFT) {\n            this.nextState = State.LEFT;\n            Input.consume();\n        } else if (action === Input.Action.RIGHT) {\n            this.nextState = State.RIGHT;\n            Input.consume();\n        } else if (action === Input.Action.UP) {\n            this.nextState = State.UP;\n            Input.consume();\n        } else if (action === Input.Action.DOWN) {\n            this.nextState = State.DOWN;\n            Input.consume();\n        } else if (action === Input.Action.JUMP) {\n            this.nextState = State.START_JUMP;\n            Input.consume();\n        }\n\n        return applyEntityMovement(this, field);\n    }\n\n    draw() {\n        let char = 'g';\n\n        switch (this.state) {\n            case State.RIGHT:\n            case State.JUMP_RIGHT:\n            case State.UP:\n            case State.DOWN:\n                char = 'p';\n                break;\n\n            case State.LEFT:\n            case State.JUMP_LEFT:\n                char = 'q';\n                break;\n\n            case State.FALLING:\n                char = 'b';\n                break;\n\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n\n            case State.DEAD:\n                char = '_';\n                break;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n\n    kill() {\n        // Just a convenience method for killing the player.\n        //\n        // Note that \"killing\" the player just puts it in a dying state, we'll play\n        // a little death animation as rocks move about before the player actually dies,\n        // at which point they will lose a life and the level starts over.\n        if (this.state != State.DYING && this.state != State.DEAD) {\n            this.state = State.DYING;\n            Audio.play(Audio.dying);\n        }\n    }\n}\n","/**\n * `Rock` is a class representing the Der rocks, which fall through the level\n * and kill the player if touched.\n */\n\nimport { LEVEL_COLS } from './Constants';\nimport { State, applyEntityMovement } from './Entity';\nimport { Screen } from './Screen';\n\nconst DEATH_FRAMES = ['{', '}', '(', ')', '%', '%', ':', ':'];\n\nexport class Rock {\n    constructor(dispenser) {\n        this.x = dispenser.x;\n        this.y = dispenser.y;\n        this.state = State.FALLING;\n        this.nextState = undefined;\n        this.deathStep = 0;\n    }\n\n    update(field, moveFrame) {\n        if (this.state === State.DYING) {\n            this.deathStep++;\n            if (this.deathStep >= DEATH_FRAMES.length) this.state = State.DEAD;\n        }\n\n        if (this.state === State.DYING || this.state === State.DEAD) return;\n\n        if (!moveFrame) return;\n\n        if (this.state === State.STOPPED) {\n            if (this.x === 0 || !field.emptySpace(this.x - 1, this.y)) {\n                this.nextState = State.RIGHT;\n            } else if (this.x === LEVEL_COLS - 1 || !field.emptySpace(this.x + 1, this.y)) {\n                this.nextState = State.LEFT;\n            } else {\n                this.nextState = Math.random() > 0.5 ? State.LEFT : State.RIGHT;\n            }\n        }\n\n        if (this.x === 0 && this.state === State.LEFT) {\n            this.state = State.RIGHT;\n        }\n\n        if (this.x === LEVEL_COLS - 1 && this.state === State.RIGHT) {\n            this.state = State.LEFT;\n        }\n\n        if (this.state !== State.FALLING && !field.onSolid(this.x, this.y)) {\n            this.nextState = State.FALLING;\n        }\n\n        if (field.isLadder(this.x, this.y + 1) && [State.LEFT, State.RIGHT].includes(this.state)) {\n            let r = Math.floor(Math.random() * 4);\n            this.nextState = [State.LEFT, State.RIGHT, State.DOWN, State.DOWN][r];\n        }\n\n        if (field.isEater(this.x, this.y)) {\n            this.state = State.DYING;\n            return;\n        }\n\n        return applyEntityMovement(this, field);\n    }\n\n    draw() {\n        let char = 'o';\n\n        switch (this.state) {\n            case State.DYING:\n                char = DEATH_FRAMES[this.deathStep];\n                break;\n            case State.DEAD:\n                return;\n        }\n\n        Screen.write(this.x, this.y, char);\n    }\n}\n","/**\n * `Level` is a singleton that handles logic related to loading levels. A \"level\"\n * is a bundle of data (like layout, dispensers, player position, etc.). When you\n * load a level, that data is used to initialize a new \"playing field\" -- this is\n * what the player moves around on and interacts with.\n *\n * (Naming things is hard, so it helps to make a decision and then stick to it\n * throughout your codebase. In this case, the decision is that a \"level\" is a\n * static block of data about a level the user COULD play, whereas a level being\n * actively played is called a playing field.)\n */\n\nimport { LEVEL_ROWS, LEVEL_COLS } from './Constants';\nimport LevelData from '../levels/levels.json';\n\nexport const Level = {\n    LEVELS: LevelData,\n    LEVEL_COUNT: LevelData.length,\n\n    load(levelNumber) {\n        // In the original Ladder, \"level 7\" was the last level, and continuing to\n        // play looped you around to the beginning again (level 8 is Easy Street\n        // again and so on, and so is level 15, etc.).\n        let level = Level.LEVELS[levelNumber % Level.LEVELS.length];\n        if (!level) throw new Error(`No such level number: ${levelNumber}`);\n\n        // Perform some sanity checks on the level layout and extract useful info\n        // like player start position and dispenser positions etc.\n\n        let layout = level.layout.map(row => row.split(''));\n        let dispensers = [];\n        let player;\n\n        // Sanity check\n        layout = layout.slice(0, LEVEL_ROWS);\n\n        for (let y = 0; y < LEVEL_ROWS; y++) {\n            // Sanity checks\n            if (!layout[y]) layout[y] = [];\n            layout[y] = layout[y].slice(0, LEVEL_COLS);\n\n            for (let x = 0; x < LEVEL_COLS; x++) {\n                // Sanity check\n                if (!layout[y][x]) layout[y][x] = ' ';\n\n                // Der Dispensers (V) and Der Eaters (*) have behaviors, so it is convenient for us\n                // to construct a list of them, but they are permanent parts of the layout, so we can\n                // leave them as part of the level and draw them normally.\n\n                if (layout[y][x] === 'V') {\n                    dispensers.push({ x, y });\n                }\n\n                // Treasure ($), Statues (&), and the Lad (p) are transient - the player moves around and\n                // can pick up the treasures and statues. That's why for these elements, we add them to\n                // our lists AND we remove them from the \"playing field\", we'll draw them separately on\n                // top of the layout.\n\n                if (layout[y][x] === 'p') {\n                    layout[y][x] = ' ';\n                    player = { x, y };\n                }\n\n                // Everything else, like floors (=), walls (|), ladders (H) and fire (^), is part of the\n                // layout. The Lad interacts with them, but we can handle that during our movement checks.\n            }\n        }\n\n        return {\n            name: level.name,\n            layout,\n            dispensers,\n            player\n        };\n    }\n};\n","/**\n * `PlayingField` is a class that represents a level that is actively being played on-screen.\n * A new one is created by the game session any time we start a new level.\n *\n * Level-specific stuff (like bonus time, dispensers, rocks, player position, etc.) is all\n * managed by the playing field.\n */\n\nimport { LEVEL_COLS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE, MAX_ROCKS, DISPENSER_MAX_ROCKS, HIDDEN_FACTOR_MAX_ROCKS } from './Constants';\nimport { Game } from './Game';\nimport { Player } from './Player';\nimport { Rock } from './Rock';\nimport { State } from './Entity';\nimport { Screen } from './Screen';\nimport { Level } from './Level';\nimport { Audio } from './Audio';\n\nexport class PlayingField {\n    constructor(levelNumber) {\n        let level = Level.load(levelNumber);\n\n        // Store level-related info\n        this.layout = level.layout;\n        this.dispensers = level.dispensers;\n        this.time = 2000;\n\n        // Initialize player\n        this.player = new Player(level.player.x, level.player.y);\n\n        // Initialize list of rocks (empty)\n        this.rocks = [];\n\n        // Not winning yet (while \"winning\" the player stops moving and we add up the bonus score)\n        this.winning = false;\n\n        Audio.play(Audio.begin);\n    }\n\n    update(moveFrame) {\n        // If we're already winning, keep counting down the bonus time, but\n        // no more movement will happen on this level.\n        if (this.winning) {\n            Game.session.updateScore(SCORE_TREASURE);\n            this.time -= 10;\n            if (this.time < 0) Game.session.startNextLevel();\n            return;\n        }\n\n        // Count down bonus time\n        if (this.time > 0 && moveFrame) this.time--;\n\n        let oldX = this.player.x, oldY = this.player.y;\n\n        // Move player based on user input\n        this.player.update(this, moveFrame);\n\n        // Any time you move OFF of a disappearing floor, it goes away.\n        if (oldX !== this.player.x && oldY === this.player.y) {\n            if (this.isDisappearingFloor(oldX, oldY + 1)) {\n                this.layout[oldY + 1][oldX] = ' ';\n            }\n        }\n\n        // Check if player should be dead (before moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n        // Move rocks\n        for (let rock of this.rocks) rock.update(this, moveFrame);\n\n        // Check if player should be dead (after moving rocks)\n        if (moveFrame) this.checkIfPlayerShouldDie(Game.session);\n\n        if (moveFrame) {\n            // Collect statues\n            if (this.isStatue(this.player.x, this.player.y)) {\n                this.layout[this.player.y][this.player.x] = ' ';\n                Game.session.updateScore(SCORE_STATUE);\n            }\n\n            // Collect treasure (ends the current level)\n            if (this.isTreasure(this.player.x, this.player.y)) {\n                this.winning = true;\n                return;\n            }\n\n            // Interact with trampolines\n            if (this.isTrampoline(this.player.x, this.player.y)) {\n                switch (Math.floor(Math.random() * 5)) {\n                    case 0:\n                        this.player.state = State.LEFT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 1:\n                        this.player.state = State.RIGHT;\n                        this.player.nextState = undefined;\n                        break;\n                    case 2:\n                        this.player.state = State.JUMP_UP;\n                        this.player.nextState = undefined;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 3:\n                        this.player.state = State.JUMP_LEFT;\n                        this.player.nextState = State.LEFT;\n                        this.player.jumpStep = 0;\n                        break;\n                    case 4:\n                        this.player.state = State.JUMP_RIGHT;\n                        this.player.nextState = State.RIGHT;\n                        this.player.jumpStep = 0;\n                        break;\n                }\n            }\n\n            // Kill dead rocks\n            this.rocks = this.rocks.filter(rock => rock.state !== State.DEAD);\n\n            // Dispense new rocks\n            if (this.rocks.length < this.maxRocks() && Math.random() > 0.91) {\n                let dispenser = this.dispensers[Math.floor(Math.random() * this.dispensers.length)];\n                this.rocks.push(new Rock(dispenser));\n            }\n\n            // Dying player\n            if (this.player.state === State.DEAD) {\n                Game.session.lives--;\n                if (Game.session.lives <= 0) {\n                    // TODO: More fanfare\n                    Game.showMainMenu();\n                } else {\n                    Game.session.restartLevel();\n                }\n            }\n        }\n    }\n\n    draw() {\n        // Draw layout\n        Screen.write(0, 0, this.layout.map(row => row.join('')));\n\n        // Draw player\n        this.player.draw();\n\n        // Draw rocks\n        this.rocks.forEach(rock => rock.draw());\n    }\n\n    //\n    // Utility functions - this is an attempt to consolidate logic in one spot and make other\n    // functions (like the update logic in Player) more readable.\n    //\n\n    onSolid(x, y) {\n        return ['=', '-', 'H', '|'].includes(this.layout[y + 1][x]) || this.layout[y][x] === 'H';\n    }\n\n    emptySpace(x, y) {\n        if (x < 0 || x >= LEVEL_COLS) {\n            return false;\n        } else {\n            return !['|', '='].includes(this.layout[y][x]);\n        }\n    }\n\n    isLadder(x, y) {\n        return this.layout[y][x] === 'H';\n    }\n\n    isStatue(x, y) {\n        return this.layout[y][x] === '&';\n    }\n\n    isTreasure(x, y) {\n        return this.layout[y][x] === '$';\n    }\n\n    isTrampoline(x, y) {\n        return this.layout[y][x] === '.';\n    }\n\n    isEater(x, y) {\n        return this.layout[y][x] === '*';\n    }\n\n    isFire(x, y) {\n        return this.layout[y][x] === '^';\n    }\n\n    isDisappearingFloor(x, y) {\n        return this.layout[y][x] === '-';\n    }\n\n    canClimbUp(x, y) {\n        if (y < 0) return false;\n        return ['H', '&', '$'].includes(this.layout[y][x]);\n    }\n\n    canClimbDown(x, y) {\n        return ['H', '&', '$', ' ', '^', '.'].includes(this.layout[y][x]);\n    }\n\n    checkIfPlayerShouldDie() {\n        // If we're ALREADY dying or dead, let nature run its course\n        if (this.player.state === State.DYING || this.player.state === State.DEAD) return;\n\n        // Landing on fire kills you\n        if (this.isFire(this.player.x, this.player.y)) {\n            this.player.kill();\n        }\n\n        // Running out of time kills you\n        if (this.time <= 0) {\n            this.player.kill();\n        }\n\n        // Running into a rock kills you, and makes the rock that killed you disappear.\n        // That's not necessary, I just think it looks better. While we play the death\n        // animation we'll continue to move rocks, so another rock might also \"hit\" you,\n        // but it will just pass through your dying character.\n        //\n        // If we're above a rock with 1 or 2 spaces between, we get some points instead.\n        //\n        // A function named `checkIfPlayerShouldDie` is probably not the best place to do\n        // this, but it's convenient because we want to do this twice (just like the death\n        // check).\n        //\n        //                    p                          p\n        // (1)   p     -->            (2)   p     -->\n        //        o          o                o          o\n        //      =====       =====          =====       =====\n        //\n        // In situation (1), there will never be a frame on-screen where the player is directly\n        // above the rock, but we'll still count it because we'll check once after the player moves.\n        // In situation (2), the first check won't count, but the second check after the rocks move\n        // will give the score (and the frame drawn on screen will show the player above the rock).\n        //\n        for (let i = 0; i < this.rocks.length; i++) {\n            if (this.player.x === this.rocks[i].x) {\n                if (this.player.y === this.rocks[i].y) {\n                    this.player.kill();\n                    this.rocks.splice(i, 1);\n                    break;\n                } else if (this.player.y === this.rocks[i].y - 1 && this.emptySpace(this.player.x, this.player.y + 1)) {\n                    Game.session.updateScore(SCORE_ROCK);\n                } else if (this.player.y === this.rocks[i].y - 2 && this.emptySpace(this.player.x, this.player.y + 1) && this.emptySpace(this.player.x, this.player.y + 2)) {\n                    Game.session.updateScore(SCORE_ROCK);\n                }\n            }\n        }\n    }\n\n    maxRocks() {\n        // The total number of rocks we can have on screen is based on a global max rocks value,\n        // then increased slightly by the number of dispensers on the level, then increased again\n        // by a hidden difficulty factor (level cycles).\n        return MAX_ROCKS + this.dispensers.length * DISPENSER_MAX_ROCKS + Game.session.hiddenFactor() * HIDDEN_FACTOR_MAX_ROCKS;\n    }\n}\n","/**\n * `GameSession` is a class that represents... well, a game session! It is created when the\n * player presses `P` at the main menu, and ends when the player runs out of lives.\n *\n * The game session tracks values that persist across levels (like number of lives, score,\n * the level number, etc.). Most of the actual in-game logic it hands off to `PlayingField`.\n */\n\nimport { PLAY_SPEEDS, SCORE_ROCK, SCORE_STATUE, SCORE_TREASURE, HIDDEN_FACTOR_PLAY_SPEED, NEW_LIFE_SCORE } from './Constants';\nimport { Game } from './Game';\nimport { PlayingField } from './PlayingField';\nimport { Level } from './Level';\nimport { Screen } from './Screen';\nimport { Input } from './Input';\nimport { Audio } from './Audio';\n\nexport class GameSession {\n    constructor() {\n        this.score = 0;\n        this.levelNumber = 0;\n        this.levelCycle = 1;\n        this.lives = 5;\n        this.nextLife = NEW_LIFE_SCORE;\n        this.paused = false;\n    }\n\n    update() {\n        // The `Game` controls the overall game loop, which runs at a fixed 60 frames per second.\n        //\n        // However, Ladder has the concept of \"play speed\" which the player can change at the main\n        // menu, and it controls how fast the game runs. To accomplish that, we can do a second\n        // frame gate here. This gate sets a flag called `moveFrame` IF things can move in this frame.\n        //\n        // We do it this way so that animations (like the play death animation, or the end-of-level\n        // score animation) can run at the same speed no matter what the play speed is.\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n        let moveFrame = false;\n\n        if (now - lastFrame >= (this.nextFrame || 0)) {\n            moveFrame = true;\n            this.nextFrame = now + this.moveFrameMillisecondDelay();\n        }\n\n        if (this.paused && [Input.Action.PAUSE, Input.Action.RESUME].includes(Input.lastAction())) {\n            this.paused = false;\n            Input.consume();\n        }\n\n        if (!this.paused && Input.lastAction() === Input.Action.PAUSE) {\n            this.paused = true;\n            Input.consume();\n        }\n\n        if (this.paused) return;\n\n        // If we haven't instantiated the playing field yet, create it now.\n        if (!this.field) this.field = new PlayingField(this.levelNumber);\n\n        // Hand off to the playing field for actual in-game logic\n        this.field.update(moveFrame);\n\n        this.handleCheatCodes();\n    }\n\n    draw() {\n        if (this.field) this.field.draw();\n\n        let stat = [\n            String(this.lives).padStart(2, ' '),\n            String(this.levelNumber + 1).padStart(2, ' '),\n            String(this.score).padStart(6, ' '),\n            this.field ? String(this.field.time).padStart(4, ' ') : ''\n        ];\n        Screen.write(0, 21, `Lads   ${stat[0]}     Level   ${stat[1]}      Score   ${stat[2]}      Bonus time   ${stat[3]}`);\n\n        if (this.paused) {\n            Screen.write(0, 23, 'Paused - type ESCape or RETURN to continue.');\n        }\n    }\n\n    restartLevel() {\n        this.field = undefined;\n    }\n\n    startNextLevel() {\n        this.field = undefined;\n        this.levelNumber++;\n        if (this.levelNumber % Level.LEVEL_COUNT === 0) {\n            this.levelCycle++;\n        }\n    }\n\n    updateScore(scoreType) {\n        switch (scoreType) {\n            case SCORE_ROCK:\n                this.score += 200;\n                break;\n            case SCORE_STATUE:\n                this.score += this.field.time;\n                break;\n            case SCORE_TREASURE:\n                // Added repeatedly after winning the level\n                this.score += 10;\n                break;\n        }\n        Audio.play(Audio.score);\n\n        if (this.score >= this.nextLife) {\n            this.lives++;\n            this.nextLife += NEW_LIFE_SCORE;\n        }\n    }\n\n    hiddenFactor() {\n        // This \"hidden\" difficulty level increases steadily as the player completes a\n        // level cycle (every time they reach the Easy Street level). This makes the\n        // game slowly harder as you keep playing.\n        return Math.floor(this.levelNumber / Level.LEVEL_COUNT);\n    }\n\n    moveFrameMillisecondDelay() {\n        // Regardless of play speed, the game gets slightly faster every level cycle\n        return Math.floor(PLAY_SPEEDS[Game.playSpeed] - this.hiddenFactor() * HIDDEN_FACTOR_PLAY_SPEED * PLAY_SPEEDS[Game.playSpeed]);\n    }\n\n    handleCheatCodes() {\n        // Cheat codes are useful for testing, and this game is no exception. Of course\n        // THESE cheat codes do not belong here, as they wouldn't be created until 11 years\n        // later, but that won't stop me from using them anywhere I get the chance!\n        //\n        // =================     ===============     ===============   ========  ========\n        // \\\\ . . . . . . .\\\\   //. . . . . . .\\\\   //. . . . . . .\\\\  \\\\. . .\\\\// . . //\n        // ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\\/ . . .||\n        // || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||\n        // ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||\n        // || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\\ . . . . ||\n        // ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\\_ . .|. .||\n        // || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\\ `-_/| . ||\n        // ||_-' ||  .|/    || ||    \\|.  || `-_|| ||_-' ||  .|/    || ||   | \\  / |-_.||\n        // ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \\  / |  `||\n        // ||    `'         || ||         `'    || ||    `'         || ||   | \\  / |   ||\n        // ||            .===' `===.         .==='.`===.         .===' /==. |  \\/  |   ||\n        // ||         .=='   \\_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \\/  |   ||\n        // ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \\/  |   ||\n        // ||   .=='    _-'          `-__\\._-'         `-_./__-'         `' |. /|  |   ||\n        // ||.=='    _-'                                                     `' |  /==.||\n        // =='    _-'                                                            \\/   `==\n        // \\   _-'                                                                `-_   /\n        //  `''                                                                      ``'\n        //\n        let recentKeystrokes = Input.history.map(event => event.key).join('').toUpperCase();\n        if (recentKeystrokes.match(/IDCLEV(\\d\\d)/)) {\n            // Changing levels is as simple as setting the desired level number\n            // and then throwing the current playing field away.\n            Input.consume(true);\n            this.levelNumber = parseInt(RegExp.$1, 10);\n            this.field = undefined;\n        } else if (recentKeystrokes.includes('IDDQD')) {\n            Input.consume(true);\n            console.log('god mode');\n        } else if (recentKeystrokes.includes('IDKFA')) {\n            // Immediately end the current level as if we'd touched the treasure.\n            Input.consume(true);\n            if (this.field) this.field.winning = true;\n        } else if (recentKeystrokes.includes('IDKILL')) {\n            Input.consume(true);\n            if (this.field && this.field.player) this.field.player.kill();\n        }\n    }\n}\n","/**\n * `Game` is a singleton that represents the running game in the browser,\n * initializes game submodules, and handles the top-level game loop.\n */\n\nimport { Sprite } from './Sprite';\nimport { Input } from './Input';\nimport { Text } from './Text';\nimport { Viewport } from './Viewport';\nimport { GAME_WIDTH, GAME_HEIGHT, PLAY_SPEEDS } from './Constants';\nimport { Audio } from './Audio';\nimport { Screen } from './Screen';\nimport { MainMenu } from './MainMenu';\nimport { InstructionsMenu } from './InstructionsMenu';\nimport { GameSession } from './GameSession';\n\nexport const Game = {\n    init() {\n        Sprite.loadSpritesheet(async () => {\n            await Viewport.init();\n            await Screen.init();\n            await Sprite.init();\n            await Text.init();\n            await Input.init();\n            await Audio.init();\n\n            window.addEventListener('blur', () => this.lostFocus());\n            window.addEventListener('focus', () => this.gainedFocus());\n\n            this.start();\n        });\n    },\n\n    start() {\n        this.frame = 0;\n        this.playSpeed = 2;\n        this.showMainMenu();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    },\n\n    onFrame() {\n        let fps = 60;\n        let now = new Date().getTime();\n        let lastFrame = this.lastFrame || 0;\n\n        // Note: we are using `requestAnimationFrame`, which will call our onFrame handler\n        // 60 times per second in most cases. However, it can be higher (the browser may\n        // respect the user's refresh settings, which could be 120Hz or higher for example).\n        //\n        // It's safest to have a check like we do here, where we explicitly limit the number\n        // of update calls to 60 times per second.\n        if (now - lastFrame >= 1000 / fps) {\n            this.frame++;\n            this.update();\n            this.lastFrame = now;\n        }\n\n        Viewport.resize();\n        this.draw();\n\n        window.requestAnimationFrame(() => this.onFrame());\n    },\n\n    update() {\n        // Pull in frame by frame button pushes / keypresses / mouse clicks\n        Input.update();\n\n        // perform any per-frame audio updates\n        Audio.update();\n\n        if (this.menu) {\n            this.menu.update();\n        }\n\n        if (this.session) this.session.update();\n    },\n\n    draw() {\n        // Reset canvas transform and scale\n        Viewport.ctx.setTransform(Viewport.scale, 0, 0, Viewport.scale, 0, 0);\n\n        // Clear canvas. Note we don't go for pure black but rather a dark gray, to simulate\n        // the relatively bright phosphors on the Kaypro II. (We are going to add scan lines\n        // at the end which will appear to darken the whole screen, so the overall effect\n        // will be a little darker than this color.)\n        Viewport.ctx.fillStyle = '#181818';\n        Viewport.ctx.fillRect(0, 0, Viewport.width, Viewport.height);\n\n        // Center the 80x25 character \"screen\" in the viewport\n        Viewport.ctx.translate((Viewport.width - GAME_WIDTH) / 2 | 0, (Viewport.height - GAME_HEIGHT) / 2 | 0);\n\n        // Hand off control to our submodules to draw whatever they'd like. For all the submodules\n        // below us, \"drawing\" means writing text to the Screen.\n        Screen.clear();\n        if (this.session) this.session.draw();\n        if (this.menu) this.menu.draw();\n\n        // Render the text on the screen to the viewport.\n        Screen.draw(Viewport.ctx);\n\n        // After drawing the \"screen\" (characters), add scan lines on top. Our scan lines are almost\n        // not visible, but move slowly and introduce subtle visual shifts in the characters on screen,\n        // which is the effect we are going for.\n        //\n        // (Technically scan lines should be IN BETWEEN rows of pixels, and what we're actually simulating\n        // here is our eyeballs clocking the screen refresh. We're going for a general feeling here.)\n        Viewport.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        for (let y = Math.floor(-Viewport.height / 2) - 4; y < Viewport.height + 4; y += 4) {\n            let r = ((this.frame / 5) % 4) + y;\n            Viewport.ctx.fillRect(-Viewport.width, r, Viewport.width * 2, 2);\n        }\n    },\n\n    startSession() {\n        this.menu = undefined;\n        this.session = new GameSession();\n\n        // Hide the github link while in a game session\n        document.getElementsByClassName('github-corner')[0].className = 'github-corner hidden';\n    },\n\n    showMainMenu() {\n        this.menu = new MainMenu();\n        this.session = undefined;\n\n        // Show github link again when returning from a game\n        document.getElementsByClassName('github-corner')[0].className = 'github-corner';\n    },\n\n    showInstructions() {\n        this.menu = new InstructionsMenu();\n        this.session = undefined;\n    },\n\n    lostFocus() {\n        // If we lose focus (the user switched tabs, or tabbed away from the browser),\n        // automatically pause the game session if there is one.\n        if (this.session) this.session.paused = true;\n    },\n\n    gainedFocus() {\n        // Do nothing - we'll let the user hit enter to resume playing.\n    }\n};\n","/**\n * This is the entry point for the game.\n */\nimport { Game } from './Game';\n\nGame.init();\n"]}